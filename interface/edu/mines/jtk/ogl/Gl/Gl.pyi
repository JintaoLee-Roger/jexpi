from typing import overload
from edu.mines.jtk.mapping import *

# Generated from GL.html
_GL = "From GL.html"
# Generated from GLLightingFunc.html
_GLLightingFunc = "From GLLightingFunc.html"
# Generated from GLMatrixFunc.html
_GLMatrixFunc = "From GLMatrixFunc.html"
# Generated from GLPointerFunc.html
_GLPointerFunc = "From GLPointerFunc.html"
# Generated from GL2.html
_GL2 = "From GL2.html"
# Generated from GL2ES1.html
_GL2ES1 = "From GL2ES1.html"
# Generated from GL2ES2.html
_GL2ES2 = "From GL2ES2.html"
# Generated from GL2ES3.html
_GL2ES3 = "From GL2ES3.html"
# Generated from GL2GL3.html
_GL2GL3 = "From GL2GL3.html"

# Generated from GL.html

GL_MAP_INVALIDATE_BUFFER_BIT = _GL
GL_DST_COLOR = _GL
GL_CULL_FACE_MODE = _GL
GL_LUMINANCE32F = _GL
GL_ONE_MINUS_SRC_COLOR = _GL
GL_UNSIGNED_SHORT_5_6_5 = _GL
GL_FLOAT = _GL
GL_MAP_READ_BIT = _GL
GL_RGB10_A2 = _GL
GL_ALPHA32F = _GL
GL_NEAREST = _GL
GL_TEXTURE_IMMUTABLE_FORMAT = _GL
GL_BLEND_SRC_RGB = _GL
GL_ONE_MINUS_DST_COLOR = _GL
GL_FALSE = _GL
GL_DEPTH24_STENCIL8 = _GL
GL_INVALID_VALUE = _GL
GL_STENCIL_TEST = _GL
GL_TEXTURE_MAX_ANISOTROPY_EXT = _GL
GL_POLYGON_OFFSET_FACTOR = _GL
GL_NO_ERROR = _GL
GL_MAX_SAMPLES = _GL
GL_RENDERBUFFER_BINDING = _GL
GL_INVALID_ENUM = _GL
GL_REPLACE = _GL
GL_ALPHA = _GL
GL_SAMPLE_COVERAGE_INVERT = _GL
GL_SAMPLE_COVERAGE = _GL
GL_SRC_ALPHA_SATURATE = _GL
GL_COLOR_CLEAR_VALUE = _GL
GL_RGB32F = _GL
GL_NICEST = _GL
GL_RGB565 = _GL
GL_BUFFER_USAGE = _GL
GL_STENCIL_ATTACHMENT = _GL
GL_STENCIL_PASS_DEPTH_PASS = _GL
GL_RGB16F = _GL
GL_RGBA8 = _GL
GL_SRC_COLOR = _GL
GL_BACK = _GL
GL_READ_FRAMEBUFFER_BINDING = _GL
GL_ONE = _GL
GL_SAMPLES = _GL
GL_RENDERBUFFER = _GL
GL_LUMINANCE8 = _GL
GL_FIXED = _GL
GL_DEPTH_ATTACHMENT = _GL
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = _GL
GL_DEPTH_STENCIL = _GL
GL_NONE = _GL
GL_INVERT = _GL
GL_SAMPLE_COVERAGE_VALUE = _GL
GL_VERSION = _GL
GL_R8 = _GL
GL_EQUAL = _GL
GL_STENCIL_INDEX4 = _GL
GL_SRC_ALPHA = _GL
GL_TEXTURE_MIN_FILTER = _GL
GL_OUT_OF_MEMORY = _GL
GL_RENDERBUFFER_GREEN_SIZE = _GL
GL_ONE_MINUS_DST_ALPHA = _GL
GL_FRONT = _GL
GL_COLOR_BUFFER_BIT = _GL
GL_FUNC_ADD = _GL
GL_ELEMENT_ARRAY_BUFFER = _GL
GL_RG32F = _GL
GL_BGR = _GL
GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = _GL
GL_BLEND_EQUATION = _GL
GL_DEPTH_TEST = _GL
GL_RGBA4 = _GL
GL_RGBA = _GL
GL_BLEND_EQUATION_ALPHA = _GL
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = _GL
GL_LUMINANCE_ALPHA = _GL
GL_NO_RESET_NOTIFICATION = _GL
GL_STENCIL_CLEAR_VALUE = _GL
GL_TEXTURE_2D = _GL
GL_RG16F = _GL
GL_FRAMEBUFFER_COMPLETE = _GL
GL_GREATER = _GL
GL_VENDOR = _GL
GL_SRGB8_ALPHA8 = _GL
GL_RENDERBUFFER_DEPTH_SIZE = _GL
GL_TEXTURE_BINDING_CUBE_MAP = _GL
GL_RENDERER = _GL
GL_DEPTH_COMPONENT24 = _GL
GL_EXTENSIONS = _GL
GL_ARRAY_BUFFER_BINDING = _GL
GL_LINES = _GL
GL_MIRRORED_REPEAT = _GL
GL_STENCIL_REF = _GL
GL_MAX_TEXTURE_SIZE = _GL
GL_CW = _GL
GL_LINEAR_MIPMAP_LINEAR = _GL
GL_RGB5_A1 = _GL
GL_NUM_COMPRESSED_TEXTURE_FORMATS = _GL
GL_UNSIGNED_SHORT_4_4_4_4 = _GL
GL_BUFFER_SIZE = _GL
GL_STENCIL_BITS = _GL
GL_DONT_CARE = _GL
GL_DEPTH_CLEAR_VALUE = _GL
GL_IMPLEMENTATION_COLOR_READ_TYPE = _GL
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = _GL
GL_CLAMP_TO_EDGE = _GL
GL_DEPTH_FUNC = _GL
GL_BUFFER_MAPPED = _GL
GL_DEPTH_WRITEMASK = _GL
GL_POLYGON_OFFSET_FILL = _GL
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = _GL
GL_RENDERBUFFER_SAMPLES = _GL
GL_PACK_ALIGNMENT = _GL
GL_SCISSOR_TEST = _GL
GL_DYNAMIC_DRAW = _GL
GL_R32F = _GL
GL_COLOR_ATTACHMENT0 = _GL
GL_RESET_NOTIFICATION_STRATEGY = _GL
GL_NEAREST_MIPMAP_LINEAR = _GL
GL_COMPRESSED_TEXTURE_FORMATS = _GL
GL_LOSE_CONTEXT_ON_RESET = _GL
GL_LINE_STRIP = _GL
GL_RGB = _GL
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = _GL
GL_STENCIL_WRITEMASK = _GL
GL_RG8 = _GL
GL_UNKNOWN_CONTEXT_RESET = _GL
GL_FASTEST = _GL
GL_RENDERBUFFER_ALPHA_SIZE = _GL
GL_LEQUAL = _GL
GL_GUILTY_CONTEXT_RESET = _GL
GL_TEXTURE = _GL
GL_WRITE_ONLY = _GL
GL_ELEMENT_ARRAY_BUFFER_BINDING = _GL
GL_COMPRESSED_RGB_S3TC_DXT1_EXT = _GL
GL_SAMPLE_BUFFERS = _GL
GL_RENDERBUFFER_INTERNAL_FORMAT = _GL
GL_RGBA32F = _GL
GL_MAX_VIEWPORT_DIMS = _GL
GL_LUMINANCE16F = _GL
GL_LUMINANCE8_ALPHA8 = _GL
GL_TRIANGLE_STRIP = _GL
GL_ALPHA16F = _GL
GL_LINEAR = _GL
GL_UNPACK_ALIGNMENT = _GL
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = _GL
GL_LINE_WIDTH = _GL
GL_ONE_MINUS_SRC_ALPHA = _GL
GL_INCR = _GL
GL_BLEND_EQUATION_RGB = _GL
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = _GL
GL_DEPTH_COMPONENT16 = _GL
GL_COLOR_WRITEMASK = _GL
GL_POLYGON_OFFSET_UNITS = _GL
GL_MAP_FLUSH_EXPLICIT_BIT = _GL
GL_SRGB_ALPHA = _GL
GL_IMPLEMENTATION_COLOR_READ_FORMAT = _GL
GL_RGB8 = _GL
GL_RGB10 = _GL
GL_TEXTURE_CUBE_MAP_POSITIVE_X = _GL
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = _GL
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = _GL
GL_LUMINANCE = _GL
GL_BGRA = _GL
GL_BLEND_SRC_ALPHA = _GL
GL_DRAW_FRAMEBUFFER = _GL
GL_DEPTH_BUFFER_BIT = _GL
GL_UNSIGNED_BYTE = _GL
GL_LINEAR_MIPMAP_NEAREST = _GL
GL_ALWAYS = _GL
GL_TRIANGLE_FAN = _GL
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = _GL
GL_GENERATE_MIPMAP_HINT = _GL
GL_FRONT_FACE = _GL
GL_DST_ALPHA = _GL
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = _GL
GL_TEXTURE_BINDING_2D = _GL
GL_MAP_UNSYNCHRONIZED_BIT = _GL
GL_DECR_WRAP = _GL
GL_VIEWPORT = _GL
GL_TRUE = _GL
GL_INCR_WRAP = _GL
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = _GL
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = _GL
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = _GL
GL_READ_FRAMEBUFFER = _GL
GL_FRAMEBUFFER_BINDING = _GL
GL_SHORT = _GL
GL_RED_BITS = _GL
GL_FUNC_REVERSE_SUBTRACT = _GL
GL_LESS = _GL
GL_FRAMEBUFFER = _GL
GL_FRONT_AND_BACK = _GL
GL_TRIANGLES = _GL
GL_INVALID_FRAMEBUFFER_OPERATION = _GL
GL_BUFFER_ACCESS = _GL
GL_DRAW_FRAMEBUFFER_BINDING = _GL
GL_ALPHA8 = _GL
GL_BGRA8 = _GL
GL_KEEP = _GL
GL_DEPTH_COMPONENT32 = _GL
GL_INNOCENT_CONTEXT_RESET = _GL
GL_ALPHA_BITS = _GL
GL_MAP_INVALIDATE_RANGE_BIT = _GL
GL_STENCIL_FUNC = _GL
GL_TEXTURE1 = _GL
GL_TEXTURE2 = _GL
GL_TEXTURE3 = _GL
GL_TEXTURE4 = _GL
GL_TEXTURE5 = _GL
GL_TEXTURE6 = _GL
GL_TEXTURE7 = _GL
GL_TEXTURE8 = _GL
GL_TEXTURE9 = _GL
GL_RENDERBUFFER_RED_SIZE = _GL
GL_TEXTURE0 = _GL
GL_LUMINANCE4_ALPHA4 = _GL
GL_STENCIL_BUFFER_BIT = _GL
GL_LUMINANCE_ALPHA32F = _GL
GL_TEXTURE20 = _GL
GL_REPEAT = _GL
GL_DEPTH_BITS = _GL
GL_SAMPLE_ALPHA_TO_COVERAGE = _GL
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = _GL
GL_TEXTURE19 = _GL
GL_TEXTURE18 = _GL
GL_TEXTURE17 = _GL
GL_TEXTURE16 = _GL
GL_TEXTURE15 = _GL
GL_TEXTURE14 = _GL
GL_TEXTURE13 = _GL
GL_TEXTURE12 = _GL
GL_TEXTURE11 = _GL
GL_TEXTURE10 = _GL
GL_TEXTURE30 = _GL
GL_TEXTURE31 = _GL
GL_NOTEQUAL = _GL
GL_TEXTURE29 = _GL
GL_TEXTURE26 = _GL
GL_TEXTURE25 = _GL
GL_TEXTURE28 = _GL
GL_TEXTURE27 = _GL
GL_TEXTURE22 = _GL
GL_TEXTURE21 = _GL
GL_TEXTURE24 = _GL
GL_TEXTURE23 = _GL
GL_RGBA16F = _GL
GL_ARRAY_BUFFER = _GL
GL_BLUE_BITS = _GL
GL_ZERO = _GL
GL_LINE_LOOP = _GL
GL_STENCIL_INDEX1 = _GL
GL_SRGB = _GL
GL_UNSIGNED_INT = _GL
GL_STENCIL_FAIL = _GL
GL_RENDERBUFFER_BLUE_SIZE = _GL
GL_RENDERBUFFER_WIDTH = _GL
GL_GEQUAL = _GL
GL_ALIASED_POINT_SIZE_RANGE = _GL
GL_BYTE = _GL
GL_SUBPIXEL_BITS = _GL
GL_STENCIL_VALUE_MASK = _GL
GL_NEAREST_MIPMAP_NEAREST = _GL
GL_BLEND_DST_RGB = _GL
GL_STENCIL_INDEX8 = _GL
GL_FUNC_SUBTRACT = _GL
GL_MAX_RENDERBUFFER_SIZE = _GL
GL_INVALID_OPERATION = _GL
GL_LUMINANCE_ALPHA16F = _GL
GL_UNSIGNED_INT_24_8 = _GL
GL_MAX_CUBE_MAP_TEXTURE_SIZE = _GL
GL_MAP_WRITE_BIT = _GL
GL_DECR = _GL
GL_TEXTURE_WRAP_T = _GL
GL_TEXTURE_WRAP_S = _GL
GL_BUFFER_MAP_POINTER = _GL
GL_SCISSOR_BOX = _GL
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = _GL
GL_ACTIVE_TEXTURE = _GL
GL_TEXTURE_MAG_FILTER = _GL
GL_BLEND_DST_ALPHA = _GL
GL_CCW = _GL
GL_UNSIGNED_SHORT = _GL
GL_DEPTH_RANGE = _GL
GL_R16F = _GL
GL_TEXTURE_CUBE_MAP = _GL
GL_STATIC_DRAW = _GL
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = _GL
GL_STENCIL_PASS_DEPTH_FAIL = _GL
GL_FRAMEBUFFER_SRGB = _GL
GL_RENDERBUFFER_HEIGHT = _GL
GL_GREEN_BITS = _GL
GL_ALIASED_LINE_WIDTH_RANGE = _GL
GL_UNSIGNED_SHORT_5_5_5_1 = _GL
GL_POINTS = _GL
GL_RENDERBUFFER_STENCIL_SIZE = _GL
GL_NEVER = _GL
GL_DITHER = _GL
GL_FRAMEBUFFER_UNSUPPORTED = _GL
GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = _GL
GL_BLEND = _GL
GL_CULL_FACE = _GL
GL_AND = _GL
GL_AND_INVERTED = _GL
GL_AND_REVERSE = _GL
GL_BLEND_DST = _GL
GL_BLEND_SRC = _GL
GL_CLEAR = _GL
GL_COLOR_LOGIC_OP = _GL
GL_COPY = _GL
GL_COPY_INVERTED = _GL
GL_EQUIV = _GL
GL_LINE_SMOOTH = _GL
GL_LINE_SMOOTH_HINT = _GL
GL_LOGIC_OP_MODE = _GL
GL_MULTISAMPLE = _GL
GL_NAND = _GL
GL_NOOP = _GL
GL_NOR = _GL
GL_OR = _GL
GL_OR_INVERTED = _GL
GL_OR_REVERSE = _GL
GL_POINT_FADE_THRESHOLD_SIZE = _GL
GL_POINT_SIZE = _GL
GL_SAMPLE_ALPHA_TO_ONE = _GL
GL_SET = _GL
GL_SMOOTH_LINE_WIDTH_RANGE = _GL
GL_SMOOTH_POINT_SIZE_RANGE = _GL
GL_XOR = _GL
GL_HALF_FLOAT = _GL
GL_FRAMEBUFFER_INCOMPLETE_FORMATS = _GL
GL_UNSIGNED_INT_10F_11F_11F_REV = _GL

# Generated from GLLightingFunc.html

GL_LIGHT0 = _GLLightingFunc
GL_LIGHT1 = _GLLightingFunc
GL_LIGHT2 = _GLLightingFunc
GL_LIGHT3 = _GLLightingFunc
GL_LIGHT4 = _GLLightingFunc
GL_LIGHT5 = _GLLightingFunc
GL_LIGHT6 = _GLLightingFunc
GL_LIGHT7 = _GLLightingFunc
GL_LIGHTING = _GLLightingFunc
GL_AMBIENT = _GLLightingFunc
GL_DIFFUSE = _GLLightingFunc
GL_SPECULAR = _GLLightingFunc
GL_POSITION = _GLLightingFunc
GL_SPOT_DIRECTION = _GLLightingFunc
GL_SPOT_EXPONENT = _GLLightingFunc
GL_SPOT_CUTOFF = _GLLightingFunc
GL_CONSTANT_ATTENUATION = _GLLightingFunc
GL_LINEAR_ATTENUATION = _GLLightingFunc
GL_QUADRATIC_ATTENUATION = _GLLightingFunc
GL_EMISSION = _GLLightingFunc
GL_SHININESS = _GLLightingFunc
GL_AMBIENT_AND_DIFFUSE = _GLLightingFunc
GL_COLOR_MATERIAL = _GLLightingFunc
GL_NORMALIZE = _GLLightingFunc
GL_FLAT = _GLLightingFunc
GL_SMOOTH = _GLLightingFunc

# Generated from GLMatrixFunc.html

GL_MATRIX_MODE = _GLMatrixFunc
GL_MODELVIEW = _GLMatrixFunc
GL_PROJECTION = _GLMatrixFunc
GL_MODELVIEW_MATRIX = _GLMatrixFunc
GL_PROJECTION_MATRIX = _GLMatrixFunc
GL_TEXTURE_MATRIX = _GLMatrixFunc

# Generated from GLPointerFunc.html

GL_VERTEX_ARRAY = _GLPointerFunc
GL_NORMAL_ARRAY = _GLPointerFunc
GL_COLOR_ARRAY = _GLPointerFunc
GL_TEXTURE_COORD_ARRAY = _GLPointerFunc

# Generated from GL2.html

GL_CURRENT_VERTEX_ATTRIB_ARB = _GL2
GL_GREEN_BIAS = _GL2
GL_MATRIX2_ARB = _GL2
GL_MATRIX26_ARB = _GL2
GL_TEXCOORD3_BIT_PGI = _GL2
GL_STENCIL_SAMPLES_NV = _GL2
GL_LUMINANCE_ALPHA8I = _GL2
GL_FLOAT_R_NV = _GL2
GL_VERTEX_SHADER_BINDING_EXT = _GL2
GL_FORMAT_SUBSAMPLE_244_244_OML = _GL2
GL_FOG_COORD_ARRAY_STRIDE = _GL2
GL_VERTEX_SHADER_LOCALS_EXT = _GL2
GL_VARIANT_ARRAY_STRIDE_EXT = _GL2
GL_LAST_VIDEO_CAPTURE_STATUS_NV = _GL2
GL_OUTPUT_TEXTURE_COORD19_EXT = _GL2
GL_FLOAT_RGB16_NV = _GL2
GL_FLOAT_CLEAR_COLOR_VALUE_NV = _GL2
GL_PIXEL_MAP_S_TO_S = _GL2
GL_EYE_PLANE = _GL2
GL_ACCUM_GREEN_BITS = _GL2
GL_MODELVIEW28_ARB = _GL2
GL_DOT_PRODUCT_DEPTH_REPLACE_NV = _GL2
GL_TIME_ELAPSED_EXT = _GL2
GL_PACK_ROW_BYTES_APPLE = _GL2
GL_MATRIX12_ARB = _GL2
GL_MAP2_INDEX = _GL2
GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = _GL2
GL_2D = _GL2
GL_UNIFORM_BUFFER_LENGTH_NV = _GL2
GL_YCBYCR8_422_NV = _GL2
GL_T4F_C4F_N3F_V4F = _GL2
GL_OBJECT_LINK_STATUS_ARB = _GL2
GL_PROGRAM_POINT_SIZE_EXT = _GL2
GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = _GL2
GL_SM_COUNT_NV = _GL2
GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = _GL2
GL_SLUMINANCE = _GL2
GL_PERFQUERY_SINGLE_CONTEXT_INTEL = _GL2
GL_RGBA4_S3TC = _GL2
GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = _GL2
GL_LUMINANCE_FLOAT16_ATI = _GL2
GL_RENDERBUFFER_COLOR_SAMPLES_NV = _GL2
GL_LUMINANCE_ALPHA_FLOAT32_ATI = _GL2
GL_OUTPUT_TEXTURE_COORD0_EXT = _GL2
GL_OUTPUT_TEXTURE_COORD3_EXT = _GL2
GL_INVARIANT_VALUE_EXT = _GL2
GL_VIDEO_BUFFER_PITCH_NV = _GL2
GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = _GL2
GL_LUMINANCE_FLOAT16_APPLE = _GL2
GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = _GL2
GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = _GL2
GL_COLORDODGE = _GL2
GL_GEOMETRY_INPUT_TYPE_EXT = _GL2
GL_MAX_COLOR_MATRIX_STACK_DEPTH = _GL2
GL_OBJECT_SUBTYPE_ARB = _GL2
GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = _GL2
GL_SINGLE_COLOR = _GL2
GL_UNSIGNED_INT8_NV = _GL2
GL_OUTPUT_TEXTURE_COORD12_EXT = _GL2
GL_MAP_COLOR = _GL2
GL_GREEN_SCALE = _GL2
GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = _GL2
GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = _GL2
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = _GL2
GL_OP_LOG_BASE_2_EXT = _GL2
GL_ALPHA8I = _GL2
GL_CURRENT_INDEX = _GL2
GL_SOURCE2_RGB = _GL2
GL_ALPHA16I = _GL2
GL_CLIENT_PIXEL_STORE_BIT = _GL2
GL_CONSERVE_MEMORY_HINT_PGI = _GL2
GL_CURRENT_RASTER_INDEX = _GL2
GL_POST_COLOR_MATRIX_GREEN_BIAS = _GL2
GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = _GL2
GL_PROGRAM_TEX_INDIRECTIONS_ARB = _GL2
GL_SOURCE0_ALPHA = _GL2
GL_INDEX_TEST_REF_EXT = _GL2
GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = _GL2
GL_REFLECTION_MAP = _GL2
GL_TEXTURE_RENDERBUFFER_NV = _GL2
GL_INT_VEC3_ARB = _GL2
GL_CURRENT_VERTEX_EXT = _GL2
GL_LUMINANCE_ALPHA_SNORM = _GL2
GL_SIGNED_ALPHA_NV = _GL2
GL_PROGRAM_ADDRESS_REGISTERS_ARB = _GL2
GL_DRAW_BUFFER9_ATI = _GL2
GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = _GL2
GL_TEXTURE_SHADER_NV = _GL2
GL_RESAMPLE_DECIMATE_OML = _GL2
GL_LINE_STIPPLE_PATTERN = _GL2
GL_TEXTURE_LO_SIZE_NV = _GL2
GL_C4UB_V2F = _GL2
GL_FLOAT_RGBA_NV = _GL2
GL_C4UB_V3F = _GL2
GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = _GL2
GL_VERTEX_SHADER_EXT = _GL2
GL_MAX_TEXTURE_COORDS_ARB = _GL2
GL_MAX_SHININESS_NV = _GL2
GL_INDEX_SHIFT = _GL2
GL_MAX_SPARSE_TEXTURE_SIZE_AMD = _GL2
GL_EVAL_BIT = _GL2
GL_LUMINANCE8_SNORM = _GL2
GL_POLYGON_BIT = _GL2
GL_MAX_VERTEX_UNITS_ARB = _GL2
GL_OP_SUB_EXT = _GL2
GL_MAP_TESSELLATION_NV = _GL2
GL_COMPRESSED_LUMINANCE = _GL2
GL_EVAL_VERTEX_ATTRIB15_NV = _GL2
GL_MAP1_TEXTURE_COORD_1 = _GL2
GL_MAP1_TEXTURE_COORD_3 = _GL2
GL_MAP1_TEXTURE_COORD_2 = _GL2
GL_MAP1_TEXTURE_COORD_4 = _GL2
GL_DRAW_BUFFER14_ATI = _GL2
GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = _GL2
GL_SIGNED_HILO_NV = _GL2
GL_QUAD_STRIP = _GL2
GL_PROXY_COLOR_TABLE = _GL2
GL_CLAMP_FRAGMENT_COLOR = _GL2
GL_CLAMP = _GL2
GL_MODELVIEW4_ARB = _GL2
GL_MODELVIEW0_EXT = _GL2
GL_LUMINANCE8UI = _GL2
GL_COMPRESSED_SLUMINANCE = _GL2
GL_MAGNITUDE_BIAS_NV = _GL2
GL_COUNTER_TYPE_AMD = _GL2
GL_FIELD_UPPER_NV = _GL2
GL_AUTO_NORMAL = _GL2
GL_HARDLIGHT = _GL2
GL_HI_BIAS_NV = _GL2
GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = _GL2
GL_CONVOLUTION_BORDER_MODE = _GL2
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = _GL2
GL_INT64_VEC3_ARB = _GL2
GL_TRANSPOSE_PROGRAM_MATRIX_EXT = _GL2
GL_TEXTURE_BORDER = _GL2
GL_SIGNED_LUMINANCE8_ALPHA8_NV = _GL2
GL_UNSIGNED_INT64_VEC3_NV = _GL2
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = _GL2
GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = _GL2
GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = _GL2
GL_PROGRAM_LENGTH_ARB = _GL2
GL_INT16_NV = _GL2
GL_MODELVIEW0_MATRIX_EXT = _GL2
GL_PROGRAM_ERROR_STRING_ARB = _GL2
GL_OP_MADD_EXT = _GL2
GL_CURRENT_RASTER_TEXTURE_COORDS = _GL2
GL_FLOAT16_VEC4_NV = _GL2
GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = _GL2
GL_NEGATIVE_ONE_EXT = _GL2
GL_MATRIX23_ARB = _GL2
GL_MAX_CONVOLUTION_WIDTH = _GL2
GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = _GL2
GL_FLOAT_RGBA16_NV = _GL2
GL_INDEX_MATERIAL_FACE_EXT = _GL2
GL_INT64_ARB = _GL2
GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = _GL2
GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = _GL2
GL_SIGNED_LUMINANCE_NV = _GL2
GL_OBJECT_TYPE_ARB = _GL2
GL_TEXTURE_RANGE_LENGTH_APPLE = _GL2
GL_INT8_NV = _GL2
GL_ALLOW_DRAW_FRG_HINT_PGI = _GL2
GL_TRANSFORM_FEEDBACK_NV = _GL2
GL_UNSIGNED_SHORT_8_8_APPLE = _GL2
GL_CULL_VERTEX_EXT = _GL2
GL_ACTIVE_STENCIL_FACE_EXT = _GL2
GL_MODELVIEW1_STACK_DEPTH_EXT = _GL2
GL_SLUMINANCE8_ALPHA8 = _GL2
GL_RED_MAX_CLAMP_INGR = _GL2
GL_COMPRESSED_ALPHA = _GL2
GL_TEXTURE_FILTER_CONTROL = _GL2
GL_ALPHA_FLOAT16_APPLE = _GL2
GL_INVERTED_SCREEN_W_REND = _GL2
GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = _GL2
GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = _GL2
GL_FLOAT_RGBA_MODE_NV = _GL2
GL_PIXEL_COUNT_AVAILABLE_NV = _GL2
GL_PREFER_DOUBLEBUFFER_HINT_PGI = _GL2
GL_W_EXT = _GL2
GL_INTENSITY_FLOAT32_ATI = _GL2
GL_RETURN = _GL2
GL_VERTEX_ATTRIB_MAP2_APPLE = _GL2
GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = _GL2
GL_SUCCESS_NV = _GL2
GL_DEPTH_SCALE = _GL2
GL_MATRIX_INDEX_ARRAY_TYPE_ARB = _GL2
GL_OP_RECIP_SQRT_EXT = _GL2
GL_LINE_STIPPLE_REPEAT = _GL2
GL_DEPTH_STENCIL_TO_BGRA_NV = _GL2
GL_LOCAL_CONSTANT_VALUE_EXT = _GL2
GL_INDEX_WRITEMASK = _GL2
GL_MODELVIEW1_MATRIX_EXT = _GL2
GL_COLOR3_BIT_PGI = _GL2
GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = _GL2
GL_FOG_COORD_SRC = _GL2
GL_READ_PIXEL_DATA_RANGE_NV = _GL2
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = _GL2
GL_BLUE_MIN_CLAMP_INGR = _GL2
GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = _GL2
GL_PIXEL_MAP_I_TO_A_SIZE = _GL2
GL_EVAL_VERTEX_ATTRIB10_NV = _GL2
GL_LINE_RESET_TOKEN = _GL2
GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = _GL2
GL_SCISSOR_COMMAND_NV = _GL2
GL_TEXTURE_BORDER_VALUES_NV = _GL2
GL_INDEX_ARRAY_BUFFER_BINDING = _GL2
GL_WRITE_DISCARD_NV = _GL2
GL_DEPTH_CLAMP_NV = _GL2
GL_PRIMITIVE_RESTART_INDEX_NV = _GL2
GL_EFFECTIVE_RASTER_SAMPLES_EXT = _GL2
GL_BOOL_ARB = _GL2
GL_DSDT8_NV = _GL2
GL_MATRIX27_ARB = _GL2
GL_SECONDARY_COLOR_ARRAY_TYPE = _GL2
GL_MODELVIEW24_ARB = _GL2
GL_LUMINANCE_ALPHA32I = _GL2
GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = _GL2
GL_MAP2_GRID_SEGMENTS = _GL2
GL_PREVIOUS_TEXTURE_INPUT_NV = _GL2
GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = _GL2
GL_TEXTURE_MATERIAL_PARAMETER_EXT = _GL2
GL_RGB_FLOAT16_APPLE = _GL2
GL_WEIGHT_SUM_UNITY_ARB = _GL2
GL_MAP2_COLOR_4 = _GL2
GL_COLOR_TABLE_BIAS = _GL2
GL_INDEX_MATERIAL_EXT = _GL2
GL_FRONT_FACE_COMMAND_NV = _GL2
GL_PIXEL_MAP_A_TO_A = _GL2
GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = _GL2
GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = _GL2
GL_FLOAT_MAT3_ARB = _GL2
GL_MODELVIEW14_ARB = _GL2
GL_CMYKA_EXT = _GL2
GL_MODELVIEW8_ARB = _GL2
GL_UNSIGNED_INT64_NV = _GL2
GL_TESS_CONTROL_PROGRAM_NV = _GL2
GL_MAP2_NORMAL = _GL2
GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = _GL2
GL_UNSIGNED_INT64_VEC4_ARB = _GL2
GL_MAX_SAMPLE_MASK_WORDS_NV = _GL2
GL_OBJECT_LINEAR = _GL2
GL_INT_VEC4_ARB = _GL2
GL_MAX_SHADER_COMPILER_THREADS_ARB = _GL2
GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = _GL2
GL_SLUMINANCE8 = _GL2
GL_WIDE_LINE_HINT_PGI = _GL2
GL_DRAW_BUFFER15_ATI = _GL2
GL_VARIANT_EXT = _GL2
GL_RGBA_DXT5_S3TC = _GL2
GL_HISTOGRAM_BLUE_SIZE = _GL2
GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = _GL2
GL_WEIGHT_ARRAY_ARB = _GL2
GL_PASS_THROUGH_TOKEN = _GL2
GL_FLOAT_RGB32_NV = _GL2
GL_VERTEX_ARRAY_RANGE_APPLE = _GL2
GL_TRANSPOSE_CURRENT_MATRIX_ARB = _GL2
GL_VIBRANCE_SCALE_NV = _GL2
GL_PROGRAM_NATIVE_ATTRIBS_ARB = _GL2
GL_STRICT_DEPTHFUNC_HINT_PGI = _GL2
GL_SIGNED_HILO8_NV = _GL2
GL_TEXTURE_STORAGE_HINT_APPLE = _GL2
GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = _GL2
GL_DEPTH_BOUNDS_EXT = _GL2
GL_MATRIX_INDEX_ARRAY_ARB = _GL2
GL_FLOAT_VEC4_ARB = _GL2
GL_TRANSFORM_FEEDBACK_BINDING_NV = _GL2
GL_ALPHA_FLOAT32_ATI = _GL2
GL_CURRENT_FOG_COORDINATE = _GL2
GL_VERTEX_WEIGHT_ARRAY_EXT = _GL2
GL_LUMINANCE16_ALPHA16_SNORM = _GL2
GL_IUI_N3F_V2F_EXT = _GL2
GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = _GL2
GL_CLIP_FAR_HINT_PGI = _GL2
GL_EVAL_VERTEX_ATTRIB13_NV = _GL2
GL_MODELVIEW13_ARB = _GL2
GL_COLORBURN = _GL2
GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = _GL2
GL_RG_SNORM = _GL2
GL_RED_BIAS = _GL2
GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = _GL2
GL_DSDT_MAG_INTENSITY_NV = _GL2
GL_WEIGHT_ARRAY_STRIDE_ARB = _GL2
GL_CLIENT_VERTEX_ARRAY_BIT = _GL2
GL_OP_EXP_BASE_2_EXT = _GL2
GL_TEXTURE_GEN_MODE = _GL2
GL_POST_CONVOLUTION_COLOR_TABLE = _GL2
GL_BUFFER_OBJECT_APPLE = _GL2
GL_MAX_VERTEX_HINT_PGI = _GL2
GL_PERCENTAGE_AMD = _GL2
GL_SIGNED_LUMINANCE8_NV = _GL2
GL_TEXTURE_LUMINANCE_TYPE = _GL2
GL_COMPARE_R_TO_TEXTURE = _GL2
GL_OP_MUL_EXT = _GL2
GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = _GL2
GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = _GL2
GL_OUTPUT_TEXTURE_COORD16_EXT = _GL2
GL_EVAL_VERTEX_ATTRIB8_NV = _GL2
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = _GL2
GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = _GL2
GL_DS_BIAS_NV = _GL2
GL_PIXEL_COUNTER_BITS_NV = _GL2
GL_422_EXT = _GL2
GL_FLOAT_RG_NV = _GL2
GL_TEXTURE_HI_SIZE_NV = _GL2
GL_CONVOLUTION_HEIGHT = _GL2
GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = _GL2
GL_MODELVIEW6_ARB = _GL2
GL_STENCIL_REF_COMMAND_NV = _GL2
GL_LIGHT_MODEL_LOCAL_VIEWER = _GL2
GL_MATRIX8_ARB = _GL2
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = _GL2
GL_TEXTURE_INTENSITY_TYPE = _GL2
GL_LOGIC_OP = _GL2
GL_EVAL_TRIANGULAR_2D_NV = _GL2
GL_WEIGHT_ARRAY_BUFFER_BINDING = _GL2
GL_MIN_PROGRAM_TEXEL_OFFSET_NV = _GL2
GL_PIXEL_MAP_G_TO_G = _GL2
GL_3D = _GL2
GL_RENDERBUFFER_FREE_MEMORY_ATI = _GL2
GL_STORAGE_CACHED_APPLE = _GL2
GL_MULTISAMPLE_BIT = _GL2
GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = _GL2
GL_COEFF = _GL2
GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = _GL2
GL_UNPACK_CMYK_HINT_EXT = _GL2
GL_MATRIX10_ARB = _GL2
GL_SPHERE_MAP = _GL2
GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = _GL2
GL_LIST_BIT = _GL2
GL_UNSIGNED_INT16_VEC2_NV = _GL2
GL_GREEN_MIN_CLAMP_INGR = _GL2
GL_POST_CONVOLUTION_ALPHA_BIAS = _GL2
GL_MAX_VIEWS_OVR = _GL2
GL_SURFACE_STATE_NV = _GL2
GL_MAT_SPECULAR_BIT_PGI = _GL2
GL_VARIANT_ARRAY_EXT = _GL2
GL_INTENSITY_FLOAT32_APPLE = _GL2
GL_INTENSITY32F = _GL2
GL_TEXTURE_RANGE_POINTER_APPLE = _GL2
GL_INT8_VEC3_NV = _GL2
GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = _GL2
GL_INTENSITY8I = _GL2
GL_MATRIX9_ARB = _GL2
GL_TEXTURE_SWIZZLE_A_EXT = _GL2
GL_GEOMETRY_PROGRAM_NV = _GL2
GL_WARP_SIZE_NV = _GL2
GL_LO_SCALE_NV = _GL2
GL_INTENSITY_FLOAT16_APPLE = _GL2
GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = _GL2
GL_RGBA_FLOAT16_ATI = _GL2
GL_DRAW_ARRAYS_COMMAND_NV = _GL2
GL_MODELVIEW1_ARB = _GL2
GL_EDGE_FLAG_ARRAY = _GL2
GL_VERTEX_DATA_HINT_PGI = _GL2
GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = _GL2
GL_EVAL_VERTEX_ATTRIB9_NV = _GL2
GL_TRANSPOSE_COLOR_MATRIX = _GL2
GL_ALPHA_BIAS = _GL2
GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = _GL2
GL_VARIANT_ARRAY_TYPE_EXT = _GL2
GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = _GL2
GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = _GL2
GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = _GL2
GL_OFFSET_TEXTURE_2D_NV = _GL2
GL_INDEX_OFFSET = _GL2
GL_LUMINANCE_ALPHA_FLOAT16_APPLE = _GL2
GL_PRIMITIVE_RESTART_NV = _GL2
GL_PERFORMANCE_MONITOR_AMD = _GL2
GL_COLOR_MATRIX_STACK_DEPTH = _GL2
GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = _GL2
GL_VERTEX_PROGRAM_ARB = _GL2
GL_POST_COLOR_MATRIX_BLUE_SCALE = _GL2
GL_MATRIX28_ARB = _GL2
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = _GL2
GL_OUTPUT_TEXTURE_COORD5_EXT = _GL2
GL_MAX_PROGRAM_INSTRUCTIONS_ARB = _GL2
GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = _GL2
GL_OBJECT_ACTIVE_UNIFORMS_ARB = _GL2
GL_MAT_AMBIENT_BIT_PGI = _GL2
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = _GL2
GL_VERTEX_PROGRAM_POINT_SIZE_ARB = _GL2
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = _GL2
GL_UNDEFINED_APPLE = _GL2
GL_MAX_PROGRAM_GENERIC_RESULTS_NV = _GL2
GL_PROGRAM_FORMAT_ARB = _GL2
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = _GL2
GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = _GL2
GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = _GL2
GL_PROGRAM_RESULT_COMPONENTS_NV = _GL2
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = _GL2
GL_DRAW_BUFFER6_ATI = _GL2
GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = _GL2
GL_ACTIVE_VERTEX_UNITS_ARB = _GL2
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1 = _GL2
GL_PIXEL_MAG_FILTER_EXT = _GL2
GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = _GL2
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = _GL2
GL_FEEDBACK_BUFFER_SIZE = _GL2
GL_C4F_N3F_V3F = _GL2
GL_FLOAT_RGB_NV = _GL2
GL_EVAL_VERTEX_ATTRIB11_NV = _GL2
GL_DOMAIN = _GL2
GL_EVAL_VERTEX_ATTRIB3_NV = _GL2
GL_UNSIGNED_INT16_NV = _GL2
GL_OUTPUT_TEXTURE_COORD18_EXT = _GL2
GL_OUTPUT_TEXTURE_COORD11_EXT = _GL2
GL_RASTER_SAMPLES_EXT = _GL2
GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = _GL2
GL_DEPENDENT_AR_TEXTURE_2D_NV = _GL2
GL_FRAGMENT_DEPTH = _GL2
GL_MATRIX_INDEX_ARRAY_SIZE_ARB = _GL2
GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = _GL2
GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = _GL2
GL_BLEND_COLOR_COMMAND_NV = _GL2
GL_COLOR_TABLE_LUMINANCE_SIZE = _GL2
GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = _GL2
GL_POST_CONVOLUTION_BLUE_SCALE = _GL2
GL_FOG_COORD_ARRAY_TYPE = _GL2
GL_LIST_BASE = _GL2
GL_QUERY_BUFFER_AMD = _GL2
GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = _GL2
GL_LUMINANCE_ALPHA8UI = _GL2
GL_MAT_DIFFUSE_BIT_PGI = _GL2
GL_OUTPUT_COLOR1_EXT = _GL2
GL_TEXTURE_LUMINANCE_SIZE = _GL2
GL_RGBA_FLOAT16_APPLE = _GL2
GL_DSDT_MAG_NV = _GL2
GL_OUTPUT_TEXTURE_COORD13_EXT = _GL2
GL_LUMINANCE12_ALPHA12 = _GL2
GL_COLOR_TABLE_RED_SIZE = _GL2
GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = _GL2
GL_DRAW_BUFFER3_ATI = _GL2
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = _GL2
GL_INT_VEC2_ARB = _GL2
GL_OP_CLAMP_EXT = _GL2
GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = _GL2
GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = _GL2
GL_WEIGHT_ARRAY_POINTER_ARB = _GL2
GL_SAMPLER_2D_RECT_SHADOW_ARB = _GL2
GL_OP_ROUND_EXT = _GL2
GL_LUMINANCE16I = _GL2
GL_WEIGHT_ARRAY_SIZE_ARB = _GL2
GL_BLUE_MAX_CLAMP_INGR = _GL2
GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = _GL2
GL_MODELVIEW26_ARB = _GL2
GL_QUERY_RESULT_NO_WAIT_AMD = _GL2
GL_FULL_RANGE_EXT = _GL2
GL_LUMINANCE6_ALPHA2 = _GL2
GL_VERTEX_ARRAY_OBJECT_AMD = _GL2
GL_HISTOGRAM_GREEN_SIZE = _GL2
GL_ALWAYS_SOFT_HINT_PGI = _GL2
GL_MODELVIEW3_ARB = _GL2
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = _GL2
GL_SIGNED_LUMINANCE_ALPHA_NV = _GL2
GL_LUMINANCE_FLOAT32_ATI = _GL2
GL_MAP1_NORMAL = _GL2
GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = _GL2
GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = _GL2
GL_PIXEL_MAP_S_TO_S_SIZE = _GL2
GL_DIFFERENCE = _GL2
GL_SIGNED_RGB8_NV = _GL2
GL_NEGATIVE_Y_EXT = _GL2
GL_PIXEL_MAP_R_TO_R_SIZE = _GL2
GL_MODELVIEW21_ARB = _GL2
GL_WARPS_PER_SM_NV = _GL2
GL_OFFSET_TEXTURE_2D_SCALE_NV = _GL2
GL_IUI_V2F_EXT = _GL2
GL_ALPHA_MAX_CLAMP_INGR = _GL2
GL_RGB4_S3TC = _GL2
GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = _GL2
GL_MAX_TEXTURE_IMAGE_UNITS_ARB = _GL2
GL_RELEASED_APPLE = _GL2
GL_OVERLAY = _GL2
GL_LUMINANCE4 = _GL2
GL_DEPENDENT_RGB_TEXTURE_3D_NV = _GL2
GL_CONVOLUTION_FILTER_SCALE = _GL2
GL_MODELVIEW17_ARB = _GL2
GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = _GL2
GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = _GL2
GL_INTERLACE_READ_OML = _GL2
GL_SIGNED_HILO16_NV = _GL2
GL_MAX_VERTEX_SHADER_VARIANTS_EXT = _GL2
GL_HSL_COLOR = _GL2
GL_LUMINANCE12_ALPHA4 = _GL2
GL_MAP_ATTRIB_V_ORDER_NV = _GL2
GL_EVAL_VERTEX_ATTRIB2_NV = _GL2
GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = _GL2
GL_POST_COLOR_MATRIX_BLUE_BIAS = _GL2
GL_DEPTH_BIAS = _GL2
GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = _GL2
GL_CONST_EYE_NV = _GL2
GL_SELECT = _GL2
GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = _GL2
GL_TEXTURE_FLOAT_COMPONENTS_NV = _GL2
GL_PN_TRIANGLES_ATI = _GL2
GL_POST_CONVOLUTION_RED_SCALE = _GL2
GL_MAT_COLOR_INDEXES_BIT_PGI = _GL2
GL_POST_CONVOLUTION_GREEN_SCALE = _GL2
GL_MATRIX5_ARB = _GL2
GL_RGB_SNORM = _GL2
GL_MODELVIEW15_ARB = _GL2
GL_OUTPUT_TEXTURE_COORD20_EXT = _GL2
GL_CLAMP_VERTEX_COLOR = _GL2
GL_HI_SCALE_NV = _GL2
GL_MULTISAMPLE_COVERAGE_MODES_NV = _GL2
GL_T2F_IUI_V3F_EXT = _GL2
GL_FOG_COORD_ARRAY = _GL2
GL_UNPACK_ROW_BYTES_APPLE = _GL2
GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = _GL2
GL_MATRIX24_ARB = _GL2
GL_UNIFORM_BUFFER_ADDRESS_NV = _GL2
GL_CULL_VERTEX_EYE_POSITION_EXT = _GL2
GL_ALPHA_MIN_CLAMP_INGR = _GL2
GL_LAYOUT_DEFAULT_INTEL = _GL2
GL_CONVOLUTION_FILTER_BIAS = _GL2
GL_MAX_DRAW_BUFFERS_ATI = _GL2
GL_C3F_V3F = _GL2
GL_OUTPUT_TEXTURE_COORD30_EXT = _GL2
GL_TEXTURE_MATERIAL_FACE_EXT = _GL2
GL_ALPHA_FLOAT16_ATI = _GL2
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = _GL2
GL_FRAGMENT_COLOR_EXT = _GL2
GL_FOG_COORDINATE_ARRAY = _GL2
GL_LUMINANCE_ALPHA_FLOAT32_APPLE = _GL2
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = _GL2
GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = _GL2
GL_TEXCOORD2_BIT_PGI = _GL2
GL_MIRROR_CLAMP_TO_EDGE_EXT = _GL2
GL_POLYGON_OFFSET_COMMAND_NV = _GL2
GL_TEXTURE_REDUCTION_MODE_ARB = _GL2
GL_ALPHA32I = _GL2
GL_FOG_COORD_ARRAY_BUFFER_BINDING = _GL2
GL_MODELVIEW12_ARB = _GL2
GL_LOAD = _GL2
GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = _GL2
GL_FLOAT_MAT2_ARB = _GL2
GL_T2F_N3F_V3F = _GL2
GL_FEEDBACK_BUFFER_POINTER = _GL2
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = _GL2
GL_EMBOSS_CONSTANT_NV = _GL2
GL_POLYGON_STIPPLE_BIT = _GL2
GL_OUTPUT_TEXTURE_COORD24_EXT = _GL2
GL_VIBRANCE_BIAS_NV = _GL2
GL_COMPRESSED_SLUMINANCE_ALPHA = _GL2
GL_COLOR_MATERIAL_FACE = _GL2
GL_PIXEL_MAP_B_TO_B = _GL2
GL_COMPRESSED_INTENSITY = _GL2
GL_YCBAYCR8A_4224_NV = _GL2
GL_UNSIGNED_INT8_VEC2_NV = _GL2
GL_TERMINATE_SEQUENCE_COMMAND_NV = _GL2
GL_MAT_EMISSION_BIT_PGI = _GL2
GL_SAMPLER_RENDERBUFFER_NV = _GL2
GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = _GL2
GL_PIXEL_PACK_BUFFER_EXT = _GL2
GL_TEXTURE_SWIZZLE_R_EXT = _GL2
GL_INTERLACE_READ_INGR = _GL2
GL_OUTPUT_TEXTURE_COORD6_EXT = _GL2
GL_POLYGON = _GL2
GL_T2F_IUI_N3F_V3F_EXT = _GL2
GL_EVAL_VERTEX_ATTRIB12_NV = _GL2
GL_OBJECT_DELETE_STATUS_ARB = _GL2
GL_LUMINANCE_FLOAT32_APPLE = _GL2
GL_INTENSITY8UI = _GL2
GL_MODELVIEW23_ARB = _GL2
GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = _GL2
GL_UNIFORM_ADDRESS_COMMAND_NV = _GL2
GL_OP_SET_LT_EXT = _GL2
GL_DRAW_BUFFER10_ATI = _GL2
GL_MODELVIEW7_ARB = _GL2
GL_ALPHA_SNORM = _GL2
GL_COLOR4_BIT_PGI = _GL2
GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = _GL2
GL_OP_FRAC_EXT = _GL2
GL_PARTIAL_SUCCESS_NV = _GL2
GL_T4F_V4F = _GL2
GL_BACK_NORMALS_HINT_PGI = _GL2
GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = _GL2
GL_PERTURB_EXT = _GL2
GL_RGBA_FLOAT32_APPLE = _GL2
GL_EDGEFLAG_BIT_PGI = _GL2
GL_VBO_FREE_MEMORY_ATI = _GL2
GL_OP_MOV_EXT = _GL2
GL_SCISSOR_BIT = _GL2
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = _GL2
GL_OUTPUT_TEXTURE_COORD29_EXT = _GL2
GL_OUTPUT_TEXTURE_COORD26_EXT = _GL2
GL_ALPHA32UI = _GL2
GL_LINE_BIT = _GL2
GL_CONVOLUTION_FORMAT = _GL2
GL_COMPRESSED_LUMINANCE_LATC1_EXT = _GL2
GL_INDEX_MODE = _GL2
GL_MATRIX_INDEX_ARRAY_POINTER_ARB = _GL2
GL_HILO_NV = _GL2
GL_CONSERVATIVE_RASTERIZATION_NV = _GL2
GL_T2F_C3F_V3F = _GL2
GL_ZERO_EXT = _GL2
GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = _GL2
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = _GL2
GL_READ_PIXEL_DATA_RANGE_POINTER_NV = _GL2
GL_INDEX_BIT_PGI = _GL2
GL_NEGATIVE_X_EXT = _GL2
GL_RGB_FLOAT32_ATI = _GL2
GL_PROGRAM_OBJECT_ARB = _GL2
GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = _GL2
GL_LUMINANCE_INTEGER = _GL2
GL_FOG_COORDINATE_SOURCE = _GL2
GL_OBJECT_ATTACHED_OBJECTS_ARB = _GL2
GL_AVERAGE_EXT = _GL2
GL_TEXTURE_DT_SIZE_NV = _GL2
GL_MULTISAMPLE_FILTER_HINT_NV = _GL2
GL_CONVOLUTION_BORDER_COLOR = _GL2
GL_TEXTURE_APPLICATION_MODE_EXT = _GL2
GL_CURRENT_RASTER_DISTANCE = _GL2
GL_STRICT_LIGHTING_HINT_PGI = _GL2
GL_MAX_PALETTE_MATRICES_ARB = _GL2
GL_MIRROR_CLAMP_TO_BORDER_EXT = _GL2
GL_EVAL_VERTEX_ATTRIB0_NV = _GL2
GL_PROGRAM_NATIVE_PARAMETERS_ARB = _GL2
GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = _GL2
GL_DS_SCALE_NV = _GL2
GL_ONE_EXT = _GL2
GL_NATIVE_GRAPHICS_END_HINT_PGI = _GL2
GL_ORDER = _GL2
GL_MAX_EVAL_ORDER = _GL2
GL_INDEX_CLEAR_VALUE = _GL2
GL_COLOR_TABLE_INTENSITY_SIZE = _GL2
GL_UNSIGNED_INT8_VEC3_NV = _GL2
GL_CURRENT_RASTER_SECONDARY_COLOR = _GL2
GL_REDUCE = _GL2
GL_CURRENT_SECONDARY_COLOR = _GL2
GL_MATRIX25_ARB = _GL2
GL_SAMPLER_1D_SHADOW_ARB = _GL2
GL_MATRIX6_ARB = _GL2
GL_UNSIGNED_INT8_VEC4_NV = _GL2
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET = _GL2
GL_EDGE_FLAG_ARRAY_POINTER = _GL2
GL_MAP1_GRID_DOMAIN = _GL2
GL_COLOR_FLOAT_APPLE = _GL2
GL_OP_DOT4_EXT = _GL2
GL_UNPACK_RESAMPLE_OML = _GL2
GL_OP_SET_GE_EXT = _GL2
GL_SCREEN = _GL2
GL_2_BYTES = _GL2
GL_COPY_PIXEL_TOKEN = _GL2
GL_SHADER_CONSISTENT_NV = _GL2
GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = _GL2
GL_CLIENT_ATTRIB_STACK_DEPTH = _GL2
GL_LUMINANCE_ALPHA16I = _GL2
GL_ATTRIBUTE_ADDRESS_COMMAND_NV = _GL2
GL_DRAW_BUFFER11_ATI = _GL2
GL_DEPENDENT_GB_TEXTURE_2D_NV = _GL2
GL_OUTPUT_TEXTURE_COORD8_EXT = _GL2
GL_PERFQUERY_FLUSH_INTEL = _GL2
GL_INT64_VEC2_NV = _GL2
GL_FORMAT_SUBSAMPLE_24_24_OML = _GL2
GL_3D_COLOR_TEXTURE = _GL2
GL_COMPILE_AND_EXECUTE = _GL2
GL_SAMPLE_MASK_VALUE_NV = _GL2
GL_POINT_BIT = _GL2
GL_COLOR_SUM_ARB = _GL2
GL_EVAL_VERTEX_ATTRIB4_NV = _GL2
GL_HISTOGRAM_FORMAT = _GL2
GL_RETAINED_APPLE = _GL2
GL_SEPARABLE_2D = _GL2
GL_PROGRAM_STRING_ARB = _GL2
GL_MATRIX16_ARB = _GL2
GL_CULL_MODES_NV = _GL2
GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = _GL2
GL_LUMINANCE_ALPHA_INTEGER = _GL2
GL_TRANSPOSE_MODELVIEW_MATRIX = _GL2
GL_PIXEL_MAP_I_TO_I = _GL2
GL_PIXEL_MAP_I_TO_R = _GL2
GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = _GL2
GL_PIXEL_MAP_I_TO_G = _GL2
GL_PIXEL_MAP_I_TO_B = _GL2
GL_TEXTURE_RECTANGLE_ARB = _GL2
GL_PIXEL_MAP_I_TO_A = _GL2
GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = _GL2
GL_PACK_RESAMPLE_OML = _GL2
GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = _GL2
GL_STORAGE_SHARED_APPLE = _GL2
GL_FLOAT_VEC2_ARB = _GL2
GL_FLOAT_R16_NV = _GL2
GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = _GL2
GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = _GL2
GL_DRAW_BUFFER8_ATI = _GL2
GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = _GL2
GL_NEGATIVE_W_EXT = _GL2
GL_MINMAX = _GL2
GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = _GL2
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = _GL2
GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = _GL2
GL_FRAGMENT_COVERAGE_TO_COLOR_NV = _GL2
GL_MODELVIEW2_ARB = _GL2
GL_NUM_VIDEO_CAPTURE_STREAMS_NV = _GL2
GL_SURFACE_REGISTERED_NV = _GL2
GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = _GL2
GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = _GL2
GL_UNSIGNED_INT64_VEC4_NV = _GL2
GL_VERTEX_SHADER_INSTRUCTIONS_EXT = _GL2
GL_MAGNITUDE_SCALE_NV = _GL2
GL_LAYOUT_LINEAR_INTEL = _GL2
GL_REPLICATE_BORDER = _GL2
GL_POST_COLOR_MATRIX_RED_SCALE = _GL2
GL_BUFFER_SERIALIZED_MODIFY = _GL2
GL_VERTEX_BLEND_ARB = _GL2
GL_OFFSET_TEXTURE_SCALE_NV = _GL2
GL_BITMAP = _GL2
GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = _GL2
GL_QUERY_OBJECT_AMD = _GL2
GL_WEIGHT_ARRAY_TYPE_ARB = _GL2
GL_COMPRESSED_LUMINANCE_ALPHA = _GL2
GL_POLYGON_STIPPLE = _GL2
GL_COMPLETION_STATUS_ARB = _GL2
GL_DRAW_ELEMENTS_COMMAND_NV = _GL2
GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = _GL2
GL_UNPACK_CONSTANT_DATA_SUNX = _GL2
GL_BOOL_VEC4_ARB = _GL2
GL_TEXTURE_NORMAL_EXT = _GL2
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3 = _GL2
GL_MAP_STENCIL = _GL2
GL_POINT_TOKEN = _GL2
GL_PROGRAM_TEX_INSTRUCTIONS_ARB = _GL2
GL_DRAW_ARRAYS_STRIP_COMMAND_NV = _GL2
GL_HINT_BIT = _GL2
GL_SECONDARY_COLOR_ARRAY_POINTER = _GL2
GL_UNIFORM_BUFFER_EXT = _GL2
GL_LUMINANCE_ALPHA_FLOAT16_ATI = _GL2
GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = _GL2
GL_VARIANT_DATATYPE_EXT = _GL2
GL_SECONDARY_COLOR_ARRAY_STRIDE = _GL2
GL_LUMINANCE16UI = _GL2
GL_SOURCE2_ALPHA = _GL2
GL_INDEX_LOGIC_OP = _GL2
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5 = _GL2
GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = _GL2
GL_SAMPLE_LOCATION_NV = _GL2
GL_VECTOR_EXT = _GL2
GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = _GL2
GL_OUTPUT_FOG_EXT = _GL2
GL_DRAW_BUFFER0_ATI = _GL2
GL_OFFSET_TEXTURE_MATRIX_NV = _GL2
GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = _GL2
GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = _GL2
GL_LIGHT_MODEL_COLOR_CONTROL = _GL2
GL_GEOMETRY_OUTPUT_TYPE_EXT = _GL2
GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = _GL2
GL_OUTPUT_TEXTURE_COORD27_EXT = _GL2
GL_HISTOGRAM_ALPHA_SIZE = _GL2
GL_PROGRAM_ERROR_POSITION_ARB = _GL2
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = _GL2
GL_TEXTURE_LIGHT_EXT = _GL2
GL_FEEDBACK_BUFFER_TYPE = _GL2
GL_MAX_CONVOLUTION_HEIGHT = _GL2
GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = _GL2
GL_STORAGE_PRIVATE_APPLE = _GL2
GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = _GL2
GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = _GL2
GL_TESS_EVALUATION_PROGRAM_NV = _GL2
GL_MATRIX_EXT = _GL2
GL_DRAW_BUFFER12_ATI = _GL2
GL_INTENSITY16F = _GL2
GL_TEXTURE_DS_SIZE_NV = _GL2
GL_422_REV_AVERAGE_EXT = _GL2
GL_SHADING_LANGUAGE_VERSION_ARB = _GL2
GL_COLOR_TABLE_BLUE_SIZE = _GL2
GL_ALPHA8_SNORM = _GL2
GL_TEXTURE_INTENSITY_SIZE = _GL2
GL_TEXTURE_CONSTANT_DATA_SUNX = _GL2
GL_TRANSFORM_BIT = _GL2
GL_Z4Y12Z4CB12Z4CR12_444_NV = _GL2
GL_TRANSFORM_HINT_APPLE = _GL2
GL_T2F_IUI_V2F_EXT = _GL2
GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = _GL2
GL_EDGE_FLAG = _GL2
GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = _GL2
GL_PERFMON_RESULT_AMD = _GL2
GL_PROGRAM_TEMPORARIES_ARB = _GL2
GL_SIGNED_RGBA8_NV = _GL2
GL_OFFSET_TEXTURE_RECTANGLE_NV = _GL2
GL_SAMPLER_1D_ARB = _GL2
GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = _GL2
GL_POST_COLOR_MATRIX_COLOR_TABLE = _GL2
GL_OP_DOT3_EXT = _GL2
GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = _GL2
GL_VERTEX_ATTRIB_MAP1_APPLE = _GL2
GL_ATTENUATION_EXT = _GL2
GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = _GL2
GL_OUTPUT_TEXTURE_COORD9_EXT = _GL2
GL_TEXTURE_RESIDENT = _GL2
GL_VERTEX_SHADER_VARIANTS_EXT = _GL2
GL_INT16_VEC3_NV = _GL2
GL_RED_SCALE = _GL2
GL_QUERY_BUFFER_BINDING_AMD = _GL2
GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = _GL2
GL_RED_SNORM = _GL2
GL_OUTPUT_COLOR0_EXT = _GL2
GL_FOG_COORDINATE_ARRAY_TYPE = _GL2
GL_LUMINANCE32UI = _GL2
GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = _GL2
GL_COLOR_MATRIX = _GL2
GL_MAX_ATTRIB_STACK_DEPTH = _GL2
GL_FLOAT16_NV = _GL2
GL_CUBIC_EXT = _GL2
GL_INVARIANT_EXT = _GL2
GL_MATRIX_PALETTE_ARB = _GL2
GL_VIDEO_COLOR_CONVERSION_MAX_NV = _GL2
GL_FOG_INDEX = _GL2
GL_PERFQUERY_WAIT_INTEL = _GL2
GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = _GL2
GL_MODELVIEW30_ARB = _GL2
GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = _GL2
GL_LUMINANCE12 = _GL2
GL_SAMPLER_3D_ARB = _GL2
GL_LUMINANCE16 = _GL2
GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = _GL2
GL_RGBA_INTEGER_MODE = _GL2
GL_ALPHA_INTEGER = _GL2
GL_UNSIGNED_INT16_VEC3_NV = _GL2
GL_MAX_PROGRAM_ATTRIBS_ARB = _GL2
GL_INTENSITY32I = _GL2
GL_HISTOGRAM_WIDTH = _GL2
GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = _GL2
GL_OP_RECIP_EXT = _GL2
GL_LUMINANCE16_ALPHA16 = _GL2
GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = _GL2
GL_UNSIGNED_INT64_VEC2_NV = _GL2
GL_HSL_LUMINOSITY = _GL2
GL_ALPHA16_SNORM = _GL2
GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = _GL2
GL_EVAL_VERTEX_ATTRIB7_NV = _GL2
GL_MATRIX21_ARB = _GL2
GL_POST_COLOR_MATRIX_ALPHA_BIAS = _GL2
GL_VERTEX_SHADER_OPTIMIZED_EXT = _GL2
GL_EVAL_FRACTIONAL_TESSELLATION_NV = _GL2
GL_MAX_PROGRAM_TEXEL_OFFSET_NV = _GL2
GL_MATRIX14_ARB = _GL2
GL_TRANSPOSE_TEXTURE_MATRIX = _GL2
GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = _GL2
GL_PACK_CMYK_HINT_EXT = _GL2
GL_INVARIANT_DATATYPE_EXT = _GL2
GL_HISTOGRAM_SINK = _GL2
GL_INTERLACE_OML = _GL2
GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = _GL2
GL_MODELVIEW18_ARB = _GL2
GL_RASTER_MULTISAMPLE_EXT = _GL2
GL_V2F = _GL2
GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = _GL2
GL_DEPTH_STENCIL_TO_RGBA_NV = _GL2
GL_V3F = _GL2
GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = _GL2
GL_DARKEN = _GL2
GL_MAP1_INDEX = _GL2
GL_422_AVERAGE_EXT = _GL2
GL_HISTOGRAM_RED_SIZE = _GL2
GL_MAP1_GRID_SEGMENTS = _GL2
GL_INDEX_ARRAY_POINTER = _GL2
GL_CMYK_EXT = _GL2
GL_T2F_C4F_N3F_V3F = _GL2
GL_INT8_VEC2_NV = _GL2
GL_TEXCOORD1_BIT_PGI = _GL2
GL_INT_SAMPLER_RENDERBUFFER_NV = _GL2
GL_COUNTER_RANGE_AMD = _GL2
GL_MAP2_GRID_DOMAIN = _GL2
GL_NORMALIZED_RANGE_EXT = _GL2
GL_YCBCR_422_APPLE = _GL2
GL_OUTPUT_TEXTURE_COORD7_EXT = _GL2
GL_FOG_COORDINATE_ARRAY_STRIDE = _GL2
GL_MIN_LOD_WARNING_AMD = _GL2
GL_MODELVIEW27_ARB = _GL2
GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = _GL2
GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = _GL2
GL_INT8_VEC4_NV = _GL2
GL_POST_CONVOLUTION_GREEN_BIAS = _GL2
GL_NORMAL_BIT_PGI = _GL2
GL_OBJECT_INFO_LOG_LENGTH_ARB = _GL2
GL_MAP1_COLOR_4 = _GL2
GL_VERTEX_ELEMENT_SWIZZLE_AMD = _GL2
GL_MATRIX30_ARB = _GL2
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = _GL2
GL_TEXTURE_BINDING_RECTANGLE_ARB = _GL2
GL_MINMAX_FORMAT = _GL2
GL_COLOR_INDEXES = _GL2
GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = _GL2
GL_OUTPUT_TEXTURE_COORD17_EXT = _GL2
GL_OCCLUSION_QUERY_EVENT_MASK_AMD = _GL2
GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = _GL2
GL_PIXEL_UNPACK_BUFFER_EXT = _GL2
GL_INTENSITY4 = _GL2
GL_INTENSITY8 = _GL2
GL_VERTEX_SHADER_INVARIANTS_EXT = _GL2
GL_PIXEL_MAP_I_TO_G_SIZE = _GL2
GL_OBJECT_PLANE = _GL2
GL_MODELVIEW29_ARB = _GL2
GL_LUMINANCE_ALPHA32UI = _GL2
GL_DISPLAY_LIST = _GL2
GL_FRAGMENT_COVERAGE_COLOR_NV = _GL2
GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = _GL2
GL_3D_COLOR = _GL2
GL_SHADER_OPERATION_NV = _GL2
GL_RGBA_S3TC = _GL2
GL_POST_CONVOLUTION_RED_BIAS = _GL2
GL_OUTPUT_TEXTURE_COORD14_EXT = _GL2
GL_ALWAYS_FAST_HINT_PGI = _GL2
GL_TEXTURE_GEN_Q = _GL2
GL_TEXTURE_GEN_R = _GL2
GL_TEXTURE_GEN_S = _GL2
GL_TEXTURE_GEN_T = _GL2
GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = _GL2
GL_SECONDARY_COLOR_ARRAY_SIZE = _GL2
GL_COVERAGE_MODULATION_TABLE_NV = _GL2
GL_POST_COLOR_MATRIX_ALPHA_SCALE = _GL2
GL_BOOL_VEC3_ARB = _GL2
GL_RGBA_FLOAT_MODE = _GL2
GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = _GL2
GL_LIGHTEN = _GL2
GL_PIXEL_TRANSFORM_2D_EXT = _GL2
GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = _GL2
GL_MODELVIEW9_ARB = _GL2
GL_EYE_LINEAR = _GL2
GL_VIEWPORT_BIT = _GL2
GL_DT_BIAS_NV = _GL2
GL_OP_NEGATE_EXT = _GL2
GL_RGBA_FLOAT_MODE_ATI = _GL2
GL_FULL_STIPPLE_HINT_PGI = _GL2
GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = _GL2
GL_STREAM_RASTERIZATION_AMD = _GL2
GL_4D_COLOR_TEXTURE = _GL2
GL_STRICT_SCISSOR_HINT_PGI = _GL2
GL_LUMINANCE8I = _GL2
GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = _GL2
GL_SAMPLE_MASK_NV = _GL2
GL_CULL_VERTEX_OBJECT_POSITION_EXT = _GL2
GL_OBJECT_COMPILE_STATUS_ARB = _GL2
GL_CURRENT_FOG_COORD = _GL2
GL_PASS_THROUGH_NV = _GL2
GL_FLOAT_MAT4_ARB = _GL2
GL_MAP1_VERTEX_4 = _GL2
GL_MAP1_VERTEX_3 = _GL2
GL_ZOOM_X = _GL2
GL_ZOOM_Y = _GL2
GL_PERFQUERY_COUNTER_EVENT_INTEL = _GL2
GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = _GL2
GL_DOT_PRODUCT_TEXTURE_3D_NV = _GL2
GL_OUTPUT_TEXTURE_COORD4_EXT = _GL2
GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = _GL2
GL_INT64_NV = _GL2
GL_CONVOLUTION_WIDTH = _GL2
GL_POST_CONVOLUTION_BLUE_BIAS = _GL2
GL_TEXTURE_COMPONENTS = _GL2
GL_CONSTANT_BORDER = _GL2
GL_SURFACE_MAPPED_NV = _GL2
GL_NOP_COMMAND_NV = _GL2
GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = _GL2
GL_OFFSET_TEXTURE_2D_MATRIX_NV = _GL2
GL_CULL_FRAGMENT_NV = _GL2
GL_ACCUM_CLEAR_VALUE = _GL2
GL_MAX_PROGRAM_TEMPORARIES_ARB = _GL2
GL_OUTPUT_TEXTURE_COORD1_EXT = _GL2
GL_MATRIX11_ARB = _GL2
GL_SIGNED_INTENSITY_NV = _GL2
GL_DOT_PRODUCT_TEXTURE_2D_NV = _GL2
GL_MODELVIEW1_EXT = _GL2
GL_UNSIGNED_INT64_AMD = _GL2
GL_INT64_VEC4_NV = _GL2
GL_OUTPUT_TEXTURE_COORD31_EXT = _GL2
GL_CURRENT_PALETTE_MATRIX_ARB = _GL2
GL_MODELVIEW31_ARB = _GL2
GL_OUTPUT_VERTEX_EXT = _GL2
GL_PIXEL_MAP_A_TO_A_SIZE = _GL2
GL_INT64_VEC2_ARB = _GL2
GL_HISTOGRAM = _GL2
GL_MAX_RASTER_SAMPLES_EXT = _GL2
GL_ALL_ATTRIB_BITS = _GL2
GL_ACCUM_ALPHA_BITS = _GL2
GL_MODELVIEW5_ARB = _GL2
GL_PN_TRIANGLES_NORMAL_MODE_ATI = _GL2
GL_MULT = _GL2
GL_AUX_DEPTH_STENCIL_APPLE = _GL2
GL_INT16_VEC2_NV = _GL2
GL_SHADOW_ATTENUATION_EXT = _GL2
GL_PROGRAM_ALU_INSTRUCTIONS_ARB = _GL2
GL_VIEWPORT_COMMAND_NV = _GL2
GL_MATRIX13_ARB = _GL2
GL_COLOR_TABLE_GREEN_SIZE = _GL2
GL_BITMAP_TOKEN = _GL2
GL_PROGRAM_FORMAT_ASCII_ARB = _GL2
GL_MIRROR_CLAMP_EXT = _GL2
GL_INT64_VEC4_ARB = _GL2
GL_PROGRAM_MATRIX_EXT = _GL2
GL_EDGE_FLAG_ARRAY_STRIDE = _GL2
GL_COLOR_TABLE_ALPHA_SIZE = _GL2
GL_FOG_DISTANCE_MODE_NV = _GL2
GL_ACCUM_RED_BITS = _GL2
GL_FLOAT_RG16_NV = _GL2
GL_SAMPLER_CUBE_ARB = _GL2
GL_FRAMEBUFFER_SRGB_CAPABLE = _GL2
GL_PIXEL_MIN_FILTER_EXT = _GL2
GL_CURRENT_RASTER_POSITION = _GL2
GL_STENCIL_TEST_TWO_SIDE_EXT = _GL2
GL_PROGRAM_BINDING_ARB = _GL2
GL_SOURCE0_RGB = _GL2
GL_FLOAT_RGBA32_NV = _GL2
GL_ALPHA16UI = _GL2
GL_OFFSET_HILO_TEXTURE_2D_NV = _GL2
GL_INTENSITY_FLOAT16_ATI = _GL2
GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = _GL2
GL_OP_MULTIPLY_MATRIX_EXT = _GL2
GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = _GL2
GL_OUTPUT_TEXTURE_COORD23_EXT = _GL2
GL_MAX_PROGRAM_MATRICES_ARB = _GL2
GL_CURRENT_RASTER_POSITION_VALID = _GL2
GL_COLOR_SAMPLES_NV = _GL2
GL_OUTPUT_TEXTURE_COORD25_EXT = _GL2
GL_MATRIX1_ARB = _GL2
GL_LIGHTING_BIT = _GL2
GL_OUTPUT_TEXTURE_COORD28_EXT = _GL2
GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = _GL2
GL_FOG_BIT = _GL2
GL_RGB_S3TC = _GL2
GL_PIXEL_MAP_R_TO_R = _GL2
GL_DRAW_BUFFER1_ATI = _GL2
GL_UNIFORM_BUFFER_UNIFIED_NV = _GL2
GL_IUI_N3F_V3F_EXT = _GL2
GL_RGBA_FLOAT32_ATI = _GL2
GL_TEXTURE_SWIZZLE_RGBA_EXT = _GL2
GL_UNSIGNED_SHORT_8_8_REV_APPLE = _GL2
GL_CURRENT_BIT = _GL2
GL_SOURCE1_RGB = _GL2
GL_DEPENDENT_HILO_TEXTURE_2D_NV = _GL2
GL_LO_BIAS_NV = _GL2
GL_OP_MAX_EXT = _GL2
GL_OP_ADD_EXT = _GL2
GL_ALLOW_DRAW_WIN_HINT_PGI = _GL2
GL_ELEMENT_ADDRESS_COMMAND_NV = _GL2
GL_LINE_STIPPLE = _GL2
GL_COLOR_SUM = _GL2
GL_TEXTURE_SWIZZLE_G_EXT = _GL2
GL_MODELVIEW11_ARB = _GL2
GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = _GL2
GL_UNPACK_CLIENT_STORAGE_APPLE = _GL2
GL_DSDT8_MAG8_NV = _GL2
GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = _GL2
GL_MAX_VERTEX_SHADER_LOCALS_EXT = _GL2
GL_PIXEL_MAP_B_TO_B_SIZE = _GL2
GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = _GL2
GL_EVAL_2D_NV = _GL2
GL_PROXY_TEXTURE_RECTANGLE_ARB = _GL2
GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = _GL2
GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = _GL2
GL_OUTPUT_TEXTURE_COORD15_EXT = _GL2
GL_AUX2 = _GL2
GL_AUX3 = _GL2
GL_AUX0 = _GL2
GL_AUX1 = _GL2
GL_LINE_TOKEN = _GL2
GL_MATRIX0_ARB = _GL2
GL_FOG_COORDINATE_ARRAY_POINTER = _GL2
GL_422_REV_EXT = _GL2
GL_ACCUM_BUFFER_BIT = _GL2
GL_MAX_TEXTURE_COORDS = _GL2
GL_COLOR_TABLE_WIDTH = _GL2
GL_INDEX_TEST_FUNC_EXT = _GL2
GL_SHADER_OBJECT_ARB = _GL2
GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = _GL2
GL_SOFTLIGHT = _GL2
GL_DT_SCALE_NV = _GL2
GL_COMPARE_REF_DEPTH_TO_TEXTURE = _GL2
GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = _GL2
GL_INDEX_ARRAY_STRIDE = _GL2
GL_GEOMETRY_VERTICES_OUT_EXT = _GL2
GL_MODELVIEW19_ARB = _GL2
GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = _GL2
GL_DSDT8_MAG8_INTENSITY8_NV = _GL2
GL_UNSIGNED_INT64_VEC3_ARB = _GL2
GL_SAMPLER_2D_ARB = _GL2
GL_FRAGMENT_PROGRAM_ARB = _GL2
GL_DOT_PRODUCT_PASS_THROUGH_NV = _GL2
GL_TEXTURE_PRIORITY = _GL2
GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = _GL2
GL_T2F_V3F = _GL2
GL_CONSERVATIVE_RASTER_DILATE_NV = _GL2
GL_MATRIX18_ARB = _GL2
GL_OP_CROSS_PRODUCT_EXT = _GL2
GL_PROXY_HISTOGRAM = _GL2
GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = _GL2
GL_EVAL_VERTEX_ATTRIB6_NV = _GL2
GL_R = _GL2
GL_S = _GL2
GL_T = _GL2
GL_Q = _GL2
GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = _GL2
GL_SAMPLER_OBJECT_AMD = _GL2
GL_VIRTUAL_PAGE_SIZE_X_AMD = _GL2
GL_MODELVIEW10_ARB = _GL2
GL_INTENSITY32UI = _GL2
GL_FLOAT16_VEC3_NV = _GL2
GL_MODELVIEW20_ARB = _GL2
GL_RESAMPLE_AVERAGE_OML = _GL2
GL_TEXTURE_BINDING_RENDERBUFFER_NV = _GL2
GL_SAMPLE_LOCATION_ARB = _GL2
GL_MAX_PROGRAM_PARAMETERS_ARB = _GL2
GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = _GL2
GL_DRAW_BUFFER4_ATI = _GL2
GL_OBJECT_VALIDATE_STATUS_ARB = _GL2
GL_VIRTUAL_PAGE_SIZE_Y_AMD = _GL2
GL_DRAW_BUFFER13_ATI = _GL2
GL_OUTPUT_TEXTURE_COORD21_EXT = _GL2
GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = _GL2
GL_ALPHA16 = _GL2
GL_FOG_COORDINATE = _GL2
GL_ALPHA12 = _GL2
GL_WRITE_PIXEL_DATA_RANGE_NV = _GL2
GL_ALPHA_REF_COMMAND_NV = _GL2
GL_STORAGE_CLIENT_APPLE = _GL2
GL_VIRTUAL_PAGE_SIZE_Z_AMD = _GL2
GL_MAT_SHININESS_BIT_PGI = _GL2
GL_PROGRAM_ATTRIBS_ARB = _GL2
GL_PERFMON_RESULT_SIZE_AMD = _GL2
GL_VERTEX_PROGRAM_TWO_SIDE = _GL2
GL_FRAGMENT_MATERIAL_EXT = _GL2
GL_INT64_VEC3_NV = _GL2
GL_MVP_MATRIX_EXT = _GL2
GL_HILO16_NV = _GL2
GL_COMPRESSED_SRGB_S3TC_DXT1 = _GL2
GL_COLOR_MATERIAL_PARAMETER = _GL2
GL_MIN_SPARSE_LEVEL_AMD = _GL2
GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = _GL2
GL_DRAW_PIXEL_TOKEN = _GL2
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = _GL2
GL_EVAL_VERTEX_ATTRIB1_NV = _GL2
GL_RGBA_SNORM = _GL2
GL_SCREEN_COORDINATES_REND = _GL2
GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = _GL2
GL_RED_MIN_CLAMP_INGR = _GL2
GL_CURRENT_MATRIX_ARB = _GL2
GL_EMBOSS_MAP_NV = _GL2
GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = _GL2
GL_LUMINANCE8_ALPHA8_SNORM = _GL2
GL_NAME_STACK_DEPTH = _GL2
GL_LOCAL_CONSTANT_DATATYPE_EXT = _GL2
GL_CURRENT_OCCLUSION_QUERY_ID_NV = _GL2
GL_MAX_SPOT_EXPONENT_NV = _GL2
GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = _GL2
GL_GREEN_MAX_CLAMP_INGR = _GL2
GL_T2F_IUI_N3F_V2F_EXT = _GL2
GL_HALF_APPLE = _GL2
GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = _GL2
GL_ALLOW_DRAW_MEM_HINT_PGI = _GL2
GL_CONVOLUTION_1D = _GL2
GL_ACCUM_BLUE_BITS = _GL2
GL_STENCIL_TAG_BITS_EXT = _GL2
GL_VIDEO_BUFFER_NV = _GL2
GL_OUTPUT_TEXTURE_COORD2_EXT = _GL2
GL_FLOAT_VEC3_ARB = _GL2
GL_LUMINANCE_ALPHA16UI = _GL2
GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = _GL2
GL_FEEDBACK = _GL2
GL_N3F_V3F = _GL2
GL_CURRENT_VERTEX_WEIGHT_EXT = _GL2
GL_VERTEX_WEIGHTING_EXT = _GL2
GL_FIELD_LOWER_NV = _GL2
GL_ALPHA_FLOAT32_APPLE = _GL2
GL_SCALAR_EXT = _GL2
GL_SLUMINANCE_ALPHA = _GL2
GL_MAX_PIXEL_MAP_TABLE = _GL2
GL_RGB_FLOAT32_APPLE = _GL2
GL_DRAW_BUFFER7_ATI = _GL2
GL_FRAGMENT_NORMAL_EXT = _GL2
GL_DEPTH_TEXTURE_MODE = _GL2
GL_MATRIX7_ARB = _GL2
GL_RGB_FLOAT16_ATI = _GL2
GL_INTENSITY_SNORM = _GL2
GL_CONVOLUTION_2D = _GL2
GL_INDEX_ARRAY_TYPE = _GL2
GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = _GL2
GL_ALPHA4 = _GL2
GL_NATIVE_GRAPHICS_HANDLE_PGI = _GL2
GL_PROGRAM_ATTRIB_COMPONENTS_NV = _GL2
GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = _GL2
GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = _GL2
GL_MAP2_TEXTURE_COORD_4 = _GL2
GL_MAP2_TEXTURE_COORD_3 = _GL2
GL_MAP2_TEXTURE_COORD_2 = _GL2
GL_MAP2_TEXTURE_COORD_1 = _GL2
GL_COVERAGE_MODULATION_TABLE_SIZE_NV = _GL2
GL_STENCIL_CLEAR_TAG_VALUE_EXT = _GL2
GL_PERFMON_RESULT_AVAILABLE_AMD = _GL2
GL_INDEX_MATERIAL_PARAMETER_EXT = _GL2
GL_NORMAL_MAP = _GL2
GL_CURRENT_RASTER_COLOR = _GL2
GL_TRANSPOSE_PROJECTION_MATRIX = _GL2
GL_INTENSITY16I = _GL2
GL_PIXEL_MAP_G_TO_G_SIZE = _GL2
GL_TEXTURE_MAG_SIZE_NV = _GL2
GL_ABGR_EXT = _GL2
GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = _GL2
GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = _GL2
GL_DEPTH_BOUNDS_TEST_EXT = _GL2
GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = _GL2
GL_PURGEABLE_APPLE = _GL2
GL_FILL_RECTANGLE_NV = _GL2
GL_FOG_COORD = _GL2
GL_INTENSITY16 = _GL2
GL_INTENSITY12 = _GL2
GL_MINMAX_SINK = _GL2
GL_MODELVIEW25_ARB = _GL2
GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = _GL2
GL_EYE_RADIAL_NV = _GL2
GL_OP_FLOOR_EXT = _GL2
GL_RGBA_MODE = _GL2
GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = _GL2
GL_MAX_RATIONAL_EVAL_ORDER_NV = _GL2
GL_UNIFORM_BUFFER_BINDING_EXT = _GL2
GL_SELECTION_BUFFER_POINTER = _GL2
GL_PERFQUERY_DONOT_FLUSH_INTEL = _GL2
GL_VIDEO_COLOR_CONVERSION_MIN_NV = _GL2
GL_VERTEX4_BIT_PGI = _GL2
GL_ALLOW_DRAW_OBJ_HINT_PGI = _GL2
GL_PERFQUERY_COUNTER_RAW_INTEL = _GL2
GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = _GL2
GL_INDEX_ARRAY = _GL2
GL_VERTEX_PROGRAM_TWO_SIDE_ARB = _GL2
GL_FLOAT_R32_NV = _GL2
GL_AUX_BUFFERS = _GL2
GL_PIXEL_MAP_I_TO_B_SIZE = _GL2
GL_RENDER_MODE = _GL2
GL_PN_TRIANGLES_POINT_MODE_ATI = _GL2
GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = _GL2
GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = _GL2
GL_VERTEX_CONSISTENT_HINT_PGI = _GL2
GL_MODELVIEW0_ARB = _GL2
GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = _GL2
GL_TEXTURE_BUFFER_FORMAT = _GL2
GL_BOOL_VEC2_ARB = _GL2
GL_CURRENT_MATRIX_INDEX_ARB = _GL2
GL_UNSIGNED_INT_S8_S8_8_8_NV = _GL2
GL_LUMINANCE32I = _GL2
GL_SAMPLER_2D_SHADOW_ARB = _GL2
GL_EMBOSS_LIGHT_NV = _GL2
GL_MATRIX4_ARB = _GL2
GL_OFFSET_TEXTURE_2D_BIAS_NV = _GL2
GL_MATERIAL_SIDE_HINT_PGI = _GL2
GL_PROVOKING_VERTEX_EXT = _GL2
GL_MATRIX19_ARB = _GL2
GL_HISTOGRAM_LUMINANCE_SIZE = _GL2
GL_POLYGON_OFFSET_CLAMP_EXT = _GL2
GL_OFFSET_TEXTURE_BIAS_NV = _GL2
GL_RGBA_SIGNED_COMPONENTS = _GL2
GL_MAX_LIST_NESTING = _GL2
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = _GL2
GL_3_BYTES = _GL2
GL_DSDT_NV = _GL2
GL_INDEX = _GL2
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = _GL2
GL_ATTRIB_STACK_DEPTH = _GL2
GL_MATRIX17_ARB = _GL2
GL_EVAL_VERTEX_ATTRIB5_NV = _GL2
GL_INDEX_TEST_EXT = _GL2
GL_COLOR_TABLE_FORMAT = _GL2
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = _GL2
GL_EXCLUSION = _GL2
GL_OP_MIN_EXT = _GL2
GL_ALPHA8UI = _GL2
GL_DRAW_BUFFER5_ATI = _GL2
GL_CURRENT_MATRIX_STACK_DEPTH_ARB = _GL2
GL_Y_EXT = _GL2
GL_PIXEL_PACK_BUFFER_BINDING_EXT = _GL2
GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = _GL2
GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = _GL2
GL_MODELVIEW16_ARB = _GL2
GL_LUMINANCE16_SNORM = _GL2
GL_ACCUM = _GL2
GL_DSDT_MAG_VIB_NV = _GL2
GL_TEXTURE_FREE_MEMORY_ATI = _GL2
GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = _GL2
GL_EVAL_VERTEX_ATTRIB14_NV = _GL2
GL_VERTEX_ID_SWIZZLE_AMD = _GL2
GL_MULTIPLY = _GL2
GL_INTENSITY16_SNORM = _GL2
GL_SEPARATE_SPECULAR_COLOR = _GL2
GL_RECLAIM_MEMORY_HINT_PGI = _GL2
GL_VARIANT_ARRAY_POINTER_EXT = _GL2
GL_4_BYTES = _GL2
GL_PROGRAM_INSTRUCTIONS_ARB = _GL2
GL_SECONDARY_COLOR_ARRAY = _GL2
GL_OUTPUT_TEXTURE_COORD10_EXT = _GL2
GL_MAP2_VERTEX_3 = _GL2
GL_MAP2_VERTEX_4 = _GL2
GL_MATRIX15_ARB = _GL2
GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = _GL2
GL_Z_EXT = _GL2
GL_LOCAL_CONSTANT_EXT = _GL2
GL_INTENSITY = _GL2
GL_MAX_MAP_TESSELLATION_NV = _GL2
GL_INDEX_BITS = _GL2
GL_UNSIGNED_INT64_VEC2_ARB = _GL2
GL_VARIANT_VALUE_EXT = _GL2
GL_OP_INDEX_EXT = _GL2
GL_SOURCE1_ALPHA = _GL2
GL_TABLE_TOO_LARGE = _GL2
GL_SIGNED_RGB_NV = _GL2
GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = _GL2
GL_HSL_HUE = _GL2
GL_POLYGON_TOKEN = _GL2
GL_RENDER = _GL2
GL_PIXEL_COUNT_NV = _GL2
GL_IUI_V3F_EXT = _GL2
GL_PIXEL_CUBIC_WEIGHT_EXT = _GL2
GL_SHARED_EDGE_NV = _GL2
GL_TEXTURE_MEMORY_LAYOUT_INTEL = _GL2
GL_DRAW_BUFFER2_ATI = _GL2
GL_PIXEL_MAP_I_TO_I_SIZE = _GL2
GL_SIGNED_INTENSITY8_NV = _GL2
GL_CLIP_VOLUME_CLIPPING_HINT_EXT = _GL2
GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = _GL2
GL_BLUE_SCALE = _GL2
GL_SIGNED_ALPHA8_NV = _GL2
GL_CURRENT_WEIGHT_ARB = _GL2
GL_SAMPLER_2D_RECT_ARB = _GL2
GL_OUTPUT_TEXTURE_COORD22_EXT = _GL2
GL_SAMPLE_POSITION_NV = _GL2
GL_MATRIX29_ARB = _GL2
GL_VERTEX23_BIT_PGI = _GL2
GL_POST_CONVOLUTION_ALPHA_SCALE = _GL2
GL_TEXTURE_SWIZZLE_B_EXT = _GL2
GL_FORCE_BLUE_TO_ONE_NV = _GL2
GL_INTENSITY16UI = _GL2
GL_COMPUTE_PROGRAM_NV = _GL2
GL_DEPTH_SAMPLES_NV = _GL2
GL_DOT_PRODUCT_TEXTURE_1D_NV = _GL2
GL_ENABLE_BIT = _GL2
GL_COVERAGE_MODULATION_NV = _GL2
GL_LOCAL_EXT = _GL2
GL_POST_COLOR_MATRIX_RED_BIAS = _GL2
GL_OP_POWER_EXT = _GL2
GL_PIXEL_MODE_BIT = _GL2
GL_X_EXT = _GL2
GL_TEXTURE_BIT = _GL2
GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = _GL2
GL_SELECTION_BUFFER_SIZE = _GL2
GL_PROGRAM_PARAMETERS_ARB = _GL2
GL_T2F_C4UB_V3F = _GL2
GL_VOLATILE_APPLE = _GL2
GL_LIST_INDEX = _GL2
GL_VIDEO_BUFFER_BINDING_NV = _GL2
GL_MATRIX31_ARB = _GL2
GL_MATRIX20_ARB = _GL2
GL_HILO8_NV = _GL2
GL_BLUE_BIAS = _GL2
GL_COLOR_INDEX = _GL2
GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = _GL2
GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = _GL2
GL_LINE_WIDTH_COMMAND_NV = _GL2
GL_CLIP_NEAR_HINT_PGI = _GL2
GL_WEIGHTED_AVERAGE_ARB = _GL2
GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = _GL2
GL_COLOR_TABLE_SCALE = _GL2
GL_LIST_MODE = _GL2
GL_MATRIX3_ARB = _GL2
GL_FOG_COORD_ARRAY_POINTER = _GL2
GL_COLOR_TABLE = _GL2
GL_SHARED_TEXTURE_PALETTE_EXT = _GL2
GL_INT16_VEC4_NV = _GL2
GL_PROGRAM_NATIVE_TEMPORARIES_ARB = _GL2
GL_FAILURE_NV = _GL2
GL_RGBA4_DXT5_S3TC = _GL2
GL_HSL_SATURATION = _GL2
GL_MATRIX22_ARB = _GL2
GL_UNSIGNED_INT16_VEC4_NV = _GL2
GL_MAX_VERTEX_ATTRIBS_ARB = _GL2
GL_POST_COLOR_MATRIX_GREEN_SCALE = _GL2
GL_EYE_PLANE_ABSOLUTE_NV = _GL2
GL_NEGATIVE_Z_EXT = _GL2
GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = _GL2
GL_INTENSITY8_SNORM = _GL2
GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = _GL2
GL_BUFFER_FLUSHING_UNMAP = _GL2
GL_RESAMPLE_REPLICATE_OML = _GL2
GL_DATA_BUFFER_AMD = _GL2
GL_MODELVIEW0_STACK_DEPTH_EXT = _GL2
GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = _GL2
GL_COMPILE = _GL2
GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = _GL2
GL_SIGNED_RGBA_NV = _GL2
GL_MAX_NAME_STACK_DEPTH = _GL2
GL_MAP_ATTRIB_U_ORDER_NV = _GL2
GL_DOT_PRODUCT_NV = _GL2
GL_FLOAT_RG32_NV = _GL2
GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = _GL2
GL_RESAMPLE_ZERO_FILL_OML = _GL2
GL_MODELVIEW22_ARB = _GL2
GL_PIXEL_MAP_I_TO_R_SIZE = _GL2
GL_FLOAT16_VEC2_NV = _GL2
GL_LUMINANCE_SNORM = _GL2
GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = _GL2

# Generated from GL2ES1.html

GL_COMBINE_RGB = _GL2ES1
GL_CONSTANT = _GL2ES1
GL_OPERAND2_RGB = _GL2ES1
GL_EXP = _GL2ES1
GL_FOG_END = _GL2ES1
GL_SHADE_MODEL = _GL2ES1
GL_MAX_TEXTURE_UNITS = _GL2ES1
GL_NORMAL_ARRAY_BUFFER_BINDING = _GL2ES1
GL_ALPHA_TEST = _GL2ES1
GL_POINT_DISTANCE_ATTENUATION = _GL2ES1
GL_SRC1_RGB = _GL2ES1
GL_FOG_START = _GL2ES1
GL_SRC0_RGB = _GL2ES1
GL_SRC1_ALPHA = _GL2ES1
GL_VERTEX_ARRAY_TYPE = _GL2ES1
GL_SRC0_ALPHA = _GL2ES1
GL_GENERATE_MIPMAP = _GL2ES1
GL_MAX_MODELVIEW_STACK_DEPTH = _GL2ES1
GL_ALPHA_SCALE = _GL2ES1
GL_POINT_SPRITE = _GL2ES1
GL_CURRENT_NORMAL = _GL2ES1
GL_TEXTURE_COORD_ARRAY_SIZE = _GL2ES1
GL_COLOR_ARRAY_POINTER = _GL2ES1
GL_ADD_SIGNED = _GL2ES1
GL_SUBTRACT = _GL2ES1
GL_OPERAND0_RGB = _GL2ES1
GL_POINT_SMOOTH = _GL2ES1
GL_CONTEXT_ROBUST_ACCESS = _GL2ES1
GL_CURRENT_TEXTURE_COORDS = _GL2ES1
GL_LIGHT_MODEL_TWO_SIDE = _GL2ES1
GL_VERTEX_ARRAY_BUFFER_BINDING = _GL2ES1
GL_STACK_UNDERFLOW = _GL2ES1
GL_LIGHT_MODEL_AMBIENT = _GL2ES1
GL_CLIENT_ACTIVE_TEXTURE = _GL2ES1
GL_ALPHA_TEST_FUNC = _GL2ES1
GL_FOG_MODE = _GL2ES1
GL_FOG = _GL2ES1
GL_MODELVIEW_STACK_DEPTH = _GL2ES1
GL_PREVIOUS = _GL2ES1
GL_COLOR_ARRAY_STRIDE = _GL2ES1
GL_INTERPOLATE = _GL2ES1
GL_MAX_PROJECTION_STACK_DEPTH = _GL2ES1
GL_NORMAL_ARRAY_TYPE = _GL2ES1
GL_DECAL = _GL2ES1
GL_CLIP_PLANE3 = _GL2ES1
GL_CLIP_PLANE4 = _GL2ES1
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = _GL2ES1
GL_CLIP_PLANE5 = _GL2ES1
GL_CLIP_PLANE0 = _GL2ES1
GL_CLIP_PLANE1 = _GL2ES1
GL_CLIP_PLANE2 = _GL2ES1
GL_OPERAND2_ALPHA = _GL2ES1
GL_SRC2_ALPHA = _GL2ES1
GL_DOT3_RGBA = _GL2ES1
GL_OPERAND1_RGB = _GL2ES1
GL_MAX_LIGHTS = _GL2ES1
GL_FOG_COLOR = _GL2ES1
GL_TEXTURE_ENV = _GL2ES1
GL_OPERAND1_ALPHA = _GL2ES1
GL_TEXTURE_COORD_ARRAY_POINTER = _GL2ES1
GL_ADD = _GL2ES1
GL_POINT_SMOOTH_HINT = _GL2ES1
GL_TEXTURE_COORD_ARRAY_STRIDE = _GL2ES1
GL_TEXTURE_ENV_COLOR = _GL2ES1
GL_PROJECTION_STACK_DEPTH = _GL2ES1
GL_PRIMARY_COLOR = _GL2ES1
GL_COLOR_ARRAY_BUFFER_BINDING = _GL2ES1
GL_ALPHA_TEST_REF = _GL2ES1
GL_POINT_SIZE_MAX = _GL2ES1
GL_NORMAL_ARRAY_STRIDE = _GL2ES1
GL_FOG_HINT = _GL2ES1
GL_TEXTURE_COORD_ARRAY_TYPE = _GL2ES1
GL_POINT_SIZE_MIN = _GL2ES1
GL_MODULATE = _GL2ES1
GL_SRC2_RGB = _GL2ES1
GL_NORMAL_ARRAY_POINTER = _GL2ES1
GL_PERSPECTIVE_CORRECTION_HINT = _GL2ES1
GL_FOG_DENSITY = _GL2ES1
GL_STACK_OVERFLOW = _GL2ES1
GL_TEXTURE_STACK_DEPTH = _GL2ES1
GL_MAX_CLIP_PLANES = _GL2ES1
GL_COMBINE_ALPHA = _GL2ES1
GL_VERTEX_ARRAY_POINTER = _GL2ES1
GL_COMBINE = _GL2ES1
GL_RESCALE_NORMAL = _GL2ES1
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = _GL2ES1
GL_DOT3_RGB = _GL2ES1
GL_COLOR_ARRAY_SIZE = _GL2ES1
GL_COORD_REPLACE = _GL2ES1
GL_RGB_SCALE = _GL2ES1
GL_MAX_TEXTURE_STACK_DEPTH = _GL2ES1
GL_COLOR_ARRAY_TYPE = _GL2ES1
GL_TEXTURE_ENV_MODE = _GL2ES1
GL_EXP2 = _GL2ES1
GL_OPERAND0_ALPHA = _GL2ES1
GL_VERTEX_ARRAY_STRIDE = _GL2ES1
GL_CURRENT_COLOR = _GL2ES1
GL_VERTEX_ARRAY_SIZE = _GL2ES1

# Generated from GL2ES2.html

GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = _GL2ES2
GL_COLOR_ATTACHMENT12 = _GL2ES2
GL_PROGRAM_BINARY_FORMATS = _GL2ES2
GL_BOOL = _GL2ES2
GL_CONSTANT_ALPHA = _GL2ES2
GL_COLOR_ATTACHMENT6 = _GL2ES2
GL_SHADER_BINARY_DMP = _GL2ES2
GL_QUERY = _GL2ES2
GL_DEBUG_TYPE_POP_GROUP = _GL2ES2
GL_DEPTH_COMPONENT = _GL2ES2
GL_TIME_ELAPSED = _GL2ES2
GL_SHADER_SOURCE_LENGTH = _GL2ES2
GL_DRAW_BUFFER15 = _GL2ES2
GL_VERTEX_ATTRIB_ARRAY_STRIDE = _GL2ES2
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = _GL2ES2
GL_DEBUG_SEVERITY_LOW = _GL2ES2
GL_ONE_MINUS_CONSTANT_ALPHA = _GL2ES2
GL_COMPILE_STATUS = _GL2ES2
GL_SAMPLE_MASK = _GL2ES2
GL_COLOR_ATTACHMENT1 = _GL2ES2
GL_SHADER_COMPILER = _GL2ES2
GL_DEBUG_SOURCE_OTHER = _GL2ES2
GL_COLOR_ATTACHMENT3 = _GL2ES2
GL_SAMPLE_MASK_VALUE = _GL2ES2
GL_TEXTURE_COMPARE_MODE = _GL2ES2
GL_UNPACK_SKIP_PIXELS = _GL2ES2
GL_UNPACK_SKIP_ROWS = _GL2ES2
GL_TEXTURE_SAMPLES = _GL2ES2
GL_MEDIUM_FLOAT = _GL2ES2
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = _GL2ES2
GL_MEDIUM_INT = _GL2ES2
GL_TEXTURE_BINDING_3D = _GL2ES2
GL_SAMPLER = _GL2ES2
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = _GL2ES2
GL_DRAW_BUFFER12 = _GL2ES2
GL_VALIDATE_STATUS = _GL2ES2
GL_INT_10_10_10_2 = _GL2ES2
GL_UNPACK_ROW_LENGTH = _GL2ES2
GL_UNSIGNED_INT_2_10_10_10_REV = _GL2ES2
GL_VERTEX_SHADER = _GL2ES2
GL_DRAW_BUFFER8 = _GL2ES2
GL_COLOR_ATTACHMENT2 = _GL2ES2
GL_MAX_VERTEX_UNIFORM_VECTORS = _GL2ES2
GL_ANY_SAMPLES_PASSED_CONSERVATIVE = _GL2ES2
GL_VERTEX_ATTRIB_ARRAY_POINTER = _GL2ES2
GL_BLEND_ADVANCED_COHERENT_KHR = _GL2ES2
GL_DEBUG_SEVERITY_MEDIUM = _GL2ES2
GL_PROGRAM = _GL2ES2
GL_SAMPLER_CUBE = _GL2ES2
GL_QUERY_COUNTER_BITS = _GL2ES2
GL_PROGRAM_SEPARABLE = _GL2ES2
GL_FLOAT_VEC3 = _GL2ES2
GL_FLOAT_VEC4 = _GL2ES2
GL_FLOAT_VEC2 = _GL2ES2
GL_ANY_SAMPLES_PASSED = _GL2ES2
GL_MAX_LABEL_LENGTH = _GL2ES2
GL_TEXTURE_3D = _GL2ES2
GL_STENCIL_BACK_PASS_DEPTH_PASS = _GL2ES2
GL_COMPARE_REF_TO_TEXTURE = _GL2ES2
GL_TEXTURE_WRAP_R = _GL2ES2
GL_COLOR_ATTACHMENT15 = _GL2ES2
GL_SHADER_TYPE = _GL2ES2
GL_DEBUG_SOURCE_APPLICATION = _GL2ES2
GL_NUM_PROGRAM_BINARY_FORMATS = _GL2ES2
GL_COLOR_ATTACHMENT9 = _GL2ES2
GL_HIGH_FLOAT = _GL2ES2
GL_BUFFER = _GL2ES2
GL_DRAW_BUFFER3 = _GL2ES2
GL_SHADER = _GL2ES2
GL_DRAW_BUFFER9 = _GL2ES2
GL_CONSTANT_COLOR = _GL2ES2
GL_MAX_DEBUG_MESSAGE_LENGTH = _GL2ES2
GL_UNSIGNED_INT_10_10_10_2 = _GL2ES2
GL_LOW_FLOAT = _GL2ES2
GL_CONTEXT_FLAG_DEBUG_BIT = _GL2ES2
GL_TEXTURE_BINDING_2D_MULTISAMPLE = _GL2ES2
GL_MAX_DEBUG_LOGGED_MESSAGES = _GL2ES2
GL_NUM_SHADER_BINARY_FORMATS = _GL2ES2
GL_ONE_MINUS_CONSTANT_COLOR = _GL2ES2
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = _GL2ES2
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _GL2ES2
GL_STENCIL_BACK_FUNC = _GL2ES2
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _GL2ES2
GL_DRAW_BUFFER14 = _GL2ES2
GL_COLOR_ATTACHMENT5 = _GL2ES2
GL_DEBUG_CALLBACK_USER_PARAM = _GL2ES2
GL_DEBUG_SEVERITY_HIGH = _GL2ES2
GL_SAMPLER_2D = _GL2ES2
GL_DRAW_BUFFER0 = _GL2ES2
GL_ACTIVE_UNIFORMS = _GL2ES2
GL_MAX_3D_TEXTURE_SIZE = _GL2ES2
GL_RG = _GL2ES2
GL_DEBUG_GROUP_STACK_DEPTH = _GL2ES2
GL_PROGRAM_BINARY_LENGTH = _GL2ES2
GL_STENCIL_BACK_FAIL = _GL2ES2
GL_MAX_SAMPLE_MASK_WORDS = _GL2ES2
GL_GPU_DISJOINT = _GL2ES2
GL_DELETE_STATUS = _GL2ES2
GL_INT = _GL2ES2
GL_SAMPLER_2D_MULTISAMPLE_ARRAY = _GL2ES2
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = _GL2ES2
GL_COLOR_ATTACHMENT14 = _GL2ES2
GL_FLOAT_MAT3 = _GL2ES2
GL_FLOAT_MAT4 = _GL2ES2
GL_COLOR_ATTACHMENT10 = _GL2ES2
GL_FLOAT_MAT2 = _GL2ES2
GL_CURRENT_QUERY = _GL2ES2
GL_DEBUG_CALLBACK_FUNCTION = _GL2ES2
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = _GL2ES2
GL_TEXTURE_COMPARE_FUNC = _GL2ES2
GL_UNSIGNED_NORMALIZED = _GL2ES2
GL_VERTEX_ATTRIB_ARRAY_TYPE = _GL2ES2
GL_MAX_DEBUG_GROUP_STACK_DEPTH = _GL2ES2
GL_BOOL_VEC2 = _GL2ES2
GL_RED = _GL2ES2
GL_STENCIL_BACK_PASS_DEPTH_FAIL = _GL2ES2
GL_BOOL_VEC4 = _GL2ES2
GL_BOOL_VEC3 = _GL2ES2
GL_PROXY_TEXTURE_2D_MULTISAMPLE = _GL2ES2
GL_DRAW_BUFFER2 = _GL2ES2
GL_CLAMP_TO_BORDER = _GL2ES2
GL_HIGH_INT = _GL2ES2
GL_INT_VEC4 = _GL2ES2
GL_INT_VEC3 = _GL2ES2
GL_INT_VEC2 = _GL2ES2
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = _GL2ES2
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = _GL2ES2
GL_MAX_VARYING_VECTORS = _GL2ES2
GL_ACTIVE_ATTRIBUTES = _GL2ES2
GL_COLOR_ATTACHMENT11 = _GL2ES2
GL_DRAW_BUFFER13 = _GL2ES2
GL_DRAW_BUFFER10 = _GL2ES2
GL_TEXTURE_2D_MULTISAMPLE = _GL2ES2
GL_TIMESTAMP = _GL2ES2
GL_DEBUG_TYPE_PUSH_GROUP = _GL2ES2
GL_VERTEX_ATTRIB_ARRAY_ENABLED = _GL2ES2
GL_ATTACHED_SHADERS = _GL2ES2
GL_DEBUG_TYPE_MARKER = _GL2ES2
GL_COLOR_ATTACHMENT4 = _GL2ES2
GL_TEXTURE_BORDER_COLOR = _GL2ES2
GL_STENCIL_BACK_WRITEMASK = _GL2ES2
GL_MAX_INTEGER_SAMPLES = _GL2ES2
GL_STENCIL_BACK_REF = _GL2ES2
GL_STENCIL_BACK_VALUE_MASK = _GL2ES2
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = _GL2ES2
GL_DRAW_BUFFER4 = _GL2ES2
GL_VERTEX_ATTRIB_ARRAY_SIZE = _GL2ES2
GL_ACTIVE_PROGRAM = _GL2ES2
GL_MAX_TEXTURE_IMAGE_UNITS = _GL2ES2
GL_DEBUG_OUTPUT = _GL2ES2
GL_DEBUG_SEVERITY_NOTIFICATION = _GL2ES2
GL_DRAW_BUFFER7 = _GL2ES2
GL_DEBUG_SOURCE_API = _GL2ES2
GL_SAMPLER_2D_MULTISAMPLE = _GL2ES2
GL_CURRENT_PROGRAM = _GL2ES2
GL_PROGRAM_PIPELINE_BINDING = _GL2ES2
GL_DEBUG_TYPE_PERFORMANCE = _GL2ES2
GL_MAX_FRAGMENT_UNIFORM_VECTORS = _GL2ES2
GL_STREAM_DRAW = _GL2ES2
GL_SHADER_BINARY_FORMATS = _GL2ES2
GL_DEBUG_LOGGED_MESSAGES = _GL2ES2
GL_SAMPLE_POSITION = _GL2ES2
GL_DRAW_BUFFER1 = _GL2ES2
GL_ACTIVE_UNIFORM_MAX_LENGTH = _GL2ES2
GL_MAX_COLOR_TEXTURE_SAMPLES = _GL2ES2
GL_DEBUG_TYPE_ERROR = _GL2ES2
GL_DEBUG_TYPE_PORTABILITY = _GL2ES2
GL_DEBUG_SOURCE_SHADER_COMPILER = _GL2ES2
GL_SHADING_LANGUAGE_VERSION = _GL2ES2
GL_DEBUG_SOURCE_THIRD_PARTY = _GL2ES2
GL_DRAW_BUFFER11 = _GL2ES2
GL_COLOR_ATTACHMENT7 = _GL2ES2
GL_LOW_INT = _GL2ES2
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = _GL2ES2
GL_LINK_STATUS = _GL2ES2
GL_TEXTURE_2D_MULTISAMPLE_ARRAY = _GL2ES2
GL_DRAW_BUFFER5 = _GL2ES2
GL_FRAGMENT_SHADER_BIT = _GL2ES2
GL_QUERY_RESULT = _GL2ES2
GL_INFO_LOG_LENGTH = _GL2ES2
GL_FRAGMENT_SHADER = _GL2ES2
GL_MAX_DRAW_BUFFERS = _GL2ES2
GL_COLOR_ATTACHMENT13 = _GL2ES2
GL_INT_SAMPLER_2D_MULTISAMPLE = _GL2ES2
GL_CURRENT_VERTEX_ATTRIB = _GL2ES2
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = _GL2ES2
GL_DEBUG_TYPE_OTHER = _GL2ES2
GL_QUERY_RESULT_AVAILABLE = _GL2ES2
GL_MAX_VERTEX_ATTRIBS = _GL2ES2
GL_MAX_DEPTH_TEXTURE_SAMPLES = _GL2ES2
GL_BLEND_COLOR = _GL2ES2
GL_VERTEX_SHADER_BIT = _GL2ES2
GL_COLOR_ATTACHMENT8 = _GL2ES2
GL_SAMPLER_2D_SHADOW = _GL2ES2
GL_SAMPLER_3D = _GL2ES2
GL_PROGRAM_PIPELINE = _GL2ES2
GL_DRAW_BUFFER6 = _GL2ES2
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = _GL2ES2
GL_DEBUG_OUTPUT_SYNCHRONOUS = _GL2ES2
GL_MAX_COLOR_ATTACHMENTS = _GL2ES2
GL_DEBUG_SOURCE_WINDOW_SYSTEM = _GL2ES2
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = _GL2ES2
GL_STENCIL_INDEX = _GL2ES2

# Generated from GL2ES3.html

GL_INT_SAMPLER_BUFFER = _GL2ES3
GL_TEXTURE_BUFFER_DATA_STORE_BINDING = _GL2ES3
GL_TEXTURE_INTERNAL_FORMAT = _GL2ES3
GL_TEXTURE_DEPTH_SIZE = _GL2ES3
GL_RGB8_SNORM = _GL2ES3
GL_UNIFORM_OFFSET = _GL2ES3
GL_MAX_FRAMEBUFFER_SAMPLES = _GL2ES3
GL_LAST_VERTEX_CONVENTION_EXT = _GL2ES3
GL_RGBA8_SNORM = _GL2ES3
GL_VERTEX_ATTRIB_ARRAY_INTEGER = _GL2ES3
GL_NUM_SAMPLE_COUNTS = _GL2ES3
GL_COMPRESSED_RGBA8_ETC2_EAC = _GL2ES3
GL_FRAMEBUFFER_DEFAULT_HEIGHT = _GL2ES3
GL_MAX_ARRAY_TEXTURE_LAYERS = _GL2ES3
GL_FLOAT_32_UNSIGNED_INT_24_8_REV = _GL2ES3
GL_LINES_ADJACENCY_EXT = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_5x5_KHR = _GL2ES3
GL_PACK_ROW_LENGTH = _GL2ES3
GL_RGBA32I = _GL2ES3
GL_TEXTURE_GREEN_TYPE = _GL2ES3
GL_COLOR = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_4x4_KHR = _GL2ES3
GL_SAMPLER_CUBE_MAP_ARRAY = _GL2ES3
GL_QUERY_WAIT = _GL2ES3
GL_RGB32UI = _GL2ES3
GL_RGBA8I = _GL2ES3
GL_PIXEL_UNPACK_BUFFER = _GL2ES3
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = _GL2ES3
GL_RGB9_E5 = _GL2ES3
GL_MAX_TEXTURE_LOD_BIAS = _GL2ES3
GL_BUFFER_UPDATE_BARRIER_BIT = _GL2ES3
GL_TRANSFORM_FEEDBACK_BUFFER_MODE = _GL2ES3
GL_UNIFORM_BLOCK_NAME_LENGTH = _GL2ES3
GL_COMPRESSED_SIGNED_RG11_EAC = _GL2ES3
GL_RGB8I = _GL2ES3
GL_COMPRESSED_RGB8_ETC2 = _GL2ES3
GL_R16UI = _GL2ES3
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = _GL2ES3
GL_TEXTURE_ALPHA_SIZE = _GL2ES3
GL_UNSIGNED_INT_IMAGE_2D_ARRAY = _GL2ES3
GL_TEXTURE_RED_TYPE = _GL2ES3
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = _GL2ES3
GL_UNSIGNED_INT_IMAGE_CUBE = _GL2ES3
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = _GL2ES3
GL_UNIFORM_BUFFER_BINDING = _GL2ES3
GL_INT_IMAGE_CUBE_MAP_ARRAY = _GL2ES3
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = _GL2ES3
GL_RGB_INTEGER = _GL2ES3
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = _GL2ES3
GL_DEPTH_COMPONENT32F = _GL2ES3
GL_UNIFORM_SIZE = _GL2ES3
GL_RGBA_INTEGER = _GL2ES3
GL_PROGRAM_BINARY_RETRIEVABLE_HINT = _GL2ES3
GL_UNIFORM_BLOCK_BINDING = _GL2ES3
GL_R8I = _GL2ES3
GL_R16I = _GL2ES3
GL_MAX_GEOMETRY_ATOMIC_COUNTERS = _GL2ES3
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = _GL2ES3
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = _GL2ES3
GL_TEXTURE_BLUE_TYPE = _GL2ES3
GL_FRAMEBUFFER_BARRIER_BIT = _GL2ES3
GL_ATOMIC_COUNTER_BUFFER_BINDING = _GL2ES3
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = _GL2ES3
GL_IMAGE_3D = _GL2ES3
GL_MAX_FRAGMENT_ATOMIC_COUNTERS = _GL2ES3
GL_READ_BUFFER = _GL2ES3
GL_PIXEL_UNPACK_BUFFER_BINDING = _GL2ES3
GL_RASTERIZER_DISCARD = _GL2ES3
GL_TRANSFORM_FEEDBACK_BUFFER = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_8x5_KHR = _GL2ES3
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = _GL2ES3
GL_UNIFORM_BUFFER = _GL2ES3
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_10x6_KHR = _GL2ES3
GL_SIGNED_NORMALIZED = _GL2ES3
GL_RG8_SNORM = _GL2ES3
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = _GL2ES3
GL_GREEN = _GL2ES3
GL_BLUE = _GL2ES3
GL_CONTEXT_FLAGS = _GL2ES3
GL_RGB32I = _GL2ES3
GL_RGB16I = _GL2ES3
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = _GL2ES3
GL_TEXTURE_FETCH_BARRIER_BIT = _GL2ES3
GL_STATIC_COPY = _GL2ES3
GL_IMAGE_BINDING_NAME = _GL2ES3
GL_TRIANGLE_STRIP_ADJACENCY_EXT = _GL2ES3
GL_MIN_PROGRAM_TEXEL_OFFSET = _GL2ES3
GL_INT_IMAGE_2D = _GL2ES3
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = _GL2ES3
GL_INT_IMAGE_3D = _GL2ES3
GL_FRAMEBUFFER_DEFAULT = _GL2ES3
GL_TEXTURE_STENCIL_SIZE = _GL2ES3
GL_SAMPLE_SHADING = _GL2ES3
GL_BUFFER_ACCESS_FLAGS = _GL2ES3
GL_FIRST_VERTEX_CONVENTION_EXT = _GL2ES3
GL_TEXTURE_BINDING_2D_ARRAY = _GL2ES3
GL_IMAGE_BINDING_FORMAT = _GL2ES3
GL_MAX_FRAMEBUFFER_HEIGHT = _GL2ES3
GL_READ_ONLY = _GL2ES3
GL_SRGB8 = _GL2ES3
GL_FRAMEBUFFER_UNDEFINED = _GL2ES3
GL_COPY_READ_BUFFER_BINDING = _GL2ES3
GL_RGB16UI = _GL2ES3
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = _GL2ES3
GL_UNPACK_IMAGE_HEIGHT = _GL2ES3
GL_ATOMIC_COUNTER_BUFFER_SIZE = _GL2ES3
GL_MAX_GEOMETRY_UNIFORM_BLOCKS = _GL2ES3
GL_MAX_IMAGE_UNITS = _GL2ES3
GL_INT_SAMPLER_CUBE = _GL2ES3
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = _GL2ES3
GL_UNSIGNED_INT_SAMPLER_3D = _GL2ES3
GL_FLOAT_MAT2x3 = _GL2ES3
GL_FLOAT_MAT2x4 = _GL2ES3
GL_UNSIGNED_INT_SAMPLER_2D = _GL2ES3
GL_ACTIVE_UNIFORM_BLOCKS = _GL2ES3
GL_IMAGE_BINDING_LEVEL = _GL2ES3
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = _GL2ES3
GL_PIXEL_BUFFER_BARRIER_BIT = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_12x12_KHR = _GL2ES3
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = _GL2ES3
GL_PIXEL_PACK_BUFFER_BINDING = _GL2ES3
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = _GL2ES3
GL_MAX_VERTEX_UNIFORM_COMPONENTS = _GL2ES3
GL_COLOR_ATTACHMENT18 = _GL2ES3
GL_COLOR_ATTACHMENT19 = _GL2ES3
GL_UNIFORM_BLOCK_DATA_SIZE = _GL2ES3
GL_ATOMIC_COUNTER_BUFFER = _GL2ES3
GL_COLOR_ATTACHMENT20 = _GL2ES3
GL_COLOR_ATTACHMENT26 = _GL2ES3
GL_COLOR_ATTACHMENT25 = _GL2ES3
GL_COLOR_ATTACHMENT28 = _GL2ES3
GL_COLOR_ATTACHMENT27 = _GL2ES3
GL_COLOR_ATTACHMENT22 = _GL2ES3
GL_COLOR_ATTACHMENT21 = _GL2ES3
GL_COLOR_ATTACHMENT24 = _GL2ES3
GL_COLOR_ATTACHMENT23 = _GL2ES3
GL_COLOR_ATTACHMENT17 = _GL2ES3
GL_COLOR_ATTACHMENT16 = _GL2ES3
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = _GL2ES3
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = _GL2ES3
GL_PIXEL_PACK_BUFFER = _GL2ES3
GL_COLOR_ATTACHMENT29 = _GL2ES3
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = _GL2ES3
GL_COLOR_ATTACHMENT31 = _GL2ES3
GL_UNSIGNED_INT_5_9_9_9_REV = _GL2ES3
GL_COLOR_ATTACHMENT30 = _GL2ES3
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = _GL2ES3
GL_TEXTURE_COMPRESSED = _GL2ES3
GL_IMAGE_BINDING_LAYERED = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = _GL2ES3
GL_TEXTURE_MAX_LEVEL = _GL2ES3
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = _GL2ES3
GL_MAX_UNIFORM_BLOCK_SIZE = _GL2ES3
GL_TEXTURE_SHARED_SIZE = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = _GL2ES3
GL_R32UI = _GL2ES3
GL_RED_INTEGER = _GL2ES3
GL_MAX_COMBINED_IMAGE_UNIFORMS = _GL2ES3
GL_TRANSFORM_FEEDBACK = _GL2ES3
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = _GL2ES3
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = _GL2ES3
GL_READ_WRITE = _GL2ES3
GL_MAX_ELEMENTS_VERTICES = _GL2ES3
GL_TEXTURE_BUFFER = _GL2ES3
GL_TRANSFORM_FEEDBACK_BARRIER_BIT = _GL2ES3
GL_TEXTURE_RED_SIZE = _GL2ES3
GL_TEXTURE_BINDING_BUFFER = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = _GL2ES3
GL_DYNAMIC_COPY = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = _GL2ES3
GL_UNSIGNED_INT_ATOMIC_COUNTER = _GL2ES3
GL_TEXTURE_GREEN_SIZE = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_6x6_KHR = _GL2ES3
GL_IMAGE_CUBE = _GL2ES3
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = _GL2ES3
GL_PRIMITIVE_RESTART_FIXED_INDEX = _GL2ES3
GL_TEXTURE_UPDATE_BARRIER_BIT = _GL2ES3
GL_TRANSFORM_FEEDBACK_ACTIVE = _GL2ES3
GL_RGBA32UI = _GL2ES3
GL_IMAGE_BINDING_LAYER = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_12x10_KHR = _GL2ES3
GL_R11F_G11F_B10F = _GL2ES3
GL_IMAGE_CUBE_MAP_ARRAY = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = _GL2ES3
GL_PACK_SKIP_PIXELS = _GL2ES3
GL_STATIC_READ = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = _GL2ES3
GL_COMPRESSED_R11_EAC = _GL2ES3
GL_BUFFER_MAP_LENGTH = _GL2ES3
GL_R8UI = _GL2ES3
GL_UNPACK_SKIP_IMAGES = _GL2ES3
GL_TEXTURE_2D_ARRAY = _GL2ES3
GL_UNSIGNED_INT_SAMPLER_BUFFER = _GL2ES3
GL_TESS_CONTROL_SHADER_BIT = _GL2ES3
GL_PRIMITIVES_GENERATED = _GL2ES3
GL_IMAGE_2D = _GL2ES3
GL_IMAGE_BINDING_ACCESS = _GL2ES3
GL_RG8UI = _GL2ES3
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = _GL2ES3
GL_TEXTURE_ALPHA_TYPE = _GL2ES3
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = _GL2ES3
GL_UNSIGNED_INT_VEC2 = _GL2ES3
GL_UNSIGNED_INT_VEC3 = _GL2ES3
GL_UNIFORM_BUFFER_SIZE = _GL2ES3
GL_UNSIGNED_INT_VEC4 = _GL2ES3
GL_MULTISAMPLE_LINE_WIDTH_RANGE = _GL2ES3
GL_RGBA16UI = _GL2ES3
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = _GL2ES3
GL_UNIFORM_BLOCK_INDEX = _GL2ES3
GL_FRAMEBUFFER_DEFAULT_SAMPLES = _GL2ES3
GL_TEXTURE_CUBE_MAP_ARRAY = _GL2ES3
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = _GL2ES3
GL_TEXTURE_DEPTH = _GL2ES3
GL_INT_SAMPLER_2D_ARRAY = _GL2ES3
GL_UNIFORM_MATRIX_STRIDE = _GL2ES3
GL_MAX_ELEMENTS_INDICES = _GL2ES3
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_10x5_KHR = _GL2ES3
GL_COPY_WRITE_BUFFER = _GL2ES3
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = _GL2ES3
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = _GL2ES3
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = _GL2ES3
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = _GL2ES3
GL_VERTEX_ATTRIB_ARRAY_DIVISOR = _GL2ES3
GL_MAJOR_VERSION = _GL2ES3
GL_INT_SAMPLER_CUBE_MAP_ARRAY = _GL2ES3
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = _GL2ES3
GL_FLOAT_MAT4x3 = _GL2ES3
GL_FLOAT_MAT4x2 = _GL2ES3
GL_TEXTURE_HEIGHT = _GL2ES3
GL_FIRST_VERTEX_CONVENTION = _GL2ES3
GL_QUADS = _GL2ES3
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = _GL2ES3
GL_INT_IMAGE_BUFFER = _GL2ES3
GL_STREAM_READ = _GL2ES3
GL_COPY_READ_BUFFER = _GL2ES3
GL_TRANSFORM_FEEDBACK_BINDING = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = _GL2ES3
GL_QUERY_NO_WAIT = _GL2ES3
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = _GL2ES3
GL_UNSIGNED_INT_IMAGE_3D = _GL2ES3
GL_TRANSFORM_FEEDBACK_PAUSED = _GL2ES3
GL_INTERLEAVED_ATTRIBS = _GL2ES3
GL_MAX_VERTEX_IMAGE_UNIFORMS = _GL2ES3
GL_SAMPLER_BUFFER = _GL2ES3
GL_UNSIGNED_INT_IMAGE_BUFFER = _GL2ES3
GL_TEXTURE_SWIZZLE_A = _GL2ES3
GL_TEXTURE_MIN_LOD = _GL2ES3
GL_TEXTURE_SWIZZLE_B = _GL2ES3
GL_TEXTURE_SWIZZLE_G = _GL2ES3
GL_SAMPLER_2D_ARRAY = _GL2ES3
GL_TEXTURE_SWIZZLE_R = _GL2ES3
GL_MAX_VERTEX_UNIFORM_BLOCKS = _GL2ES3
GL_IMAGE_BUFFER = _GL2ES3
GL_GEOMETRY_SHADER_BIT = _GL2ES3
GL_MAX_FRAMEBUFFER_WIDTH = _GL2ES3
GL_RGB8UI = _GL2ES3
GL_COMMAND_BARRIER_BIT = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = _GL2ES3
GL_COMPRESSED_RG11_EAC = _GL2ES3
GL_RGBA16I = _GL2ES3
GL_UNSIGNED_INT_SAMPLER_CUBE = _GL2ES3
GL_PRIMITIVE_BOUNDING_BOX = _GL2ES3
GL_STREAM_COPY = _GL2ES3
GL_UNIFORM_IS_ROW_MAJOR = _GL2ES3
GL_SAMPLER_2D_ARRAY_SHADOW = _GL2ES3
GL_ATOMIC_COUNTER_BARRIER_BIT = _GL2ES3
GL_UNIFORM_BUFFER_START = _GL2ES3
GL_MAX_FRAGMENT_UNIFORM_BLOCKS = _GL2ES3
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_10x10_KHR = _GL2ES3
GL_STENCIL = _GL2ES3
GL_MAX_VARYING_COMPONENTS = _GL2ES3
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = _GL2ES3
GL_R32I = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = _GL2ES3
GL_RGB10_A2UI = _GL2ES3
GL_FLOAT_MAT3x2 = _GL2ES3
GL_FLOAT_MAT3x4 = _GL2ES3
GL_INT_IMAGE_CUBE = _GL2ES3
GL_IMAGE_2D_ARRAY = _GL2ES3
GL_UNIFORM_ARRAY_STRIDE = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_10x8_KHR = _GL2ES3
GL_MIN_SAMPLE_SHADING_VALUE = _GL2ES3
GL_UNIFORM_NAME_LENGTH = _GL2ES3
GL_DEPTH32F_STENCIL8 = _GL2ES3
GL_UNSIGNED_INT_IMAGE_2D = _GL2ES3
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = _GL2ES3
GL_QUERY_BY_REGION_NO_WAIT = _GL2ES3
GL_MAX_ELEMENT_INDEX = _GL2ES3
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = _GL2ES3
GL_MAX_TEXTURE_BUFFER_SIZE = _GL2ES3
GL_SAMPLER_CUBE_SHADOW = _GL2ES3
GL_TRIANGLES_ADJACENCY_EXT = _GL2ES3
GL_UNIFORM_BARRIER_BIT = _GL2ES3
GL_TEXTURE_BLUE_SIZE = _GL2ES3
GL_INT_IMAGE_2D_ARRAY = _GL2ES3
GL_SEPARATE_ATTRIBS = _GL2ES3
GL_DYNAMIC_READ = _GL2ES3
GL_RGBA8UI = _GL2ES3
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_8x6_KHR = _GL2ES3
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = _GL2ES3
GL_MAX_GEOMETRY_IMAGE_UNIFORMS = _GL2ES3
GL_DEPTH_STENCIL_TEXTURE_MODE = _GL2ES3
GL_COPY_WRITE_BUFFER_BINDING = _GL2ES3
GL_R8_SNORM = _GL2ES3
GL_RG16I = _GL2ES3
GL_PACK_SKIP_ROWS = _GL2ES3
GL_BUFFER_MAP_OFFSET = _GL2ES3
GL_TRANSFORM_FEEDBACK_BUFFER_START = _GL2ES3
GL_RG_INTEGER = _GL2ES3
GL_LAST_VERTEX_CONVENTION = _GL2ES3
GL_MIN = _GL2ES3
GL_MAX_COMBINED_UNIFORM_BLOCKS = _GL2ES3
GL_RG16UI = _GL2ES3
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = _GL2ES3
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = _GL2ES3
GL_MAX_COMBINED_ATOMIC_COUNTERS = _GL2ES3
GL_COMPRESSED_SRGB8_ETC2 = _GL2ES3
GL_TEXTURE_WIDTH = _GL2ES3
GL_MAX_FRAMEBUFFER_LAYERS = _GL2ES3
GL_TESS_EVALUATION_SHADER_BIT = _GL2ES3
GL_QUERY_BY_REGION_WAIT = _GL2ES3
GL_FRAMEBUFFER_DEFAULT_LAYERS = _GL2ES3
GL_INT_SAMPLER_2D = _GL2ES3
GL_ATOMIC_COUNTER_BUFFER_START = _GL2ES3
GL_RG32UI = _GL2ES3
GL_INT_SAMPLER_3D = _GL2ES3
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = _GL2ES3
GL_VERTEX_ARRAY_BINDING = _GL2ES3
GL_MAX = _GL2ES3
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = _GL2ES3
GL_TEXTURE_DEPTH_TYPE = _GL2ES3
GL_TEXTURE_BASE_LEVEL = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_8x8_KHR = _GL2ES3
GL_MAX_PROGRAM_TEXEL_OFFSET = _GL2ES3
GL_ELEMENT_ARRAY_BARRIER_BIT = _GL2ES3
GL_LINE_STRIP_ADJACENCY_EXT = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = _GL2ES3
GL_MINOR_VERSION = _GL2ES3
GL_RG8I = _GL2ES3
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = _GL2ES3
GL_DEPTH_STENCIL_ATTACHMENT = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = _GL2ES3
GL_TRANSFORM_FEEDBACK_VARYINGS = _GL2ES3
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = _GL2ES3
GL_TEXTURE_MAX_LOD = _GL2ES3
GL_RG32I = _GL2ES3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = _GL2ES3
GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = _GL2ES3
GL_UNIFORM_TYPE = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_6x5_KHR = _GL2ES3
GL_MAX_FRAGMENT_IMAGE_UNIFORMS = _GL2ES3
GL_COMPRESSED_SIGNED_R11_EAC = _GL2ES3
GL_MAX_VERTEX_ATOMIC_COUNTERS = _GL2ES3
GL_NUM_EXTENSIONS = _GL2ES3
GL_MAX_UNIFORM_BUFFER_BINDINGS = _GL2ES3
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = _GL2ES3
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = _GL2ES3
GL_FRAMEBUFFER_DEFAULT_WIDTH = _GL2ES3
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = _GL2ES3
GL_DEPTH = _GL2ES3
GL_COMPRESSED_RGBA_ASTC_5x4_KHR = _GL2ES3
GL_INVALID_INDEX = _GL2ES3

# Generated from GL2GL3.html

GL_MIN_MAP_BUFFER_ALIGNMENT = _GL2GL3
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = _GL2GL3
GL_BACK_LEFT = _GL2GL3
GL_VIEW_CLASS_BPTC_FLOAT = _GL2GL3
GL_DEBUG_CATEGORY_API_ERROR_AMD = _GL2GL3
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = _GL2GL3
GL_TESS_CONTROL_SHADER_PATCHES_ARB = _GL2GL3
GL_COMPRESSED_SRGB = _GL2GL3
GL_INTERNALFORMAT_PREFERRED = _GL2GL3
GL_SAMPLES_PASSED = _GL2GL3
GL_SAMPLER_BUFFER_AMD = _GL2GL3
GL_INDEX_ARRAY_ADDRESS_NV = _GL2GL3
GL_INTERNALFORMAT_RED_SIZE = _GL2GL3
GL_IMAGE_CLASS_4_X_32 = _GL2GL3
GL_TEXTURE_VIEW = _GL2GL3
GL_EDGE_FLAG_ARRAY_ADDRESS_NV = _GL2GL3
GL_POLYGON_OFFSET_LINE = _GL2GL3
GL_IMAGE_CLASS_4_X_16 = _GL2GL3
GL_INTERNALFORMAT_GREEN_SIZE = _GL2GL3
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = _GL2GL3
GL_GREEN_INTEGER = _GL2GL3
GL_INDEX_ARRAY_LENGTH_NV = _GL2GL3
GL_INT_SAMPLER_BUFFER_AMD = _GL2GL3
GL_UNSIGNED_INT_SAMPLER_2D_RECT = _GL2GL3
GL_SHADER_IMAGE_STORE = _GL2GL3
GL_IMAGE_CLASS_2_X_16 = _GL2GL3
GL_MAX_SPARSE_TEXTURE_SIZE_ARB = _GL2GL3
GL_VIEW_CLASS_16_BITS = _GL2GL3
GL_SRGB_DECODE = _GL2GL3
GL_DEPTH_CLAMP_FAR_AMD = _GL2GL3
GL_IMAGE_CLASS_2_X_32 = _GL2GL3
GL_POLYGON_MODE = _GL2GL3
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = _GL2GL3
GL_IMAGE_COMPATIBILITY_CLASS = _GL2GL3
GL_STENCIL_COMPONENTS = _GL2GL3
GL_COMPRESSED_SRGB_ALPHA = _GL2GL3
GL_LINE_WIDTH_GRANULARITY = _GL2GL3
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = _GL2GL3
GL_FRONT_RIGHT = _GL2GL3
GL_VIEW_CLASS_S3TC_DXT1_RGB = _GL2GL3
GL_PROXY_TEXTURE_RECTANGLE = _GL2GL3
GL_VIEW_CLASS_96_BITS = _GL2GL3
GL_VIEW_CLASS_RGTC1_RED = _GL2GL3
GL_PACK_SWAP_BYTES = _GL2GL3
GL_TEXTURE_COLOR_SAMPLES_NV = _GL2GL3
GL_DRAW_INDIRECT_UNIFIED_NV = _GL2GL3
GL_TEXTURE_COVERAGE_SAMPLES_NV = _GL2GL3
GL_DEPTH_COMPONENTS = _GL2GL3
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = _GL2GL3
GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = _GL2GL3
GL_DISCRETE_AMD = _GL2GL3
GL_NORMAL_ARRAY_ADDRESS_NV = _GL2GL3
GL_FRAGMENT_TEXTURE = _GL2GL3
GL_PRIMITIVE_RESTART_INDEX = _GL2GL3
GL_RGB4 = _GL2GL3
GL_RGBA2 = _GL2GL3
GL_RGB5 = _GL2GL3
GL_INT_IMAGE_1D_ARRAY = _GL2GL3
GL_IMAGE_CLASS_11_11_10 = _GL2GL3
GL_NUM_SPARSE_LEVELS_ARB = _GL2GL3
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = _GL2GL3
GL_IMAGE_CLASS_2_X_8 = _GL2GL3
GL_TEXTURE_LOD_BIAS = _GL2GL3
GL_ELEMENT_ARRAY_LENGTH_NV = _GL2GL3
GL_COMPRESSED_RG_RGTC2 = _GL2GL3
GL_PROXY_TEXTURE_1D_ARRAY = _GL2GL3
GL_UNPACK_LSB_FIRST = _GL2GL3
GL_TEXTURE_GATHER_SHADOW = _GL2GL3
GL_R16_SNORM = _GL2GL3
GL_FRAMEBUFFER_RENDERABLE = _GL2GL3
GL_NUM_VIRTUAL_PAGE_SIZES_ARB = _GL2GL3
GL_INT_IMAGE_2D_MULTISAMPLE = _GL2GL3
GL_IMAGE_1D = _GL2GL3
GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = _GL2GL3
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = _GL2GL3
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = _GL2GL3
GL_DRAW_BUFFER = _GL2GL3
GL_LINE = _GL2GL3
GL_CLIP_DISTANCE0 = _GL2GL3
GL_CLIP_DISTANCE1 = _GL2GL3
GL_CLIP_DISTANCE6 = _GL2GL3
GL_CLIP_DISTANCE7 = _GL2GL3
GL_CLIP_DISTANCE4 = _GL2GL3
GL_CLIP_DISTANCE5 = _GL2GL3
GL_CLIP_DISTANCE2 = _GL2GL3
GL_CLIP_DISTANCE3 = _GL2GL3
GL_BLUE_INTEGER = _GL2GL3
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = _GL2GL3
GL_PACK_COMPRESSED_BLOCK_DEPTH = _GL2GL3
GL_FILTER = _GL2GL3
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = _GL2GL3
GL_MAX_VERTEX_STREAMS = _GL2GL3
GL_VIEW_CLASS_8_BITS = _GL2GL3
GL_UNPACK_COMPRESSED_BLOCK_DEPTH = _GL2GL3
GL_DRAW_INDIRECT_ADDRESS_NV = _GL2GL3
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = _GL2GL3
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = _GL2GL3
GL_SAMPLER_1D = _GL2GL3
GL_CLAMP_READ_COLOR = _GL2GL3
GL_SRGB_WRITE = _GL2GL3
GL_UNSIGNED_INT_8_8_8_8_REV = _GL2GL3
GL_INTERNALFORMAT_ALPHA_TYPE = _GL2GL3
GL_INT_IMAGE_1D = _GL2GL3
GL_IMAGE_CLASS_10_10_10_2 = _GL2GL3
GL_TEXTURE_COMPRESSION_HINT = _GL2GL3
GL_VIEW_CLASS_RGTC2_RG = _GL2GL3
GL_SUBSAMPLE_DISTANCE_AMD = _GL2GL3
GL_COMPUTE_SHADER_INVOCATIONS_ARB = _GL2GL3
GL_VERTEX_ARRAY_ADDRESS_NV = _GL2GL3
GL_UNPACK_COMPRESSED_BLOCK_WIDTH = _GL2GL3
GL_MAX_CLIP_DISTANCES = _GL2GL3
GL_LINE_WIDTH_RANGE = _GL2GL3
GL_SET_AMD = _GL2GL3
GL_COMPRESSED_RED = _GL2GL3
GL_VERTEX_TEXTURE = _GL2GL3
GL_INTERNALFORMAT_GREEN_TYPE = _GL2GL3
GL_COMPRESSED_RGB = _GL2GL3
GL_UNPACK_COMPRESSED_BLOCK_SIZE = _GL2GL3
GL_UNSIGNED_INT_SAMPLER_1D = _GL2GL3
GL_VIEW_CLASS_32_BITS = _GL2GL3
GL_SHADER_IMAGE_LOAD = _GL2GL3
GL_PACK_LSB_FIRST = _GL2GL3
GL_IMAGE_2D_RECT = _GL2GL3
GL_UNSIGNED_INT_8_8_8_8 = _GL2GL3
GL_DEBUG_CATEGORY_DEPRECATION_AMD = _GL2GL3
GL_DEBUG_SEVERITY_HIGH_AMD = _GL2GL3
GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = _GL2GL3
GL_POLYGON_OFFSET_POINT = _GL2GL3
GL_UNSIGNED_BYTE_2_3_3_REV = _GL2GL3
GL_INTERNALFORMAT_STENCIL_TYPE = _GL2GL3
GL_UNSIGNED_SHORT_5_6_5_REV = _GL2GL3
GL_INTERNALFORMAT_RED_TYPE = _GL2GL3
GL_SAMPLER_1D_ARRAY = _GL2GL3
GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = _GL2GL3
GL_TEXTURE_BINDING_1D = _GL2GL3
GL_PRIMITIVE_RESTART = _GL2GL3
GL_TESS_EVALUATION_TEXTURE = _GL2GL3
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = _GL2GL3
GL_POLYGON_SMOOTH_HINT = _GL2GL3
GL_TEXTURE_SPARSE_ARB = _GL2GL3
GL_PACK_COMPRESSED_BLOCK_WIDTH = _GL2GL3
GL_MAX_IMAGE_SAMPLES = _GL2GL3
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = _GL2GL3
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = _GL2GL3
GL_CLEAR_BUFFER = _GL2GL3
GL_NORMAL_ARRAY_LENGTH_NV = _GL2GL3
GL_INT_SAMPLER_2D_RECT = _GL2GL3
GL_UNSIGNED_SHORT_1_5_5_5_REV = _GL2GL3
GL_VERTEX_PROGRAM_POINT_SIZE = _GL2GL3
GL_ELEMENT_ARRAY_ADDRESS_NV = _GL2GL3
GL_R16 = _GL2GL3
GL_UNSIGNED_INT_IMAGE_2D_RECT = _GL2GL3
GL_STENCIL_OP_VALUE_AMD = _GL2GL3
GL_INT_IMAGE_2D_RECT = _GL2GL3
GL_TEXTURE_SHADOW = _GL2GL3
GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = _GL2GL3
GL_TEXTURE_1D_ARRAY = _GL2GL3
GL_TEXTURE_SWIZZLE_RGBA = _GL2GL3
GL_VERTEX_SHADER_INVOCATIONS_ARB = _GL2GL3
GL_FIXED_ONLY = _GL2GL3
GL_RGBA16_SNORM = _GL2GL3
GL_SMOOTH_POINT_SIZE_GRANULARITY = _GL2GL3
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = _GL2GL3
GL_RGB16 = _GL2GL3
GL_RGB12 = _GL2GL3
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = _GL2GL3
GL_COLOR_RENDERABLE = _GL2GL3
GL_MAX_RECTANGLE_TEXTURE_SIZE = _GL2GL3
GL_INTERNALFORMAT_ALPHA_SIZE = _GL2GL3
GL_IMAGE_CLASS_4_X_8 = _GL2GL3
GL_IMAGE_2D_MULTISAMPLE_ARRAY = _GL2GL3
GL_CONTINUOUS_AMD = _GL2GL3
GL_BGR_INTEGER = _GL2GL3
GL_INT_SAMPLER_1D_ARRAY = _GL2GL3
GL_IMAGE_CLASS_1_X_8 = _GL2GL3
GL_PROXY_TEXTURE_2D_ARRAY = _GL2GL3
GL_BGRA_INTEGER = _GL2GL3
GL_INTERNALFORMAT_STENCIL_SIZE = _GL2GL3
GL_GEOMETRY_TEXTURE = _GL2GL3
GL_TEXTURE_BINDING_1D_ARRAY = _GL2GL3
GL_VERTEX_ARRAY_LENGTH_NV = _GL2GL3
GL_MAX_SHADER_BUFFER_ADDRESS_NV = _GL2GL3
GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = _GL2GL3
GL_FACTOR_MAX_AMD = _GL2GL3
GL_COMPUTE_TEXTURE = _GL2GL3
GL_PROXY_TEXTURE_1D = _GL2GL3
GL_PROXY_TEXTURE_3D = _GL2GL3
GL_DOUBLE = _GL2GL3
GL_PROXY_TEXTURE_2D = _GL2GL3
GL_DEPTH_CLAMP_NEAR_AMD = _GL2GL3
GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = _GL2GL3
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = _GL2GL3
GL_FRAMEBUFFER_BLEND = _GL2GL3
GL_IMAGE_2D_MULTISAMPLE = _GL2GL3
GL_FULL_SUPPORT = _GL2GL3
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = _GL2GL3
GL_DRAW_INDIRECT_LENGTH_NV = _GL2GL3
GL_SAMPLER_2D_RECT = _GL2GL3
GL_STENCIL_INDEX16 = _GL2GL3
GL_MANUAL_GENERATE_MIPMAP = _GL2GL3
GL_INTERNALFORMAT_DEPTH_TYPE = _GL2GL3
GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = _GL2GL3
GL_FRONT_LEFT = _GL2GL3
GL_PACK_SKIP_IMAGES = _GL2GL3
GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = _GL2GL3
GL_PRIMITIVES_SUBMITTED_ARB = _GL2GL3
GL_INTERNALFORMAT_SHARED_SIZE = _GL2GL3
GL_COLOR_ENCODING = _GL2GL3
GL_DEBUG_LOGGED_MESSAGES_AMD = _GL2GL3
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = _GL2GL3
GL_PROXY_TEXTURE_CUBE_MAP = _GL2GL3
GL_CLIPPING_INPUT_PRIMITIVES_ARB = _GL2GL3
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = _GL2GL3
GL_VIEW_CLASS_S3TC_DXT3_RGBA = _GL2GL3
GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = _GL2GL3
GL_SCALED_RESOLVE_FASTEST_EXT = _GL2GL3
GL_TEXTURE_GATHER = _GL2GL3
GL_POINT_SIZE_GRANULARITY = _GL2GL3
GL_FRAGMENT_SHADER_INVOCATIONS_ARB = _GL2GL3
GL_POLYGON_SMOOTH = _GL2GL3
GL_BUFFER_GPU_ADDRESS_NV = _GL2GL3
GL_DEBUG_CATEGORY_OTHER_AMD = _GL2GL3
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = _GL2GL3
GL_MAX_DEPTH = _GL2GL3
GL_IMAGE_TEXEL_SIZE = _GL2GL3
GL_SPARSE_BUFFER_PAGE_SIZE_ARB = _GL2GL3
GL_INTERNALFORMAT_BLUE_TYPE = _GL2GL3
GL_INTERNALFORMAT_DEPTH_SIZE = _GL2GL3
GL_VIEW_CLASS_128_BITS = _GL2GL3
GL_FACTOR_MIN_AMD = _GL2GL3
GL_TEXTURE_RECTANGLE = _GL2GL3
GL_BACK_RIGHT = _GL2GL3
GL_POINT = _GL2GL3
GL_TEXTURE_1D = _GL2GL3
GL_FRAMEBUFFER_RENDERABLE_LAYERED = _GL2GL3
GL_SHADER_IMAGE_ATOMIC = _GL2GL3
GL_POINT_SIZE_RANGE = _GL2GL3
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = _GL2GL3
GL_GET_TEXTURE_IMAGE_FORMAT = _GL2GL3
GL_COLOR_COMPONENTS = _GL2GL3
GL_LEFT = _GL2GL3
GL_UNSIGNED_INT_IMAGE_1D_ARRAY = _GL2GL3
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = _GL2GL3
GL_STENCIL_RENDERABLE = _GL2GL3
GL_INT_SAMPLER_1D = _GL2GL3
GL_UNSIGNED_INT_IMAGE_1D = _GL2GL3
GL_VIEW_CLASS_S3TC_DXT1_RGBA = _GL2GL3
GL_MAX_HEIGHT = _GL2GL3
GL_IMAGE_1D_ARRAY = _GL2GL3
GL_SYNC_X11_FENCE_EXT = _GL2GL3
GL_TEXTURE_COMPRESSED_BLOCK_SIZE = _GL2GL3
GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = _GL2GL3
GL_SAMPLER_1D_ARRAY_SHADOW = _GL2GL3
GL_TESS_CONTROL_TEXTURE = _GL2GL3
GL_TESSELLATION_FACTOR_AMD = _GL2GL3
GL_LOWER_LEFT = _GL2GL3
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = _GL2GL3
GL_PACK_IMAGE_HEIGHT = _GL2GL3
GL_UNSIGNED_BYTE_3_3_2 = _GL2GL3
GL_GPU_ADDRESS_NV = _GL2GL3
GL_PACK_COMPRESSED_BLOCK_SIZE = _GL2GL3
GL_TEXTURE_SRGB_DECODE_EXT = _GL2GL3
GL_DECODE_EXT = _GL2GL3
GL_RGBA16 = _GL2GL3
GL_TEXTURE_BINDING_RECTANGLE = _GL2GL3
GL_RGBA12 = _GL2GL3
GL_READ_PIXELS_TYPE = _GL2GL3
GL_SCALED_RESOLVE_NICEST_EXT = _GL2GL3
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = _GL2GL3
GL_DEPTH_RENDERABLE = _GL2GL3
GL_TEXTURE_CUBE_MAP_SEAMLESS = _GL2GL3
GL_TEXTURE_IMAGE_TYPE = _GL2GL3
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = _GL2GL3
GL_UPPER_LEFT = _GL2GL3
GL_SKIP_DECODE_EXT = _GL2GL3
GL_FILL = _GL2GL3
GL_STEREO = _GL2GL3
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = _GL2GL3
GL_R3_G3_B2 = _GL2GL3
GL_SAMPLER_2D_RECT_SHADOW = _GL2GL3
GL_INTERNALFORMAT_BLUE_SIZE = _GL2GL3
GL_VIRTUAL_PAGE_SIZE_X_ARB = _GL2GL3
GL_VIEW_CLASS_BPTC_UNORM = _GL2GL3
GL_UNSIGNED_SHORT_4_4_4_4_REV = _GL2GL3
GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = _GL2GL3
GL_VERTICES_SUBMITTED_ARB = _GL2GL3
GL_MAX_VARYING_FLOATS = _GL2GL3
GL_STENCIL_BACK_OP_VALUE_AMD = _GL2GL3
GL_UNPACK_SWAP_BYTES = _GL2GL3
GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = _GL2GL3
GL_COLOR_ARRAY_ADDRESS_NV = _GL2GL3
GL_COMPRESSED_RED_RGTC1 = _GL2GL3
GL_GET_TEXTURE_IMAGE_TYPE = _GL2GL3
GL_MAX_COMBINED_DIMENSIONS = _GL2GL3
GL_COMPRESSED_SIGNED_RG_RGTC2 = _GL2GL3
GL_INTERNALFORMAT_SUPPORTED = _GL2GL3
GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = _GL2GL3
GL_SAMPLER_1D_SHADOW = _GL2GL3
GL_VIEW_CLASS_64_BITS = _GL2GL3
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = _GL2GL3
GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = _GL2GL3
GL_EDGE_FLAG_ARRAY_LENGTH_NV = _GL2GL3
GL_COLOR_ARRAY_LENGTH_NV = _GL2GL3
GL_DEBUG_CATEGORY_PERFORMANCE_AMD = _GL2GL3
GL_TEXTURE_COORD_ARRAY_LENGTH_NV = _GL2GL3
GL_COMPRESSED_SIGNED_RED_RGTC1 = _GL2GL3
GL_POINT_SPRITE_COORD_ORIGIN = _GL2GL3
GL_DEBUG_SEVERITY_MEDIUM_AMD = _GL2GL3
GL_ELEMENT_ARRAY_UNIFIED_NV = _GL2GL3
GL_READ_PIXELS_FORMAT = _GL2GL3
GL_MIPMAP = _GL2GL3
GL_READ_PIXELS = _GL2GL3
GL_IMAGE_PIXEL_FORMAT = _GL2GL3
GL_SRGB_READ = _GL2GL3
GL_IMAGE_PIXEL_TYPE = _GL2GL3
GL_TESSELLATION_MODE_AMD = _GL2GL3
GL_RG16 = _GL2GL3
GL_VIEW_CLASS_24_BITS = _GL2GL3
GL_COMPRESSED_RGBA = _GL2GL3
GL_RG16_SNORM = _GL2GL3
GL_DEBUG_CATEGORY_APPLICATION_AMD = _GL2GL3
GL_VIEW_CLASS_S3TC_DXT5_RGBA = _GL2GL3
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = _GL2GL3
GL_VIEW_CLASS_48_BITS = _GL2GL3
GL_MAX_LAYERS = _GL2GL3
GL_VIRTUAL_PAGE_SIZE_Z_ARB = _GL2GL3
GL_COMPRESSED_RG = _GL2GL3
GL_RGB16_SNORM = _GL2GL3
GL_DEBUG_SEVERITY_LOW_AMD = _GL2GL3
GL_PACK_COMPRESSED_BLOCK_HEIGHT = _GL2GL3
GL_TEXTURE_COMPRESSED_IMAGE_SIZE = _GL2GL3
GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = _GL2GL3
GL_DOUBLEBUFFER = _GL2GL3
GL_MAX_WIDTH = _GL2GL3
GL_FOG_COORD_ARRAY_ADDRESS_NV = _GL2GL3
GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = _GL2GL3
GL_TEXTURE_IMAGE_FORMAT = _GL2GL3
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = _GL2GL3
GL_CAVEAT_SUPPORT = _GL2GL3
GL_IMAGE_CLASS_1_X_16 = _GL2GL3
GL_REPLACE_VALUE_AMD = _GL2GL3
GL_IMAGE_CLASS_1_X_32 = _GL2GL3
GL_SPARSE_STORAGE_BIT_ARB = _GL2GL3
GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = _GL2GL3
GL_RIGHT = _GL2GL3
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = _GL2GL3
GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = _GL2GL3
GL_PROVOKING_VERTEX = _GL2GL3
GL_VIRTUAL_PAGE_SIZE_Y_ARB = _GL2GL3
GL_AUTO_GENERATE_MIPMAP = _GL2GL3
GL_VIEW_COMPATIBILITY_CLASS = _GL2GL3
GL_SMOOTH_LINE_WIDTH_GRANULARITY = _GL2GL3
GL_FOG_COORD_ARRAY_LENGTH_NV = _GL2GL3


def glActiveTexture(texture: int) -> None:
    """

    """


def glBindBuffer(target: int, buffer: int) -> None:
    """

    """


def glBindFramebuffer(target: int, framebuffer: int) -> None:
    """

    """


def glBindRenderbuffer(target: int, renderbuffer: int) -> None:
    """

    """


def glBindTexture(target: int, texture: int) -> None:
    """

    """


def glBlendEquation(mode: int) -> None:
    """

    """


def glBlendEquationSeparate(modeRGB: int, modeAlpha: int) -> None:
    """

    """


def glBlendFunc(sfactor: int, dfactor: int) -> None:
    """

    """


def glBlendFuncSeparate(sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int,
                        dfactorAlpha: int) -> None:
    """

    """


def glBufferData(target: int, size: long, data: Buffer, usage: int) -> None:
    """

    """


def glBufferSubData(target: int, offset: long, size: long,
                    data: Buffer) -> None:
    """

    """


def glCheckFramebufferStatus(target: int) -> int:
    """

    """


def glClear(mask: int) -> None:
    """

    """


def glClearColor(red: float, green: float, blue: float, alpha: float) -> None:
    """

    """


def glClearDepthf(d: float) -> None:
    """

    """


def glClearStencil(s: int) -> None:
    """

    """


def glColorMask(red: bool, green: bool, blue: bool, alpha: bool) -> None:
    """

    """


@overload
def glCompressedTexImage2D(target: int, level: int, internalformat: int,
                           width: int, height: int, border: int,
                           imageSize: int, data: Buffer) -> None:
    """

    """


@overload
def glCompressedTexImage2D(target: int, level: int, internalformat: int,
                           width: int, height: int, border: int,
                           imageSize: int, data_buffer_offset: long) -> None:
    """

    """


@overload
def glCompressedTexSubImage2D(target: int, level: int, xoffset: int,
                              yoffset: int, width: int, height: int,
                              format: int, imageSize: int,
                              data: Buffer) -> None:
    """

    """


@overload
def glCompressedTexSubImage2D(target: int, level: int, xoffset: int,
                              yoffset: int, width: int, height: int,
                              format: int, imageSize: int,
                              data_buffer_offset: long) -> None:
    """

    """


def glCopyTexImage2D(target: int, level: int, internalformat: int, x: int,
                     y: int, width: int, height: int, border: int) -> None:
    """

    """


def glCopyTexSubImage2D(target: int, level: int, xoffset: int, yoffset: int,
                        x: int, y: int, width: int, height: int) -> None:
    """

    """


def glCullFace(mode: int) -> None:
    """

    """


@overload
def glDeleteBuffers(n: int, buffers: IntBuffer) -> None:
    """

    """


@overload
def glDeleteBuffers(n: int, buffers: Int1D, buffers_offset: int) -> None:
    """

    """


@overload
def glDeleteFramebuffers(n: int, framebuffers: IntBuffer) -> None:
    """

    """


@overload
def glDeleteFramebuffers(n: int, framebuffers: Int1D,
                         framebuffers_offset: int) -> None:
    """

    """


@overload
def glDeleteRenderbuffers(n: int, renderbuffers: IntBuffer) -> None:
    """

    """


@overload
def glDeleteRenderbuffers(n: int, renderbuffers: Int1D,
                          renderbuffers_offset: int) -> None:
    """

    """


@overload
def glDeleteTextures(n: int, textures: IntBuffer) -> None:
    """

    """


@overload
def glDeleteTextures(n: int, textures: Int1D, textures_offset: int) -> None:
    """

    """


def glDepthFunc(func: int) -> None:
    """

    """


def glDepthMask(flag: bool) -> None:
    """

    """


def glDepthRangef(n: float, f: float) -> None:
    """

    """


def glDisable(cap: int) -> None:
    """

    """


def glDrawArrays(mode: int, first: int, count: int) -> None:
    """

    """


@overload
def glDrawElements(mode: int, count: int, type: int,
                   indices_buffer_offset: long) -> None:
    """

    """


def glEnable(cap: int) -> None:
    """

    """


def glFinish() -> None:
    """

    """


def glFlush() -> None:
    """

    """


def glFramebufferRenderbuffer(target: int, attachment: int,
                              renderbuffertarget: int,
                              renderbuffer: int) -> None:
    """

    """


def glFramebufferTexture2D(target: int, attachment: int, textarget: int,
                           texture: int, level: int) -> None:
    """

    """


def glFrontFace(mode: int) -> None:
    """

    """


@overload
def glGenBuffers(n: int, buffers: IntBuffer) -> None:
    """

    """


@overload
def glGenBuffers(n: int, buffers: Int1D, buffers_offset: int) -> None:
    """

    """


def glGenerateMipmap(target: int) -> None:
    """

    """


@overload
def glGenFramebuffers(n: int, framebuffers: IntBuffer) -> None:
    """

    """


@overload
def glGenFramebuffers(n: int, framebuffers: Int1D,
                      framebuffers_offset: int) -> None:
    """

    """


@overload
def glGenRenderbuffers(n: int, renderbuffers: IntBuffer) -> None:
    """

    """


@overload
def glGenRenderbuffers(n: int, renderbuffers: Int1D,
                       renderbuffers_offset: int) -> None:
    """

    """


@overload
def glGenTextures(n: int, textures: IntBuffer) -> None:
    """

    """


@overload
def glGenTextures(n: int, textures: Int1D, textures_offset: int) -> None:
    """

    """


@overload
def glGetBooleanv(pname: int, data: ByteBuffer) -> None:
    """

    """


@overload
def glGetBooleanv(pname: int, data: Byte1D, data_offset: int) -> None:
    """

    """


@overload
def glGetBufferParameteriv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetBufferParameteriv(target: int, pname: int, params: Int1D,
                           params_offset: int) -> None:
    """

    """


def glGetError() -> int:
    """

    """


@overload
def glGetFloatv(pname: int, data: FloatBuffer) -> None:
    """

    """


@overload
def glGetFloatv(pname: int, data: Float1D, data_offset: int) -> None:
    """

    """


@overload
def glGetFramebufferAttachmentParameteriv(target: int, attachment: int,
                                          pname: int,
                                          params: IntBuffer) -> None:
    """

    """


@overload
def glGetFramebufferAttachmentParameteriv(target: int, attachment: int,
                                          pname: int, params: Int1D,
                                          params_offset: int) -> None:
    """

    """


@overload
def glGetIntegerv(pname: int, data: IntBuffer) -> None:
    """

    """


@overload
def glGetIntegerv(pname: int, data: Int1D, data_offset: int) -> None:
    """

    """


@overload
def glGetRenderbufferParameteriv(target: int, pname: int,
                                 params: IntBuffer) -> None:
    """

    """


@overload
def glGetRenderbufferParameteriv(target: int, pname: int, params: Int1D,
                                 params_offset: int) -> None:
    """

    """


def glGetString(name: int) -> String:
    """

    """


@overload
def glGetTexParameterfv(target: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetTexParameterfv(target: int, pname: int, params: Float1D,
                        params_offset: int) -> None:
    """

    """


@overload
def glGetTexParameteriv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetTexParameteriv(target: int, pname: int, params: Int1D,
                        params_offset: int) -> None:
    """

    """


def glHint(target: int, mode: int) -> None:
    """

    """


def glIsBuffer(buffer: int) -> bool:
    """

    """


def glIsEnabled(cap: int) -> bool:
    """

    """


def glIsFramebuffer(framebuffer: int) -> bool:
    """

    """


def glIsRenderbuffer(renderbuffer: int) -> bool:
    """

    """


def glIsTexture(texture: int) -> bool:
    """

    """


def glLineWidth(width: float) -> None:
    """

    """


def glPixelStorei(pname: int, param: int) -> None:
    """

    """


def glPolygonOffset(factor: float, units: float) -> None:
    """

    """


@overload
def glReadPixels(x: int, y: int, width: int, height: int, format: int,
                 type: int, pixels: Buffer) -> None:
    """

    """


@overload
def glReadPixels(x: int, y: int, width: int, height: int, format: int,
                 type: int, pixels_buffer_offset: long) -> None:
    """

    """


def glRenderbufferStorage(target: int, internalformat: int, width: int,
                          height: int) -> None:
    """

    """


def glSampleCoverage(value: float, invert: bool) -> None:
    """

    """


def glScissor(x: int, y: int, width: int, height: int) -> None:
    """

    """


def glStencilFunc(func: int, ref: int, mask: int) -> None:
    """

    """


def glStencilMask(mask: int) -> None:
    """

    """


def glStencilOp(fail: int, zfail: int, zpass: int) -> None:
    """

    """


@overload
def glTexImage2D(target: int, level: int, internalformat: int, width: int,
                 height: int, border: int, format: int, type: int,
                 pixels: Buffer) -> None:
    """

    """


@overload
def glTexImage2D(target: int, level: int, internalformat: int, width: int,
                 height: int, border: int, format: int, type: int,
                 pixels_buffer_offset: long) -> None:
    """

    """


def glTexParameterf(target: int, pname: int, param: float) -> None:
    """

    """


@overload
def glTexParameterfv(target: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glTexParameterfv(target: int, pname: int, params: Float1D,
                     params_offset: int) -> None:
    """

    """


def glTexParameteri(target: int, pname: int, param: int) -> None:
    """

    """


@overload
def glTexParameteriv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glTexParameteriv(target: int, pname: int, params: Int1D,
                     params_offset: int) -> None:
    """

    """


@overload
def glTexSubImage2D(target: int, level: int, xoffset: int, yoffset: int,
                    width: int, height: int, format: int, type: int,
                    pixels: Buffer) -> None:
    """

    """


@overload
def glTexSubImage2D(target: int, level: int, xoffset: int, yoffset: int,
                    width: int, height: int, format: int, type: int,
                    pixels_buffer_offset: long) -> None:
    """

    """


def glViewport(x: int, y: int, width: int, height: int) -> None:
    """

    """


def glTexStorage1D(target: int, levels: int, internalformat: int,
                   width: int) -> None:
    """

    """


def glTexStorage2D(target: int, levels: int, internalformat: int, width: int,
                   height: int) -> None:
    """

    """


def glTexStorage3D(target: int, levels: int, internalformat: int, width: int,
                   height: int, depth: int) -> None:
    """

    """


def glTextureStorage1DEXT(texture: int, target: int, levels: int,
                          internalformat: int, width: int) -> None:
    """

    """


def glTextureStorage2DEXT(texture: int, target: int, levels: int,
                          internalformat: int, width: int,
                          height: int) -> None:
    """

    """


def glTextureStorage3DEXT(texture: int, target: int, levels: int,
                          internalformat: int, width: int, height: int,
                          depth: int) -> None:
    """

    """


def glMapBuffer(target: int, access: int) -> ByteBuffer:
    """

    """


def glUnmapBuffer(target: int) -> bool:
    """

    """


def glRenderbufferStorageMultisample(target: int, samples: int,
                                     internalformat: int, width: int,
                                     height: int) -> None:
    """

    """


def glMapBufferRange(target: int, offset: long, length: long,
                     access: int) -> ByteBuffer:
    """

    """


def glFlushMappedBufferRange(target: int, offset: long, length: long) -> None:
    """

    """


def glGetGraphicsResetStatus() -> int:
    """

    """


def glReadnPixels(x: int, y: int, width: int, height: int, format: int,
                  type: int, bufSize: int, data: Buffer) -> None:
    """

    """


@overload
def glGetnUniformfv(program: int, location: int, bufSize: int,
                    params: FloatBuffer) -> None:
    """

    """


@overload
def glGetnUniformfv(program: int, location: int, bufSize: int, params: Float1D,
                    params_offset: int) -> None:
    """

    """


@overload
def glGetnUniformiv(program: int, location: int, bufSize: int,
                    params: IntBuffer) -> None:
    """

    """


@overload
def glGetnUniformiv(program: int, location: int, bufSize: int, params: Int1D,
                    params_offset: int) -> None:
    """

    """


def isGL() -> bool:
    """

    """


def isGL4bc() -> bool:
    """

    """


def isGL4() -> bool:
    """

    """


def isGL3bc() -> bool:
    """

    """


def isGL3() -> bool:
    """

    """


def isGL2() -> bool:
    """

    """


def isGLES1() -> bool:
    """

    """


def isGLES2() -> bool:
    """

    """


def isGLES3() -> bool:
    """

    """


def isGLES() -> bool:
    """

    """


def isGL2ES1() -> bool:
    """

    """


def isGL2ES2() -> bool:
    """

    """


def isGL2ES3() -> bool:
    """

    """


def isGL3ES3() -> bool:
    """

    """


def isGL4ES3() -> bool:
    """

    """


def isGL2GL3() -> bool:
    """

    """


def isGL4core() -> bool:
    """

    """


def isGL3core() -> bool:
    """

    """


def isGLcore() -> bool:
    """

    """


def isGLES2Compatible() -> bool:
    """

    """


def isGLES3Compatible() -> bool:
    """

    """


def isGLES31Compatible() -> bool:
    """

    """


def isGLES32Compatible() -> bool:
    """

    """


def isFunctionAvailable(glFunctionName: String) -> bool:
    """

    """


def isExtensionAvailable(glExtensionName: String) -> bool:
    """

    """


def isNPOTTextureAvailable() -> bool:
    """

    """


def isTextureFormatBGRA8888Available() -> bool:
    """

    """


def glClearDepth(depth: double) -> None:
    """

    """


def glDepthRange(zNear: double, zFar: double) -> None:
    """

    """


def isVBOArrayBound() -> bool:
    """

    """


def isVBOElementArrayBound() -> bool:
    """

    """


@overload
def glLightfv(light: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glLightfv(light: int, pname: int, params: Float1D,
              params_offset: int) -> None:
    """

    """


def glMaterialf(face: int, pname: int, param: float) -> None:
    """

    """


@overload
def glMaterialfv(face: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glMaterialfv(face: int, pname: int, params: Float1D,
                 params_offset: int) -> None:
    """

    """


def glColor4f(red: float, green: float, blue: float, alpha: float) -> None:
    """

    """


def glShadeModel(mode: int) -> None:
    """

    """


def glMatrixMode(mode: int) -> None:
    """

    """


def glPushMatrix() -> None:
    """

    """


def glPopMatrix() -> None:
    """

    """


def glLoadIdentity() -> None:
    """

    """


@overload
def glLoadMatrixf(m: FloatBuffer) -> None:
    """

    """


@overload
def glLoadMatrixf(m: Float1D, m_offset: int) -> None:
    """

    """


@overload
def glMultMatrixf(m: FloatBuffer) -> None:
    """

    """


@overload
def glMultMatrixf(m: Float1D, m_offset: int) -> None:
    """

    """


def glTranslatef(x: float, y: float, z: float) -> None:
    """

    """


def glRotatef(angle: float, x: float, y: float, z: float) -> None:
    """

    """


def glScalef(x: float, y: float, z: float) -> None:
    """

    """


def glOrthof(left: float, right: float, bottom: float, top: float,
             zNear: float, zFar: float) -> None:
    """

    """


def glFrustumf(left: float, right: float, bottom: float, top: float,
               zNear: float, zFar: float) -> None:
    """

    """


def glEnableClientState(arrayName: int) -> None:
    """

    """


def glDisableClientState(arrayName: int) -> None:
    """

    """


@overload
def glVertexPointer(array: GLArrayData) -> None:
    """

    """


@overload
def glVertexPointer(size: int, type: int, stride: int,
                    pointer: Buffer) -> None:
    """

    """


@overload
def glVertexPointer(size: int, type: int, stride: int,
                    pointer_buffer_offset: long) -> None:
    """

    """


@overload
def glColorPointer(array: GLArrayData) -> None:
    """

    """


@overload
def glColorPointer(size: int, type: int, stride: int, pointer: Buffer) -> None:
    """

    """


@overload
def glColorPointer(size: int, type: int, stride: int,
                   pointer_buffer_offset: long) -> None:
    """

    """


@overload
def glNormalPointer(array: GLArrayData) -> None:
    """

    """


@overload
def glNormalPointer(type: int, stride: int, pointer: Buffer) -> None:
    """

    """


@overload
def glNormalPointer(type: int, stride: int,
                    pointer_buffer_offset: long) -> None:
    """

    """


@overload
def glTexCoordPointer(array: GLArrayData) -> None:
    """

    """


@overload
def glTexCoordPointer(size: int, type: int, stride: int,
                      pointer: Buffer) -> None:
    """

    """


@overload
def glTexCoordPointer(size: int, type: int, stride: int,
                      pointer_buffer_offset: long) -> None:
    """

    """


def glClearIndex(c: float) -> None:
    """

    """


def glIndexMask(mask: int) -> None:
    """

    """


def glLineStipple(factor: int, pattern: short) -> None:
    """

    """


@overload
def glPolygonStipple(mask: ByteBuffer) -> None:
    """

    """


@overload
def glPolygonStipple(mask: Byte1D, mask_offset: int) -> None:
    """

    """


@overload
def glGetPolygonStipple(mask: ByteBuffer) -> None:
    """

    """


@overload
def glGetPolygonStipple(mask: Byte1D, mask_offset: int) -> None:
    """

    """


def glEdgeFlag(flag: bool) -> None:
    """

    """


@overload
def glEdgeFlagv(flag: ByteBuffer) -> None:
    """

    """


@overload
def glEdgeFlagv(flag: Byte1D, flag_offset: int) -> None:
    """

    """


@overload
def glClipPlane(plane: int, equation: DoubleBuffer) -> None:
    """

    """


@overload
def glClipPlane(plane: int, equation: Double1D, equation_offset: int) -> None:
    """

    """


@overload
def glGetClipPlane(plane: int, equation: DoubleBuffer) -> None:
    """

    """


@overload
def glGetClipPlane(plane: int, equation: Double1D,
                   equation_offset: int) -> None:
    """

    """


def glPushAttrib(mask: int) -> None:
    """

    """


def glPopAttrib() -> None:
    """

    """


def glRenderMode(mode: int) -> int:
    """

    """


def glClearAccum(red: float, green: float, blue: float, alpha: float) -> None:
    """

    """


def glAccum(op: int, value: float) -> None:
    """

    """


@overload
def glLoadMatrixd(m: DoubleBuffer) -> None:
    """

    """


@overload
def glLoadMatrixd(m: Double1D, m_offset: int) -> None:
    """

    """


@overload
def glMultMatrixd(m: DoubleBuffer) -> None:
    """

    """


@overload
def glMultMatrixd(m: Double1D, m_offset: int) -> None:
    """

    """


def glRotated(angle: double, x: double, y: double, z: double) -> None:
    """

    """


def glScaled(x: double, y: double, z: double) -> None:
    """

    """


def glTranslated(x: double, y: double, z: double) -> None:
    """

    """


def glIsList(list: int) -> bool:
    """

    """


def glDeleteLists(list: int, range: int) -> None:
    """

    """


def glGenLists(range: int) -> int:
    """

    """


def glNewList(list: int, mode: int) -> None:
    """

    """


def glEndList() -> None:
    """

    """


def glCallList(list: int) -> None:
    """

    """


def glCallLists(n: int, type: int, lists: Buffer) -> None:
    """

    """


def glListBase(base: int) -> None:
    """

    """


def glBegin(mode: int) -> None:
    """

    """


def glEnd() -> None:
    """

    """


def glVertex2d(x: double, y: double) -> None:
    """

    """


def glVertex2f(x: float, y: float) -> None:
    """

    """


def glVertex2i(x: int, y: int) -> None:
    """

    """


def glVertex2s(x: short, y: short) -> None:
    """

    """


def glVertex3d(x: double, y: double, z: double) -> None:
    """

    """


def glVertex3f(x: float, y: float, z: float) -> None:
    """

    """


def glVertex3i(x: int, y: int, z: int) -> None:
    """

    """


def glVertex3s(x: short, y: short, z: short) -> None:
    """

    """


def glVertex4d(x: double, y: double, z: double, w: double) -> None:
    """

    """


def glVertex4f(x: float, y: float, z: float, w: float) -> None:
    """

    """


def glVertex4i(x: int, y: int, z: int, w: int) -> None:
    """

    """


def glVertex4s(x: short, y: short, z: short, w: short) -> None:
    """

    """


@overload
def glVertex2dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertex2dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex2fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glVertex2fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex2iv(v: IntBuffer) -> None:
    """

    """


@overload
def glVertex2iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex2sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glVertex2sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex3dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertex3dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex3fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glVertex3fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex3iv(v: IntBuffer) -> None:
    """

    """


@overload
def glVertex3iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex3sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glVertex3sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex4dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertex4dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex4fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glVertex4fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex4iv(v: IntBuffer) -> None:
    """

    """


@overload
def glVertex4iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertex4sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glVertex4sv(v: Short1D, v_offset: int) -> None:
    """

    """


def glNormal3b(nx: byte, ny: byte, nz: byte) -> None:
    """

    """


def glNormal3d(nx: double, ny: double, nz: double) -> None:
    """

    """


def glNormal3i(nx: int, ny: int, nz: int) -> None:
    """

    """


def glNormal3s(nx: short, ny: short, nz: short) -> None:
    """

    """


@overload
def glNormal3bv(v: ByteBuffer) -> None:
    """

    """


@overload
def glNormal3bv(v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glNormal3dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glNormal3dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glNormal3fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glNormal3fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glNormal3iv(v: IntBuffer) -> None:
    """

    """


@overload
def glNormal3iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glNormal3sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glNormal3sv(v: Short1D, v_offset: int) -> None:
    """

    """


def glIndexd(c: double) -> None:
    """

    """


def glIndexf(c: float) -> None:
    """

    """


def glIndexi(c: int) -> None:
    """

    """


def glIndexs(c: short) -> None:
    """

    """


@overload
def glIndexdv(c: DoubleBuffer) -> None:
    """

    """


@overload
def glIndexdv(c: Double1D, c_offset: int) -> None:
    """

    """


@overload
def glIndexfv(c: FloatBuffer) -> None:
    """

    """


@overload
def glIndexfv(c: Float1D, c_offset: int) -> None:
    """

    """


@overload
def glIndexiv(c: IntBuffer) -> None:
    """

    """


@overload
def glIndexiv(c: Int1D, c_offset: int) -> None:
    """

    """


@overload
def glIndexsv(c: ShortBuffer) -> None:
    """

    """


@overload
def glIndexsv(c: Short1D, c_offset: int) -> None:
    """

    """


def glColor3b(red: byte, green: byte, blue: byte) -> None:
    """

    """


def glColor3d(red: double, green: double, blue: double) -> None:
    """

    """


def glColor3f(red: float, green: float, blue: float) -> None:
    """

    """


def glColor3i(red: int, green: int, blue: int) -> None:
    """

    """


def glColor3s(red: short, green: short, blue: short) -> None:
    """

    """


def glColor3ub(red: byte, green: byte, blue: byte) -> None:
    """

    """


def glColor3ui(red: int, green: int, blue: int) -> None:
    """

    """


def glColor3us(red: short, green: short, blue: short) -> None:
    """

    """


def glColor4b(red: byte, green: byte, blue: byte, alpha: byte) -> None:
    """

    """


def glColor4d(red: double, green: double, blue: double, alpha: double) -> None:
    """

    """


def glColor4i(red: int, green: int, blue: int, alpha: int) -> None:
    """

    """


def glColor4s(red: short, green: short, blue: short, alpha: short) -> None:
    """

    """


def glColor4ui(red: int, green: int, blue: int, alpha: int) -> None:
    """

    """


def glColor4us(red: short, green: short, blue: short, alpha: short) -> None:
    """

    """


@overload
def glColor3bv(v: ByteBuffer) -> None:
    """

    """


@overload
def glColor3bv(v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glColor3dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glColor3dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glColor3fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glColor3fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glColor3iv(v: IntBuffer) -> None:
    """

    """


@overload
def glColor3iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glColor3sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glColor3sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glColor3ubv(v: ByteBuffer) -> None:
    """

    """


@overload
def glColor3ubv(v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glColor3uiv(v: IntBuffer) -> None:
    """

    """


@overload
def glColor3uiv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glColor3usv(v: ShortBuffer) -> None:
    """

    """


@overload
def glColor3usv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glColor4bv(v: ByteBuffer) -> None:
    """

    """


@overload
def glColor4bv(v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glColor4dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glColor4dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glColor4fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glColor4fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glColor4iv(v: IntBuffer) -> None:
    """

    """


@overload
def glColor4iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glColor4sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glColor4sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glColor4ubv(v: ByteBuffer) -> None:
    """

    """


@overload
def glColor4ubv(v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glColor4uiv(v: IntBuffer) -> None:
    """

    """


@overload
def glColor4uiv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glColor4usv(v: ShortBuffer) -> None:
    """

    """


@overload
def glColor4usv(v: Short1D, v_offset: int) -> None:
    """

    """


def glTexCoord1d(s: double) -> None:
    """

    """


def glTexCoord1f(s: float) -> None:
    """

    """


def glTexCoord1i(s: int) -> None:
    """

    """


def glTexCoord1s(s: short) -> None:
    """

    """


def glTexCoord2d(s: double, t: double) -> None:
    """

    """


def glTexCoord2f(s: float, t: float) -> None:
    """

    """


def glTexCoord2i(s: int, t: int) -> None:
    """

    """


def glTexCoord2s(s: short, t: short) -> None:
    """

    """


def glTexCoord3d(s: double, t: double, r: double) -> None:
    """

    """


def glTexCoord3f(s: float, t: float, r: float) -> None:
    """

    """


def glTexCoord3i(s: int, t: int, r: int) -> None:
    """

    """


def glTexCoord3s(s: short, t: short, r: short) -> None:
    """

    """


def glTexCoord4d(s: double, t: double, r: double, q: double) -> None:
    """

    """


def glTexCoord4f(s: float, t: float, r: float, q: float) -> None:
    """

    """


def glTexCoord4i(s: int, t: int, r: int, q: int) -> None:
    """

    """


def glTexCoord4s(s: short, t: short, r: short, q: short) -> None:
    """

    """


@overload
def glTexCoord1dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glTexCoord1dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord1fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glTexCoord1fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord1iv(v: IntBuffer) -> None:
    """

    """


@overload
def glTexCoord1iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord1sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glTexCoord1sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord2dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glTexCoord2dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord2fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glTexCoord2fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord2iv(v: IntBuffer) -> None:
    """

    """


@overload
def glTexCoord2iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord2sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glTexCoord2sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord3dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glTexCoord3dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord3fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glTexCoord3fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord3iv(v: IntBuffer) -> None:
    """

    """


@overload
def glTexCoord3iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord3sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glTexCoord3sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord4dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glTexCoord4dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord4fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glTexCoord4fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord4iv(v: IntBuffer) -> None:
    """

    """


@overload
def glTexCoord4iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glTexCoord4sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glTexCoord4sv(v: Short1D, v_offset: int) -> None:
    """

    """


def glRasterPos2d(x: double, y: double) -> None:
    """

    """


def glRasterPos2f(x: float, y: float) -> None:
    """

    """


def glRasterPos2i(x: int, y: int) -> None:
    """

    """


def glRasterPos2s(x: short, y: short) -> None:
    """

    """


def glRasterPos3d(x: double, y: double, z: double) -> None:
    """

    """


def glRasterPos3f(x: float, y: float, z: float) -> None:
    """

    """


def glRasterPos3i(x: int, y: int, z: int) -> None:
    """

    """


def glRasterPos3s(x: short, y: short, z: short) -> None:
    """

    """


def glRasterPos4d(x: double, y: double, z: double, w: double) -> None:
    """

    """


def glRasterPos4f(x: float, y: float, z: float, w: float) -> None:
    """

    """


def glRasterPos4i(x: int, y: int, z: int, w: int) -> None:
    """

    """


def glRasterPos4s(x: short, y: short, z: short, w: short) -> None:
    """

    """


@overload
def glRasterPos2dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glRasterPos2dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos2fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glRasterPos2fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos2iv(v: IntBuffer) -> None:
    """

    """


@overload
def glRasterPos2iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos2sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glRasterPos2sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos3dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glRasterPos3dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos3fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glRasterPos3fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos3iv(v: IntBuffer) -> None:
    """

    """


@overload
def glRasterPos3iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos3sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glRasterPos3sv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos4dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glRasterPos4dv(v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos4fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glRasterPos4fv(v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos4iv(v: IntBuffer) -> None:
    """

    """


@overload
def glRasterPos4iv(v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glRasterPos4sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glRasterPos4sv(v: Short1D, v_offset: int) -> None:
    """

    """


def glRectd(x1: double, y1: double, x2: double, y2: double) -> None:
    """

    """


def glRectf(x1: float, y1: float, x2: float, y2: float) -> None:
    """

    """


def glRecti(x1: int, y1: int, x2: int, y2: int) -> None:
    """

    """


def glRects(x1: short, y1: short, x2: short, y2: short) -> None:
    """

    """


@overload
def glRectdv(v1: DoubleBuffer, v2: DoubleBuffer) -> None:
    """

    """


@overload
def glRectdv(v1: Double1D, v1_offset: int, v2: Double1D,
             v2_offset: int) -> None:
    """

    """


@overload
def glRectfv(v1: FloatBuffer, v2: FloatBuffer) -> None:
    """

    """


@overload
def glRectfv(v1: Float1D, v1_offset: int, v2: Float1D, v2_offset: int) -> None:
    """

    """


@overload
def glRectiv(v1: IntBuffer, v2: IntBuffer) -> None:
    """

    """


@overload
def glRectiv(v1: Int1D, v1_offset: int, v2: Int1D, v2_offset: int) -> None:
    """

    """


@overload
def glRectsv(v1: ShortBuffer, v2: ShortBuffer) -> None:
    """

    """


@overload
def glRectsv(v1: Short1D, v1_offset: int, v2: Short1D, v2_offset: int) -> None:
    """

    """


def glLighti(light: int, pname: int, param: int) -> None:
    """

    """


@overload
def glLightiv(light: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glLightiv(light: int, pname: int, params: Int1D,
              params_offset: int) -> None:
    """

    """


@overload
def glGetLightiv(light: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetLightiv(light: int, pname: int, params: Int1D,
                 params_offset: int) -> None:
    """

    """


def glLightModeli(pname: int, param: int) -> None:
    """

    """


@overload
def glLightModeliv(pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glLightModeliv(pname: int, params: Int1D, params_offset: int) -> None:
    """

    """


def glMateriali(face: int, pname: int, param: int) -> None:
    """

    """


@overload
def glMaterialiv(face: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glMaterialiv(face: int, pname: int, params: Int1D,
                 params_offset: int) -> None:
    """

    """


@overload
def glGetMaterialiv(face: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetMaterialiv(face: int, pname: int, params: Int1D,
                    params_offset: int) -> None:
    """

    """


def glColorMaterial(face: int, mode: int) -> None:
    """

    """


def glPixelZoom(xfactor: float, yfactor: float) -> None:
    """

    """


def glPixelTransferf(pname: int, param: float) -> None:
    """

    """


def glPixelTransferi(pname: int, param: int) -> None:
    """

    """


@overload
def glPixelMapfv(map: int, mapsize: int, values: FloatBuffer) -> None:
    """

    """


@overload
def glPixelMapfv(map: int, mapsize: int, values: Float1D,
                 values_offset: int) -> None:
    """

    """


@overload
def glPixelMapfv(map: int, mapsize: int, values_buffer_offset: long) -> None:
    """

    """


@overload
def glPixelMapuiv(map: int, mapsize: int, values: IntBuffer) -> None:
    """

    """


@overload
def glPixelMapuiv(map: int, mapsize: int, values: Int1D,
                  values_offset: int) -> None:
    """

    """


@overload
def glPixelMapuiv(map: int, mapsize: int, values_buffer_offset: long) -> None:
    """

    """


@overload
def glPixelMapusv(map: int, mapsize: int, values: ShortBuffer) -> None:
    """

    """


@overload
def glPixelMapusv(map: int, mapsize: int, values: Short1D,
                  values_offset: int) -> None:
    """

    """


@overload
def glPixelMapusv(map: int, mapsize: int, values_buffer_offset: long) -> None:
    """

    """


@overload
def glGetPixelMapfv(map: int, values: FloatBuffer) -> None:
    """

    """


@overload
def glGetPixelMapfv(map: int, values: Float1D, values_offset: int) -> None:
    """

    """


@overload
def glGetPixelMapfv(map: int, values_buffer_offset: long) -> None:
    """

    """


@overload
def glGetPixelMapuiv(map: int, values: IntBuffer) -> None:
    """

    """


@overload
def glGetPixelMapuiv(map: int, values: Int1D, values_offset: int) -> None:
    """

    """


@overload
def glGetPixelMapuiv(map: int, values_buffer_offset: long) -> None:
    """

    """


@overload
def glGetPixelMapusv(map: int, values: ShortBuffer) -> None:
    """

    """


@overload
def glGetPixelMapusv(map: int, values: Short1D, values_offset: int) -> None:
    """

    """


@overload
def glGetPixelMapusv(map: int, values_buffer_offset: long) -> None:
    """

    """


@overload
def glBitmap(width: int, height: int, xorig: float, yorig: float, xmove: float,
             ymove: float, bitmap: ByteBuffer) -> None:
    """

    """


@overload
def glBitmap(width: int, height: int, xorig: float, yorig: float, xmove: float,
             ymove: float, bitmap: Byte1D, bitmap_offset: int) -> None:
    """

    """


@overload
def glBitmap(width: int, height: int, xorig: float, yorig: float, xmove: float,
             ymove: float, bitmap_buffer_offset: long) -> None:
    """

    """


@overload
def glDrawPixels(width: int, height: int, format: int, type: int,
                 pixels: Buffer) -> None:
    """

    """


@overload
def glDrawPixels(width: int, height: int, format: int, type: int,
                 pixels_buffer_offset: long) -> None:
    """

    """


def glCopyPixels(x: int, y: int, width: int, height: int, type: int) -> None:
    """

    """


def glTexGend(coord: int, pname: int, param: double) -> None:
    """

    """


def glTexGenf(coord: int, pname: int, param: float) -> None:
    """

    """


def glTexGeni(coord: int, pname: int, param: int) -> None:
    """

    """


@overload
def glTexGendv(coord: int, pname: int, params: DoubleBuffer) -> None:
    """

    """


@overload
def glTexGendv(coord: int, pname: int, params: Double1D,
               params_offset: int) -> None:
    """

    """


@overload
def glTexGenfv(coord: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glTexGenfv(coord: int, pname: int, params: Float1D,
               params_offset: int) -> None:
    """

    """


@overload
def glTexGeniv(coord: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glTexGeniv(coord: int, pname: int, params: Int1D,
               params_offset: int) -> None:
    """

    """


@overload
def glGetTexGendv(coord: int, pname: int, params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetTexGendv(coord: int, pname: int, params: Double1D,
                  params_offset: int) -> None:
    """

    """


@overload
def glGetTexGenfv(coord: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetTexGenfv(coord: int, pname: int, params: Float1D,
                  params_offset: int) -> None:
    """

    """


@overload
def glGetTexGeniv(coord: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetTexGeniv(coord: int, pname: int, params: Int1D,
                  params_offset: int) -> None:
    """

    """


@overload
def glMap1d(target: int, u1: double, u2: double, stride: int, order: int,
            points: DoubleBuffer) -> None:
    """

    """


@overload
def glMap1d(target: int, u1: double, u2: double, stride: int, order: int,
            points: Double1D, points_offset: int) -> None:
    """

    """


@overload
def glMap1f(target: int, u1: float, u2: float, stride: int, order: int,
            points: FloatBuffer) -> None:
    """

    """


@overload
def glMap1f(target: int, u1: float, u2: float, stride: int, order: int,
            points: Float1D, points_offset: int) -> None:
    """

    """


@overload
def glMap2d(target: int, u1: double, u2: double, ustride: int, uorder: int,
            v1: double, v2: double, vstride: int, vorder: int,
            points: DoubleBuffer) -> None:
    """

    """


@overload
def glMap2d(target: int, u1: double, u2: double, ustride: int, uorder: int,
            v1: double, v2: double, vstride: int, vorder: int,
            points: Double1D, points_offset: int) -> None:
    """

    """


@overload
def glMap2f(target: int, u1: float, u2: float, ustride: int, uorder: int,
            v1: float, v2: float, vstride: int, vorder: int,
            points: FloatBuffer) -> None:
    """

    """


@overload
def glMap2f(target: int, u1: float, u2: float, ustride: int, uorder: int,
            v1: float, v2: float, vstride: int, vorder: int, points: Float1D,
            points_offset: int) -> None:
    """

    """


@overload
def glGetMapdv(target: int, query: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glGetMapdv(target: int, query: int, v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glGetMapfv(target: int, query: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glGetMapfv(target: int, query: int, v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glGetMapiv(target: int, query: int, v: IntBuffer) -> None:
    """

    """


@overload
def glGetMapiv(target: int, query: int, v: Int1D, v_offset: int) -> None:
    """

    """


def glEvalCoord1d(u: double) -> None:
    """

    """


def glEvalCoord1f(u: float) -> None:
    """

    """


@overload
def glEvalCoord1dv(u: DoubleBuffer) -> None:
    """

    """


@overload
def glEvalCoord1dv(u: Double1D, u_offset: int) -> None:
    """

    """


@overload
def glEvalCoord1fv(u: FloatBuffer) -> None:
    """

    """


@overload
def glEvalCoord1fv(u: Float1D, u_offset: int) -> None:
    """

    """


def glEvalCoord2d(u: double, v: double) -> None:
    """

    """


def glEvalCoord2f(u: float, v: float) -> None:
    """

    """


@overload
def glEvalCoord2dv(u: DoubleBuffer) -> None:
    """

    """


@overload
def glEvalCoord2dv(u: Double1D, u_offset: int) -> None:
    """

    """


@overload
def glEvalCoord2fv(u: FloatBuffer) -> None:
    """

    """


@overload
def glEvalCoord2fv(u: Float1D, u_offset: int) -> None:
    """

    """


def glMapGrid1d(un: int, u1: double, u2: double) -> None:
    """

    """


def glMapGrid1f(un: int, u1: float, u2: float) -> None:
    """

    """


def glMapGrid2d(un: int, u1: double, u2: double, vn: int, v1: double,
                v2: double) -> None:
    """

    """


def glMapGrid2f(un: int, u1: float, u2: float, vn: int, v1: float,
                v2: float) -> None:
    """

    """


def glEvalPoint1(i: int) -> None:
    """

    """


def glEvalPoint2(i: int, j: int) -> None:
    """

    """


def glEvalMesh1(mode: int, i1: int, i2: int) -> None:
    """

    """


def glEvalMesh2(mode: int, i1: int, i2: int, j1: int, j2: int) -> None:
    """

    """


def glFogi(pname: int, param: int) -> None:
    """

    """


@overload
def glFogiv(pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glFogiv(pname: int, params: Int1D, params_offset: int) -> None:
    """

    """


def glFeedbackBuffer(size: int, type: int, buffer: FloatBuffer) -> None:
    """

    """


def glPassThrough(token: float) -> None:
    """

    """


def glSelectBuffer(size: int, buffer: IntBuffer) -> None:
    """

    """


def glInitNames() -> None:
    """

    """


def glLoadName(name: int) -> None:
    """

    """


def glPushName(name: int) -> None:
    """

    """


def glPopName() -> None:
    """

    """


def glIndexub(c: byte) -> None:
    """

    """


@overload
def glIndexubv(c: ByteBuffer) -> None:
    """

    """


@overload
def glIndexubv(c: Byte1D, c_offset: int) -> None:
    """

    """


def glPushClientAttrib(mask: int) -> None:
    """

    """


def glPopClientAttrib() -> None:
    """

    """


def glIndexPointer(type: int, stride: int, ptr: Buffer) -> None:
    """

    """


@overload
def glEdgeFlagPointer(stride: int, ptr: Buffer) -> None:
    """

    """


@overload
def glEdgeFlagPointer(stride: int, ptr_buffer_offset: long) -> None:
    """

    """


def glArrayElement(i: int) -> None:
    """

    """


@overload
def glInterleavedArrays(format: int, stride: int, pointer: Buffer) -> None:
    """

    """


@overload
def glInterleavedArrays(format: int, stride: int,
                        pointer_buffer_offset: long) -> None:
    """

    """


@overload
def glPrioritizeTextures(n: int, textures: IntBuffer,
                         priorities: FloatBuffer) -> None:
    """

    """


@overload
def glPrioritizeTextures(n: int, textures: Int1D, textures_offset: int,
                         priorities: Float1D, priorities_offset: int) -> None:
    """

    """


@overload
def glAreTexturesResident(n: int, textures: IntBuffer,
                          residences: ByteBuffer) -> bool:
    """

    """


@overload
def glAreTexturesResident(n: int, textures: Int1D, textures_offset: int,
                          residences: Byte1D, residences_offset: int) -> bool:
    """

    """


def glMultiTexCoord1d(target: int, s: double) -> None:
    """

    """


@overload
def glMultiTexCoord1dv(target: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord1dv(target: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord1f(target: int, s: float) -> None:
    """

    """


@overload
def glMultiTexCoord1fv(target: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord1fv(target: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord1i(target: int, s: int) -> None:
    """

    """


@overload
def glMultiTexCoord1iv(target: int, v: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord1iv(target: int, v: Int1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord1s(target: int, s: short) -> None:
    """

    """


@overload
def glMultiTexCoord1sv(target: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord1sv(target: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord2d(target: int, s: double, t: double) -> None:
    """

    """


@overload
def glMultiTexCoord2dv(target: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord2dv(target: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord2f(target: int, s: float, t: float) -> None:
    """

    """


@overload
def glMultiTexCoord2fv(target: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord2fv(target: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord2i(target: int, s: int, t: int) -> None:
    """

    """


@overload
def glMultiTexCoord2iv(target: int, v: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord2iv(target: int, v: Int1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord2s(target: int, s: short, t: short) -> None:
    """

    """


@overload
def glMultiTexCoord2sv(target: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord2sv(target: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord3d(target: int, s: double, t: double, r: double) -> None:
    """

    """


@overload
def glMultiTexCoord3dv(target: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord3dv(target: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord3f(target: int, s: float, t: float, r: float) -> None:
    """

    """


@overload
def glMultiTexCoord3fv(target: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord3fv(target: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord3i(target: int, s: int, t: int, r: int) -> None:
    """

    """


@overload
def glMultiTexCoord3iv(target: int, v: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord3iv(target: int, v: Int1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord3s(target: int, s: short, t: short, r: short) -> None:
    """

    """


@overload
def glMultiTexCoord3sv(target: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord3sv(target: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord4d(target: int, s: double, t: double, r: double,
                      q: double) -> None:
    """

    """


@overload
def glMultiTexCoord4dv(target: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord4dv(target: int, v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glMultiTexCoord4fv(target: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord4fv(target: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord4i(target: int, s: int, t: int, r: int, q: int) -> None:
    """

    """


@overload
def glMultiTexCoord4iv(target: int, v: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord4iv(target: int, v: Int1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord4s(target: int, s: short, t: short, r: short,
                      q: short) -> None:
    """

    """


@overload
def glMultiTexCoord4sv(target: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord4sv(target: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glLoadTransposeMatrixf(m: FloatBuffer) -> None:
    """

    """


@overload
def glLoadTransposeMatrixf(m: Float1D, m_offset: int) -> None:
    """

    """


@overload
def glLoadTransposeMatrixd(m: DoubleBuffer) -> None:
    """

    """


@overload
def glLoadTransposeMatrixd(m: Double1D, m_offset: int) -> None:
    """

    """


@overload
def glMultTransposeMatrixf(m: FloatBuffer) -> None:
    """

    """


@overload
def glMultTransposeMatrixf(m: Float1D, m_offset: int) -> None:
    """

    """


@overload
def glMultTransposeMatrixd(m: DoubleBuffer) -> None:
    """

    """


@overload
def glMultTransposeMatrixd(m: Double1D, m_offset: int) -> None:
    """

    """


def glFogCoordf(coord: float) -> None:
    """

    """


@overload
def glFogCoordfv(coord: FloatBuffer) -> None:
    """

    """


@overload
def glFogCoordfv(coord: Float1D, coord_offset: int) -> None:
    """

    """


def glFogCoordd(coord: double) -> None:
    """

    """


@overload
def glFogCoorddv(coord: DoubleBuffer) -> None:
    """

    """


@overload
def glFogCoorddv(coord: Double1D, coord_offset: int) -> None:
    """

    """


@overload
def glFogCoordPointer(type: int, stride: int, pointer: Buffer) -> None:
    """

    """


@overload
def glFogCoordPointer(type: int, stride: int,
                      pointer_buffer_offset: long) -> None:
    """

    """


def glSecondaryColor3b(red: byte, green: byte, blue: byte) -> None:
    """

    """


@overload
def glSecondaryColor3bv(v: ByteBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3bv(v: Byte1D, v_offset: int) -> None:
    """

    """


def glSecondaryColor3d(red: double, green: double, blue: double) -> None:
    """

    """


@overload
def glSecondaryColor3dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3dv(v: Double1D, v_offset: int) -> None:
    """

    """


def glSecondaryColor3f(red: float, green: float, blue: float) -> None:
    """

    """


@overload
def glSecondaryColor3fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3fv(v: Float1D, v_offset: int) -> None:
    """

    """


def glSecondaryColor3i(red: int, green: int, blue: int) -> None:
    """

    """


@overload
def glSecondaryColor3iv(v: IntBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3iv(v: Int1D, v_offset: int) -> None:
    """

    """


def glSecondaryColor3s(red: short, green: short, blue: short) -> None:
    """

    """


@overload
def glSecondaryColor3sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3sv(v: Short1D, v_offset: int) -> None:
    """

    """


def glSecondaryColor3ub(red: byte, green: byte, blue: byte) -> None:
    """

    """


@overload
def glSecondaryColor3ubv(v: ByteBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3ubv(v: Byte1D, v_offset: int) -> None:
    """

    """


def glSecondaryColor3ui(red: int, green: int, blue: int) -> None:
    """

    """


@overload
def glSecondaryColor3uiv(v: IntBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3uiv(v: Int1D, v_offset: int) -> None:
    """

    """


def glSecondaryColor3us(red: short, green: short, blue: short) -> None:
    """

    """


@overload
def glSecondaryColor3usv(v: ShortBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3usv(v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glSecondaryColorPointer(size: int, type: int, stride: int,
                            pointer: Buffer) -> None:
    """

    """


@overload
def glSecondaryColorPointer(size: int, type: int, stride: int,
                            pointer_buffer_offset: long) -> None:
    """

    """


def glWindowPos2d(x: double, y: double) -> None:
    """

    """


@overload
def glWindowPos2dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glWindowPos2dv(v: Double1D, v_offset: int) -> None:
    """

    """


def glWindowPos2f(x: float, y: float) -> None:
    """

    """


@overload
def glWindowPos2fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glWindowPos2fv(v: Float1D, v_offset: int) -> None:
    """

    """


def glWindowPos2i(x: int, y: int) -> None:
    """

    """


@overload
def glWindowPos2iv(v: IntBuffer) -> None:
    """

    """


@overload
def glWindowPos2iv(v: Int1D, v_offset: int) -> None:
    """

    """


def glWindowPos2s(x: short, y: short) -> None:
    """

    """


@overload
def glWindowPos2sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glWindowPos2sv(v: Short1D, v_offset: int) -> None:
    """

    """


def glWindowPos3d(x: double, y: double, z: double) -> None:
    """

    """


@overload
def glWindowPos3dv(v: DoubleBuffer) -> None:
    """

    """


@overload
def glWindowPos3dv(v: Double1D, v_offset: int) -> None:
    """

    """


def glWindowPos3f(x: float, y: float, z: float) -> None:
    """

    """


@overload
def glWindowPos3fv(v: FloatBuffer) -> None:
    """

    """


@overload
def glWindowPos3fv(v: Float1D, v_offset: int) -> None:
    """

    """


def glWindowPos3i(x: int, y: int, z: int) -> None:
    """

    """


@overload
def glWindowPos3iv(v: IntBuffer) -> None:
    """

    """


@overload
def glWindowPos3iv(v: Int1D, v_offset: int) -> None:
    """

    """


def glWindowPos3s(x: short, y: short, z: short) -> None:
    """

    """


@overload
def glWindowPos3sv(v: ShortBuffer) -> None:
    """

    """


@overload
def glWindowPos3sv(v: Short1D, v_offset: int) -> None:
    """

    """


def glClearNamedBufferData(buffer: int, internalformat: int, format: int,
                           type: int, data: Buffer) -> None:
    """

    """


def glClearNamedBufferSubData(buffer: int, internalformat: int, offset: long,
                              size: long, format: int, type: int,
                              data: Buffer) -> None:
    """

    """


def glNamedFramebufferParameteri(framebuffer: int, pname: int,
                                 param: int) -> None:
    """

    """


@overload
def glGetNamedFramebufferParameteriv(framebuffer: int, pname: int,
                                     param: IntBuffer) -> None:
    """

    """


@overload
def glGetNamedFramebufferParameteriv(framebuffer: int, pname: int,
                                     param: Int1D, param_offset: int) -> None:
    """

    """


@overload
def glGetnMapdv(target: int, query: int, bufSize: int,
                v: DoubleBuffer) -> None:
    """

    """


@overload
def glGetnMapdv(target: int, query: int, bufSize: int, v: Double1D,
                v_offset: int) -> None:
    """

    """


@overload
def glGetnMapfv(target: int, query: int, bufSize: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glGetnMapfv(target: int, query: int, bufSize: int, v: Float1D,
                v_offset: int) -> None:
    """

    """


@overload
def glGetnMapiv(target: int, query: int, bufSize: int, v: IntBuffer) -> None:
    """

    """


@overload
def glGetnMapiv(target: int, query: int, bufSize: int, v: Int1D,
                v_offset: int) -> None:
    """

    """


@overload
def glGetnPixelMapfv(map: int, bufSize: int, values: FloatBuffer) -> None:
    """

    """


@overload
def glGetnPixelMapfv(map: int, bufSize: int, values: Float1D,
                     values_offset: int) -> None:
    """

    """


@overload
def glGetnPixelMapuiv(map: int, bufSize: int, values: IntBuffer) -> None:
    """

    """


@overload
def glGetnPixelMapuiv(map: int, bufSize: int, values: Int1D,
                      values_offset: int) -> None:
    """

    """


@overload
def glGetnPixelMapusv(map: int, bufSize: int, values: ShortBuffer) -> None:
    """

    """


@overload
def glGetnPixelMapusv(map: int, bufSize: int, values: Short1D,
                      values_offset: int) -> None:
    """

    """


@overload
def glGetnPolygonStipple(bufSize: int, pattern: ByteBuffer) -> None:
    """

    """


@overload
def glGetnPolygonStipple(bufSize: int, pattern: Byte1D,
                         pattern_offset: int) -> None:
    """

    """


def glGetnColorTable(target: int, format: int, type: int, bufSize: int,
                     table: Buffer) -> None:
    """

    """


def glGetnConvolutionFilter(target: int, format: int, type: int, bufSize: int,
                            image: Buffer) -> None:
    """

    """


def glGetnSeparableFilter(target: int, format: int, type: int, rowBufSize: int,
                          row: Buffer, columnBufSize: int, column: Buffer,
                          span: Buffer) -> None:
    """

    """


def glGetnHistogram(target: int, reset: bool, format: int, type: int,
                    bufSize: int, values: Buffer) -> None:
    """

    """


def glGetnMinmax(target: int, reset: bool, format: int, type: int,
                 bufSize: int, values: Buffer) -> None:
    """

    """


def glProgramStringARB(target: int, format: int, len: int,
                       string: String) -> None:
    """

    """


def glBindProgramARB(target: int, program: int) -> None:
    """

    """


@overload
def glDeleteProgramsARB(n: int, programs: IntBuffer) -> None:
    """

    """


@overload
def glDeleteProgramsARB(n: int, programs: Int1D, programs_offset: int) -> None:
    """

    """


@overload
def glGenProgramsARB(n: int, programs: IntBuffer) -> None:
    """

    """


@overload
def glGenProgramsARB(n: int, programs: Int1D, programs_offset: int) -> None:
    """

    """


def glProgramEnvParameter4dARB(target: int, index: int, x: double, y: double,
                               z: double, w: double) -> None:
    """

    """


@overload
def glProgramEnvParameter4dvARB(target: int, index: int,
                                params: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramEnvParameter4dvARB(target: int, index: int, params: Double1D,
                                params_offset: int) -> None:
    """

    """


def glProgramEnvParameter4fARB(target: int, index: int, x: float, y: float,
                               z: float, w: float) -> None:
    """

    """


@overload
def glProgramEnvParameter4fvARB(target: int, index: int,
                                params: FloatBuffer) -> None:
    """

    """


@overload
def glProgramEnvParameter4fvARB(target: int, index: int, params: Float1D,
                                params_offset: int) -> None:
    """

    """


def glProgramLocalParameter4dARB(target: int, index: int, x: double, y: double,
                                 z: double, w: double) -> None:
    """

    """


@overload
def glProgramLocalParameter4dvARB(target: int, index: int,
                                  params: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramLocalParameter4dvARB(target: int, index: int, params: Double1D,
                                  params_offset: int) -> None:
    """

    """


def glProgramLocalParameter4fARB(target: int, index: int, x: float, y: float,
                                 z: float, w: float) -> None:
    """

    """


@overload
def glProgramLocalParameter4fvARB(target: int, index: int,
                                  params: FloatBuffer) -> None:
    """

    """


@overload
def glProgramLocalParameter4fvARB(target: int, index: int, params: Float1D,
                                  params_offset: int) -> None:
    """

    """


@overload
def glGetProgramEnvParameterdvARB(target: int, index: int,
                                  params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetProgramEnvParameterdvARB(target: int, index: int, params: Double1D,
                                  params_offset: int) -> None:
    """

    """


@overload
def glGetProgramEnvParameterfvARB(target: int, index: int,
                                  params: FloatBuffer) -> None:
    """

    """


@overload
def glGetProgramEnvParameterfvARB(target: int, index: int, params: Float1D,
                                  params_offset: int) -> None:
    """

    """


@overload
def glGetProgramLocalParameterdvARB(target: int, index: int,
                                    params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetProgramLocalParameterdvARB(target: int, index: int, params: Double1D,
                                    params_offset: int) -> None:
    """

    """


@overload
def glGetProgramLocalParameterfvARB(target: int, index: int,
                                    params: FloatBuffer) -> None:
    """

    """


@overload
def glGetProgramLocalParameterfvARB(target: int, index: int, params: Float1D,
                                    params_offset: int) -> None:
    """

    """


@overload
def glGetProgramivARB(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetProgramivARB(target: int, pname: int, params: Int1D,
                      params_offset: int) -> None:
    """

    """


def glGetProgramStringARB(target: int, pname: int, string: Buffer) -> None:
    """

    """


def glIsProgramARB(program: int) -> bool:
    """

    """


def glUniform1i64ARB(location: int, x: long) -> None:
    """

    """


def glUniform2i64ARB(location: int, x: long, y: long) -> None:
    """

    """


def glUniform3i64ARB(location: int, x: long, y: long, z: long) -> None:
    """

    """


def glUniform4i64ARB(location: int, x: long, y: long, z: long,
                     w: long) -> None:
    """

    """


@overload
def glUniform1i64vARB(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform1i64vARB(location: int, count: int, value: Long1D,
                      value_offset: int) -> None:
    """

    """


@overload
def glUniform2i64vARB(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform2i64vARB(location: int, count: int, value: Long1D,
                      value_offset: int) -> None:
    """

    """


@overload
def glUniform3i64vARB(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform3i64vARB(location: int, count: int, value: Long1D,
                      value_offset: int) -> None:
    """

    """


@overload
def glUniform4i64vARB(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform4i64vARB(location: int, count: int, value: Long1D,
                      value_offset: int) -> None:
    """

    """


def glUniform1ui64ARB(location: int, x: long) -> None:
    """

    """


def glUniform2ui64ARB(location: int, x: long, y: long) -> None:
    """

    """


def glUniform3ui64ARB(location: int, x: long, y: long, z: long) -> None:
    """

    """


def glUniform4ui64ARB(location: int, x: long, y: long, z: long,
                      w: long) -> None:
    """

    """


@overload
def glUniform1ui64vARB(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform1ui64vARB(location: int, count: int, value: Long1D,
                       value_offset: int) -> None:
    """

    """


@overload
def glUniform2ui64vARB(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform2ui64vARB(location: int, count: int, value: Long1D,
                       value_offset: int) -> None:
    """

    """


@overload
def glUniform3ui64vARB(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform3ui64vARB(location: int, count: int, value: Long1D,
                       value_offset: int) -> None:
    """

    """


@overload
def glUniform4ui64vARB(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform4ui64vARB(location: int, count: int, value: Long1D,
                       value_offset: int) -> None:
    """

    """


@overload
def glGetUniformi64vARB(program: int, location: int,
                        params: LongBuffer) -> None:
    """

    """


@overload
def glGetUniformi64vARB(program: int, location: int, params: Long1D,
                        params_offset: int) -> None:
    """

    """


@overload
def glGetUniformui64vARB(program: int, location: int,
                         params: LongBuffer) -> None:
    """

    """


@overload
def glGetUniformui64vARB(program: int, location: int, params: Long1D,
                         params_offset: int) -> None:
    """

    """


@overload
def glGetnUniformi64vARB(program: int, location: int, bufSize: int,
                         params: LongBuffer) -> None:
    """

    """


@overload
def glGetnUniformi64vARB(program: int, location: int, bufSize: int,
                         params: Long1D, params_offset: int) -> None:
    """

    """


@overload
def glGetnUniformui64vARB(program: int, location: int, bufSize: int,
                          params: LongBuffer) -> None:
    """

    """


@overload
def glGetnUniformui64vARB(program: int, location: int, bufSize: int,
                          params: Long1D, params_offset: int) -> None:
    """

    """


def glProgramUniform1i64ARB(program: int, location: int, x: long) -> None:
    """

    """


def glProgramUniform2i64ARB(program: int, location: int, x: long,
                            y: long) -> None:
    """

    """


def glProgramUniform3i64ARB(program: int, location: int, x: long, y: long,
                            z: long) -> None:
    """

    """


def glProgramUniform4i64ARB(program: int, location: int, x: long, y: long,
                            z: long, w: long) -> None:
    """

    """


@overload
def glProgramUniform1i64vARB(program: int, location: int, count: int,
                             value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform1i64vARB(program: int, location: int, count: int,
                             value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform2i64vARB(program: int, location: int, count: int,
                             value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform2i64vARB(program: int, location: int, count: int,
                             value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform3i64vARB(program: int, location: int, count: int,
                             value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform3i64vARB(program: int, location: int, count: int,
                             value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform4i64vARB(program: int, location: int, count: int,
                             value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform4i64vARB(program: int, location: int, count: int,
                             value: Long1D, value_offset: int) -> None:
    """

    """


def glProgramUniform1ui64ARB(program: int, location: int, x: long) -> None:
    """

    """


def glProgramUniform2ui64ARB(program: int, location: int, x: long,
                             y: long) -> None:
    """

    """


def glProgramUniform3ui64ARB(program: int, location: int, x: long, y: long,
                             z: long) -> None:
    """

    """


def glProgramUniform4ui64ARB(program: int, location: int, x: long, y: long,
                             z: long, w: long) -> None:
    """

    """


@overload
def glProgramUniform1ui64vARB(program: int, location: int, count: int,
                              value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform1ui64vARB(program: int, location: int, count: int,
                              value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform2ui64vARB(program: int, location: int, count: int,
                              value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform2ui64vARB(program: int, location: int, count: int,
                              value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform3ui64vARB(program: int, location: int, count: int,
                              value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform3ui64vARB(program: int, location: int, count: int,
                              value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform4ui64vARB(program: int, location: int, count: int,
                              value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform4ui64vARB(program: int, location: int, count: int,
                              value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glColorTable(target: int, internalformat: int, width: int, format: int,
                 type: int, table: Buffer) -> None:
    """

    """


@overload
def glColorTable(target: int, internalformat: int, width: int, format: int,
                 type: int, table_buffer_offset: long) -> None:
    """

    """


@overload
def glColorTableParameterfv(target: int, pname: int,
                            params: FloatBuffer) -> None:
    """

    """


@overload
def glColorTableParameterfv(target: int, pname: int, params: Float1D,
                            params_offset: int) -> None:
    """

    """


@overload
def glColorTableParameteriv(target: int, pname: int,
                            params: IntBuffer) -> None:
    """

    """


@overload
def glColorTableParameteriv(target: int, pname: int, params: Int1D,
                            params_offset: int) -> None:
    """

    """


def glCopyColorTable(target: int, internalformat: int, x: int, y: int,
                     width: int) -> None:
    """

    """


@overload
def glGetColorTable(target: int, format: int, type: int,
                    table: Buffer) -> None:
    """

    """


@overload
def glGetColorTable(target: int, format: int, type: int,
                    table_buffer_offset: long) -> None:
    """

    """


@overload
def glGetColorTableParameterfv(target: int, pname: int,
                               params: FloatBuffer) -> None:
    """

    """


@overload
def glGetColorTableParameterfv(target: int, pname: int, params: Float1D,
                               params_offset: int) -> None:
    """

    """


@overload
def glGetColorTableParameteriv(target: int, pname: int,
                               params: IntBuffer) -> None:
    """

    """


@overload
def glGetColorTableParameteriv(target: int, pname: int, params: Int1D,
                               params_offset: int) -> None:
    """

    """


@overload
def glColorSubTable(target: int, start: int, count: int, format: int,
                    type: int, data: Buffer) -> None:
    """

    """


@overload
def glColorSubTable(target: int, start: int, count: int, format: int,
                    type: int, data_buffer_offset: long) -> None:
    """

    """


def glCopyColorSubTable(target: int, start: int, x: int, y: int,
                        width: int) -> None:
    """

    """


@overload
def glConvolutionFilter1D(target: int, internalformat: int, width: int,
                          format: int, type: int, image: Buffer) -> None:
    """

    """


@overload
def glConvolutionFilter1D(target: int, internalformat: int, width: int,
                          format: int, type: int,
                          image_buffer_offset: long) -> None:
    """

    """


@overload
def glConvolutionFilter2D(target: int, internalformat: int, width: int,
                          height: int, format: int, type: int,
                          image: Buffer) -> None:
    """

    """


@overload
def glConvolutionFilter2D(target: int, internalformat: int, width: int,
                          height: int, format: int, type: int,
                          image_buffer_offset: long) -> None:
    """

    """


def glConvolutionParameterf(target: int, pname: int, params: float) -> None:
    """

    """


@overload
def glConvolutionParameterfv(target: int, pname: int,
                             params: FloatBuffer) -> None:
    """

    """


@overload
def glConvolutionParameterfv(target: int, pname: int, params: Float1D,
                             params_offset: int) -> None:
    """

    """


def glConvolutionParameteri(target: int, pname: int, params: int) -> None:
    """

    """


@overload
def glConvolutionParameteriv(target: int, pname: int,
                             params: IntBuffer) -> None:
    """

    """


@overload
def glConvolutionParameteriv(target: int, pname: int, params: Int1D,
                             params_offset: int) -> None:
    """

    """


def glCopyConvolutionFilter1D(target: int, internalformat: int, x: int, y: int,
                              width: int) -> None:
    """

    """


def glCopyConvolutionFilter2D(target: int, internalformat: int, x: int, y: int,
                              width: int, height: int) -> None:
    """

    """


@overload
def glGetConvolutionFilter(target: int, format: int, type: int,
                           image: Buffer) -> None:
    """

    """


@overload
def glGetConvolutionFilter(target: int, format: int, type: int,
                           image_buffer_offset: long) -> None:
    """

    """


@overload
def glGetConvolutionParameterfv(target: int, pname: int,
                                params: FloatBuffer) -> None:
    """

    """


@overload
def glGetConvolutionParameterfv(target: int, pname: int, params: Float1D,
                                params_offset: int) -> None:
    """

    """


@overload
def glGetConvolutionParameteriv(target: int, pname: int,
                                params: IntBuffer) -> None:
    """

    """


@overload
def glGetConvolutionParameteriv(target: int, pname: int, params: Int1D,
                                params_offset: int) -> None:
    """

    """


@overload
def glGetSeparableFilter(target: int, format: int, type: int, row: Buffer,
                         column: Buffer, span: Buffer) -> None:
    """

    """


@overload
def glGetSeparableFilter(target: int, format: int, type: int,
                         row_buffer_offset: long, column_buffer_offset: long,
                         span_buffer_offset: long) -> None:
    """

    """


@overload
def glSeparableFilter2D(target: int, internalformat: int, width: int,
                        height: int, format: int, type: int, row: Buffer,
                        column: Buffer) -> None:
    """

    """


@overload
def glSeparableFilter2D(target: int, internalformat: int, width: int,
                        height: int, format: int, type: int,
                        row_buffer_offset: long,
                        column_buffer_offset: long) -> None:
    """

    """


@overload
def glGetHistogram(target: int, reset: bool, format: int, type: int,
                   values: Buffer) -> None:
    """

    """


@overload
def glGetHistogram(target: int, reset: bool, format: int, type: int,
                   values_buffer_offset: long) -> None:
    """

    """


@overload
def glGetHistogramParameterfv(target: int, pname: int,
                              params: FloatBuffer) -> None:
    """

    """


@overload
def glGetHistogramParameterfv(target: int, pname: int, params: Float1D,
                              params_offset: int) -> None:
    """

    """


@overload
def glGetHistogramParameteriv(target: int, pname: int,
                              params: IntBuffer) -> None:
    """

    """


@overload
def glGetHistogramParameteriv(target: int, pname: int, params: Int1D,
                              params_offset: int) -> None:
    """

    """


@overload
def glGetMinmax(target: int, reset: bool, format: int, type: int,
                values: Buffer) -> None:
    """

    """


@overload
def glGetMinmax(target: int, reset: bool, format: int, type: int,
                values_buffer_offset: long) -> None:
    """

    """


@overload
def glGetMinmaxParameterfv(target: int, pname: int,
                           params: FloatBuffer) -> None:
    """

    """


@overload
def glGetMinmaxParameterfv(target: int, pname: int, params: Float1D,
                           params_offset: int) -> None:
    """

    """


@overload
def glGetMinmaxParameteriv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetMinmaxParameteriv(target: int, pname: int, params: Int1D,
                           params_offset: int) -> None:
    """

    """


def glHistogram(target: int, width: int, internalformat: int,
                sink: bool) -> None:
    """

    """


def glMinmax(target: int, internalformat: int, sink: bool) -> None:
    """

    """


def glResetHistogram(target: int) -> None:
    """

    """


def glResetMinmax(target: int) -> None:
    """

    """


def glCurrentPaletteMatrixARB(index: int) -> None:
    """

    """


@overload
def glMatrixIndexubvARB(size: int, indices: ByteBuffer) -> None:
    """

    """


@overload
def glMatrixIndexubvARB(size: int, indices: Byte1D,
                        indices_offset: int) -> None:
    """

    """


@overload
def glMatrixIndexusvARB(size: int, indices: ShortBuffer) -> None:
    """

    """


@overload
def glMatrixIndexusvARB(size: int, indices: Short1D,
                        indices_offset: int) -> None:
    """

    """


@overload
def glMatrixIndexuivARB(size: int, indices: IntBuffer) -> None:
    """

    """


@overload
def glMatrixIndexuivARB(size: int, indices: Int1D,
                        indices_offset: int) -> None:
    """

    """


@overload
def glMatrixIndexPointerARB(size: int, type: int, stride: int,
                            pointer: Buffer) -> None:
    """

    """


@overload
def glMatrixIndexPointerARB(size: int, type: int, stride: int,
                            pointer_buffer_offset: long) -> None:
    """

    """


def glMaxShaderCompilerThreadsARB(count: int) -> None:
    """

    """


@overload
def glFramebufferSampleLocationsfvARB(target: int, start: int, count: int,
                                      v: FloatBuffer) -> None:
    """

    """


@overload
def glFramebufferSampleLocationsfvARB(target: int, start: int, count: int,
                                      v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glNamedFramebufferSampleLocationsfvARB(framebuffer: int, start: int,
                                           count: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glNamedFramebufferSampleLocationsfvARB(framebuffer: int, start: int,
                                           count: int, v: Float1D,
                                           v_offset: int) -> None:
    """

    """


def glEvaluateDepthValuesARB() -> None:
    """

    """


def glDeleteObjectARB(obj: long) -> None:
    """

    """


def glGetHandleARB(pname: int) -> long:
    """

    """


def glDetachObjectARB(containerObj: long, attachedObj: long) -> None:
    """

    """


def glCreateShaderObjectARB(shaderType: int) -> long:
    """

    """


@overload
def glShaderSourceARB(shaderObj: long, count: int, string: String1D,
                      length: IntBuffer) -> None:
    """

    """


@overload
def glShaderSourceARB(shaderObj: long, count: int, string: String1D,
                      length: Int1D, length_offset: int) -> None:
    """

    """


def glCompileShaderARB(shaderObj: long) -> None:
    """

    """


def glCreateProgramObjectARB() -> long:
    """

    """


def glAttachObjectARB(containerObj: long, obj: long) -> None:
    """

    """


def glLinkProgramARB(programObj: long) -> None:
    """

    """


def glUseProgramObjectARB(programObj: long) -> None:
    """

    """


def glValidateProgramARB(programObj: long) -> None:
    """

    """


def glUniform1fARB(location: int, v0: float) -> None:
    """

    """


def glUniform2fARB(location: int, v0: float, v1: float) -> None:
    """

    """


def glUniform3fARB(location: int, v0: float, v1: float, v2: float) -> None:
    """

    """


def glUniform4fARB(location: int, v0: float, v1: float, v2: float,
                   v3: float) -> None:
    """

    """


def glUniform1iARB(location: int, v0: int) -> None:
    """

    """


def glUniform2iARB(location: int, v0: int, v1: int) -> None:
    """

    """


def glUniform3iARB(location: int, v0: int, v1: int, v2: int) -> None:
    """

    """


def glUniform4iARB(location: int, v0: int, v1: int, v2: int, v3: int) -> None:
    """

    """


@overload
def glUniform1fvARB(location: int, count: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glUniform1fvARB(location: int, count: int, value: Float1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glUniform2fvARB(location: int, count: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glUniform2fvARB(location: int, count: int, value: Float1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glUniform3fvARB(location: int, count: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glUniform3fvARB(location: int, count: int, value: Float1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glUniform4fvARB(location: int, count: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glUniform4fvARB(location: int, count: int, value: Float1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glUniform1ivARB(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform1ivARB(location: int, count: int, value: Int1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glUniform2ivARB(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform2ivARB(location: int, count: int, value: Int1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glUniform3ivARB(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform3ivARB(location: int, count: int, value: Int1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glUniform4ivARB(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform4ivARB(location: int, count: int, value: Int1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix2fvARB(location: int, count: int, transpose: bool,
                          value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix2fvARB(location: int, count: int, transpose: bool,
                          value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix3fvARB(location: int, count: int, transpose: bool,
                          value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix3fvARB(location: int, count: int, transpose: bool,
                          value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix4fvARB(location: int, count: int, transpose: bool,
                          value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix4fvARB(location: int, count: int, transpose: bool,
                          value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glGetObjectParameterfvARB(obj: long, pname: int,
                              params: FloatBuffer) -> None:
    """

    """


@overload
def glGetObjectParameterfvARB(obj: long, pname: int, params: Float1D,
                              params_offset: int) -> None:
    """

    """


@overload
def glGetObjectParameterivARB(obj: long, pname: int,
                              params: IntBuffer) -> None:
    """

    """


@overload
def glGetObjectParameterivARB(obj: long, pname: int, params: Int1D,
                              params_offset: int) -> None:
    """

    """


@overload
def glGetInfoLogARB(obj: long, maxLength: int, length: IntBuffer,
                    infoLog: ByteBuffer) -> None:
    """

    """


@overload
def glGetInfoLogARB(obj: long, maxLength: int, length: Int1D,
                    length_offset: int, infoLog: Byte1D,
                    infoLog_offset: int) -> None:
    """

    """


@overload
def glGetAttachedObjectsARB(containerObj: long, maxCount: int,
                            count: IntBuffer, obj: LongBuffer) -> None:
    """

    """


@overload
def glGetAttachedObjectsARB(containerObj: long, maxCount: int, count: Int1D,
                            count_offset: int, obj: Long1D,
                            obj_offset: int) -> None:
    """

    """


def glGetUniformLocationARB(programObj: long, name: String) -> int:
    """

    """


@overload
def glGetActiveUniformARB(programObj: long, index: int, maxLength: int,
                          length: IntBuffer, size: IntBuffer, type: IntBuffer,
                          name: ByteBuffer) -> None:
    """

    """


@overload
def glGetActiveUniformARB(programObj: long, index: int, maxLength: int,
                          length: Int1D, length_offset: int, size: Int1D,
                          size_offset: int, type: Int1D, type_offset: int,
                          name: Byte1D, name_offset: int) -> None:
    """

    """


@overload
def glGetUniformfvARB(programObj: long, location: int,
                      params: FloatBuffer) -> None:
    """

    """


@overload
def glGetUniformfvARB(programObj: long, location: int, params: Float1D,
                      params_offset: int) -> None:
    """

    """


@overload
def glGetUniformivARB(programObj: long, location: int,
                      params: IntBuffer) -> None:
    """

    """


@overload
def glGetUniformivARB(programObj: long, location: int, params: Int1D,
                      params_offset: int) -> None:
    """

    """


@overload
def glGetShaderSourceARB(obj: long, maxLength: int, length: IntBuffer,
                         source: ByteBuffer) -> None:
    """

    """


@overload
def glGetShaderSourceARB(obj: long, maxLength: int, length: Int1D,
                         length_offset: int, source: Byte1D,
                         source_offset: int) -> None:
    """

    """


@overload
def glWeightbvARB(size: int, weights: ByteBuffer) -> None:
    """

    """


@overload
def glWeightbvARB(size: int, weights: Byte1D, weights_offset: int) -> None:
    """

    """


@overload
def glWeightsvARB(size: int, weights: ShortBuffer) -> None:
    """

    """


@overload
def glWeightsvARB(size: int, weights: Short1D, weights_offset: int) -> None:
    """

    """


@overload
def glWeightivARB(size: int, weights: IntBuffer) -> None:
    """

    """


@overload
def glWeightivARB(size: int, weights: Int1D, weights_offset: int) -> None:
    """

    """


@overload
def glWeightfvARB(size: int, weights: FloatBuffer) -> None:
    """

    """


@overload
def glWeightfvARB(size: int, weights: Float1D, weights_offset: int) -> None:
    """

    """


@overload
def glWeightdvARB(size: int, weights: DoubleBuffer) -> None:
    """

    """


@overload
def glWeightdvARB(size: int, weights: Double1D, weights_offset: int) -> None:
    """

    """


@overload
def glWeightubvARB(size: int, weights: ByteBuffer) -> None:
    """

    """


@overload
def glWeightubvARB(size: int, weights: Byte1D, weights_offset: int) -> None:
    """

    """


@overload
def glWeightusvARB(size: int, weights: ShortBuffer) -> None:
    """

    """


@overload
def glWeightusvARB(size: int, weights: Short1D, weights_offset: int) -> None:
    """

    """


@overload
def glWeightuivARB(size: int, weights: IntBuffer) -> None:
    """

    """


@overload
def glWeightuivARB(size: int, weights: Int1D, weights_offset: int) -> None:
    """

    """


@overload
def glWeightPointerARB(size: int, type: int, stride: int,
                       pointer: Buffer) -> None:
    """

    """


@overload
def glWeightPointerARB(size: int, type: int, stride: int,
                       pointer_buffer_offset: long) -> None:
    """

    """


def glVertexBlendARB(count: int) -> None:
    """

    """


def glVertexAttrib1dARB(index: int, x: double) -> None:
    """

    """


@overload
def glVertexAttrib1dvARB(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttrib1dvARB(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib1fARB(index: int, x: float) -> None:
    """

    """


@overload
def glVertexAttrib1fvARB(index: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glVertexAttrib1fvARB(index: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib1sARB(index: int, x: short) -> None:
    """

    """


@overload
def glVertexAttrib1svARB(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib1svARB(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib2dARB(index: int, x: double, y: double) -> None:
    """

    """


@overload
def glVertexAttrib2dvARB(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttrib2dvARB(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib2fARB(index: int, x: float, y: float) -> None:
    """

    """


@overload
def glVertexAttrib2fvARB(index: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glVertexAttrib2fvARB(index: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib2sARB(index: int, x: short, y: short) -> None:
    """

    """


@overload
def glVertexAttrib2svARB(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib2svARB(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib3dARB(index: int, x: double, y: double, z: double) -> None:
    """

    """


@overload
def glVertexAttrib3dvARB(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttrib3dvARB(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib3fARB(index: int, x: float, y: float, z: float) -> None:
    """

    """


@overload
def glVertexAttrib3fvARB(index: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glVertexAttrib3fvARB(index: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib3sARB(index: int, x: short, y: short, z: short) -> None:
    """

    """


@overload
def glVertexAttrib3svARB(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib3svARB(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4NbvARB(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4NbvARB(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4NivARB(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4NivARB(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4NsvARB(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4NsvARB(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4NubARB(index: int, x: byte, y: byte, z: byte,
                          w: byte) -> None:
    """

    """


@overload
def glVertexAttrib4NubvARB(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4NubvARB(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4NuivARB(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4NuivARB(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4NusvARB(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4NusvARB(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4bvARB(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4bvARB(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4dARB(index: int, x: double, y: double, z: double,
                        w: double) -> None:
    """

    """


@overload
def glVertexAttrib4dvARB(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4dvARB(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4fARB(index: int, x: float, y: float, z: float,
                        w: float) -> None:
    """

    """


@overload
def glVertexAttrib4fvARB(index: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4fvARB(index: int, v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4ivARB(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4ivARB(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4sARB(index: int, x: short, y: short, z: short,
                        w: short) -> None:
    """

    """


@overload
def glVertexAttrib4svARB(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4svARB(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4ubvARB(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4ubvARB(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4uivARB(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4uivARB(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4usvARB(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4usvARB(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribPointerARB(index: int, size: int, type: int,
                             normalized: bool, stride: int,
                             pointer: Buffer) -> None:
    """

    """


@overload
def glVertexAttribPointerARB(index: int, size: int, type: int,
                             normalized: bool, stride: int,
                             pointer_buffer_offset: long) -> None:
    """

    """


def glEnableVertexAttribArrayARB(index: int) -> None:
    """

    """


def glDisableVertexAttribArrayARB(index: int) -> None:
    """

    """


@overload
def glGetVertexAttribdvARB(index: int, pname: int,
                           params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribdvARB(index: int, pname: int, params: Double1D,
                           params_offset: int) -> None:
    """

    """


@overload
def glGetVertexAttribfvARB(index: int, pname: int,
                           params: FloatBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribfvARB(index: int, pname: int, params: Float1D,
                           params_offset: int) -> None:
    """

    """


@overload
def glGetVertexAttribivARB(index: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribivARB(index: int, pname: int, params: Int1D,
                           params_offset: int) -> None:
    """

    """


def glBlendBarrier() -> None:
    """

    """


def glMultiTexCoord1bOES(texture: int, s: byte) -> None:
    """

    """


@overload
def glMultiTexCoord1bvOES(texture: int, coords: ByteBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord1bvOES(texture: int, coords: Byte1D,
                          coords_offset: int) -> None:
    """

    """


def glMultiTexCoord2bOES(texture: int, s: byte, t: byte) -> None:
    """

    """


@overload
def glMultiTexCoord2bvOES(texture: int, coords: ByteBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord2bvOES(texture: int, coords: Byte1D,
                          coords_offset: int) -> None:
    """

    """


def glMultiTexCoord3bOES(texture: int, s: byte, t: byte, r: byte) -> None:
    """

    """


@overload
def glMultiTexCoord3bvOES(texture: int, coords: ByteBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord3bvOES(texture: int, coords: Byte1D,
                          coords_offset: int) -> None:
    """

    """


def glMultiTexCoord4bOES(texture: int, s: byte, t: byte, r: byte,
                         q: byte) -> None:
    """

    """


@overload
def glMultiTexCoord4bvOES(texture: int, coords: ByteBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord4bvOES(texture: int, coords: Byte1D,
                          coords_offset: int) -> None:
    """

    """


def glTexCoord1bOES(s: byte) -> None:
    """

    """


@overload
def glTexCoord1bvOES(coords: ByteBuffer) -> None:
    """

    """


@overload
def glTexCoord1bvOES(coords: Byte1D, coords_offset: int) -> None:
    """

    """


def glTexCoord2bOES(s: byte, t: byte) -> None:
    """

    """


@overload
def glTexCoord2bvOES(coords: ByteBuffer) -> None:
    """

    """


@overload
def glTexCoord2bvOES(coords: Byte1D, coords_offset: int) -> None:
    """

    """


def glTexCoord3bOES(s: byte, t: byte, r: byte) -> None:
    """

    """


@overload
def glTexCoord3bvOES(coords: ByteBuffer) -> None:
    """

    """


@overload
def glTexCoord3bvOES(coords: Byte1D, coords_offset: int) -> None:
    """

    """


def glTexCoord4bOES(s: byte, t: byte, r: byte, q: byte) -> None:
    """

    """


@overload
def glTexCoord4bvOES(coords: ByteBuffer) -> None:
    """

    """


@overload
def glTexCoord4bvOES(coords: Byte1D, coords_offset: int) -> None:
    """

    """


def glVertex2bOES(x: byte, y: byte) -> None:
    """

    """


@overload
def glVertex2bvOES(coords: ByteBuffer) -> None:
    """

    """


@overload
def glVertex2bvOES(coords: Byte1D, coords_offset: int) -> None:
    """

    """


def glVertex3bOES(x: byte, y: byte, z: byte) -> None:
    """

    """


@overload
def glVertex3bvOES(coords: ByteBuffer) -> None:
    """

    """


@overload
def glVertex3bvOES(coords: Byte1D, coords_offset: int) -> None:
    """

    """


def glVertex4bOES(x: byte, y: byte, z: byte, w: byte) -> None:
    """

    """


@overload
def glVertex4bvOES(coords: ByteBuffer) -> None:
    """

    """


@overload
def glVertex4bvOES(coords: Byte1D, coords_offset: int) -> None:
    """

    """


@overload
def glQueryMatrixxOES(mantissa: IntBuffer, exponent: IntBuffer) -> int:
    """

    """


@overload
def glQueryMatrixxOES(mantissa: Int1D, mantissa_offset: int, exponent: Int1D,
                      exponent_offset: int) -> int:
    """

    """


@overload
def glClipPlanef(plane: int, equation: FloatBuffer) -> None:
    """

    """


@overload
def glClipPlanef(plane: int, equation: Float1D, equation_offset: int) -> None:
    """

    """


@overload
def glGetClipPlanef(plane: int, equation: FloatBuffer) -> None:
    """

    """


@overload
def glGetClipPlanef(plane: int, equation: Float1D,
                    equation_offset: int) -> None:
    """

    """


def glBlendFuncIndexedAMD(buf: int, src: int, dst: int) -> None:
    """

    """


def glBlendFuncSeparateIndexedAMD(buf: int, srcRGB: int, dstRGB: int,
                                  srcAlpha: int, dstAlpha: int) -> None:
    """

    """


def glBlendEquationIndexedAMD(buf: int, mode: int) -> None:
    """

    """


def glBlendEquationSeparateIndexedAMD(buf: int, modeRGB: int,
                                      modeAlpha: int) -> None:
    """

    """


def glUniform1i64NV(location: int, x: long) -> None:
    """

    """


def glUniform2i64NV(location: int, x: long, y: long) -> None:
    """

    """


def glUniform3i64NV(location: int, x: long, y: long, z: long) -> None:
    """

    """


def glUniform4i64NV(location: int, x: long, y: long, z: long, w: long) -> None:
    """

    """


@overload
def glUniform1i64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform1i64vNV(location: int, count: int, value: Long1D,
                     value_offset: int) -> None:
    """

    """


@overload
def glUniform2i64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform2i64vNV(location: int, count: int, value: Long1D,
                     value_offset: int) -> None:
    """

    """


@overload
def glUniform3i64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform3i64vNV(location: int, count: int, value: Long1D,
                     value_offset: int) -> None:
    """

    """


@overload
def glUniform4i64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform4i64vNV(location: int, count: int, value: Long1D,
                     value_offset: int) -> None:
    """

    """


def glUniform1ui64NV(location: int, x: long) -> None:
    """

    """


def glUniform2ui64NV(location: int, x: long, y: long) -> None:
    """

    """


def glUniform3ui64NV(location: int, x: long, y: long, z: long) -> None:
    """

    """


def glUniform4ui64NV(location: int, x: long, y: long, z: long,
                     w: long) -> None:
    """

    """


@overload
def glUniform1ui64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform1ui64vNV(location: int, count: int, value: Long1D,
                      value_offset: int) -> None:
    """

    """


@overload
def glUniform2ui64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform2ui64vNV(location: int, count: int, value: Long1D,
                      value_offset: int) -> None:
    """

    """


@overload
def glUniform3ui64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform3ui64vNV(location: int, count: int, value: Long1D,
                      value_offset: int) -> None:
    """

    """


@overload
def glUniform4ui64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniform4ui64vNV(location: int, count: int, value: Long1D,
                      value_offset: int) -> None:
    """

    """


@overload
def glGetUniformi64vNV(program: int, location: int,
                       params: LongBuffer) -> None:
    """

    """


@overload
def glGetUniformi64vNV(program: int, location: int, params: Long1D,
                       params_offset: int) -> None:
    """

    """


def glProgramUniform1i64NV(program: int, location: int, x: long) -> None:
    """

    """


def glProgramUniform2i64NV(program: int, location: int, x: long,
                           y: long) -> None:
    """

    """


def glProgramUniform3i64NV(program: int, location: int, x: long, y: long,
                           z: long) -> None:
    """

    """


def glProgramUniform4i64NV(program: int, location: int, x: long, y: long,
                           z: long, w: long) -> None:
    """

    """


@overload
def glProgramUniform1i64vNV(program: int, location: int, count: int,
                            value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform1i64vNV(program: int, location: int, count: int,
                            value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform2i64vNV(program: int, location: int, count: int,
                            value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform2i64vNV(program: int, location: int, count: int,
                            value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform3i64vNV(program: int, location: int, count: int,
                            value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform3i64vNV(program: int, location: int, count: int,
                            value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform4i64vNV(program: int, location: int, count: int,
                            value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform4i64vNV(program: int, location: int, count: int,
                            value: Long1D, value_offset: int) -> None:
    """

    """


def glProgramUniform1ui64NV(program: int, location: int, x: long) -> None:
    """

    """


def glProgramUniform2ui64NV(program: int, location: int, x: long,
                            y: long) -> None:
    """

    """


def glProgramUniform3ui64NV(program: int, location: int, x: long, y: long,
                            z: long) -> None:
    """

    """


def glProgramUniform4ui64NV(program: int, location: int, x: long, y: long,
                            z: long, w: long) -> None:
    """

    """


@overload
def glProgramUniform1ui64vNV(program: int, location: int, count: int,
                             value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform1ui64vNV(program: int, location: int, count: int,
                             value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform2ui64vNV(program: int, location: int, count: int,
                             value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform2ui64vNV(program: int, location: int, count: int,
                             value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform3ui64vNV(program: int, location: int, count: int,
                             value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform3ui64vNV(program: int, location: int, count: int,
                             value: Long1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform4ui64vNV(program: int, location: int, count: int,
                             value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniform4ui64vNV(program: int, location: int, count: int,
                             value: Long1D, value_offset: int) -> None:
    """

    """


def glVertexAttribParameteriAMD(index: int, pname: int, param: int) -> None:
    """

    """


@overload
def glGenNamesAMD(identifier: int, num: int, names: IntBuffer) -> None:
    """

    """


@overload
def glGenNamesAMD(identifier: int, num: int, names: Int1D,
                  names_offset: int) -> None:
    """

    """


@overload
def glDeleteNamesAMD(identifier: int, num: int, names: IntBuffer) -> None:
    """

    """


@overload
def glDeleteNamesAMD(identifier: int, num: int, names: Int1D,
                     names_offset: int) -> None:
    """

    """


def glIsNameAMD(identifier: int, name: int) -> bool:
    """

    """


def glQueryObjectParameteruiAMD(target: int, id: int, pname: int,
                                param: int) -> None:
    """

    """


@overload
def glGetPerfMonitorGroupsAMD(numGroups: IntBuffer, groupsSize: int,
                              groups: IntBuffer) -> None:
    """

    """


@overload
def glGetPerfMonitorGroupsAMD(numGroups: Int1D, numGroups_offset: int,
                              groupsSize: int, groups: Int1D,
                              groups_offset: int) -> None:
    """

    """


@overload
def glGetPerfMonitorCountersAMD(group: int, numCounters: IntBuffer,
                                maxActiveCounters: IntBuffer, counterSize: int,
                                counters: IntBuffer) -> None:
    """

    """


@overload
def glGetPerfMonitorCountersAMD(group: int, numCounters: Int1D,
                                numCounters_offset: int,
                                maxActiveCounters: Int1D,
                                maxActiveCounters_offset: int,
                                counterSize: int, counters: Int1D,
                                counters_offset: int) -> None:
    """

    """


@overload
def glGetPerfMonitorGroupStringAMD(group: int, bufSize: int, length: IntBuffer,
                                   groupString: ByteBuffer) -> None:
    """

    """


@overload
def glGetPerfMonitorGroupStringAMD(group: int, bufSize: int, length: Int1D,
                                   length_offset: int, groupString: Byte1D,
                                   groupString_offset: int) -> None:
    """

    """


@overload
def glGetPerfMonitorCounterStringAMD(group: int, counter: int, bufSize: int,
                                     length: IntBuffer,
                                     counterString: ByteBuffer) -> None:
    """

    """


@overload
def glGetPerfMonitorCounterStringAMD(group: int, counter: int, bufSize: int,
                                     length: Int1D, length_offset: int,
                                     counterString: Byte1D,
                                     counterString_offset: int) -> None:
    """

    """


def glGetPerfMonitorCounterInfoAMD(group: int, counter: int, pname: int,
                                   data: Buffer) -> None:
    """

    """


@overload
def glGenPerfMonitorsAMD(n: int, monitors: IntBuffer) -> None:
    """

    """


@overload
def glGenPerfMonitorsAMD(n: int, monitors: Int1D,
                         monitors_offset: int) -> None:
    """

    """


@overload
def glDeletePerfMonitorsAMD(n: int, monitors: IntBuffer) -> None:
    """

    """


@overload
def glDeletePerfMonitorsAMD(n: int, monitors: Int1D,
                            monitors_offset: int) -> None:
    """

    """


@overload
def glSelectPerfMonitorCountersAMD(monitor: int, enable: bool, group: int,
                                   numCounters: int,
                                   counterList: IntBuffer) -> None:
    """

    """


@overload
def glSelectPerfMonitorCountersAMD(monitor: int, enable: bool, group: int,
                                   numCounters: int, counterList: Int1D,
                                   counterList_offset: int) -> None:
    """

    """


def glBeginPerfMonitorAMD(monitor: int) -> None:
    """

    """


def glEndPerfMonitorAMD(monitor: int) -> None:
    """

    """


@overload
def glGetPerfMonitorCounterDataAMD(monitor: int, pname: int, dataSize: int,
                                   data: IntBuffer,
                                   bytesWritten: IntBuffer) -> None:
    """

    """


@overload
def glGetPerfMonitorCounterDataAMD(monitor: int, pname: int, dataSize: int,
                                   data: Int1D, data_offset: int,
                                   bytesWritten: Int1D,
                                   bytesWritten_offset: int) -> None:
    """

    """


def glTexStorageSparseAMD(target: int, internalFormat: int, width: int,
                          height: int, depth: int, layers: int,
                          flags: int) -> None:
    """

    """


def glTextureStorageSparseAMD(texture: int, target: int, internalFormat: int,
                              width: int, height: int, depth: int, layers: int,
                              flags: int) -> None:
    """

    """


def glBufferParameteri(target: int, pname: int, param: int) -> None:
    """

    """


def glObjectPurgeableAPPLE(objectType: int, name: int, option: int) -> int:
    """

    """


def glObjectUnpurgeableAPPLE(objectType: int, name: int, option: int) -> int:
    """

    """


@overload
def glGetObjectParameterivAPPLE(objectType: int, name: int, pname: int,
                                params: IntBuffer) -> None:
    """

    """


@overload
def glGetObjectParameterivAPPLE(objectType: int, name: int, pname: int,
                                params: Int1D, params_offset: int) -> None:
    """

    """


def glTextureRangeAPPLE(target: int, length: int, pointer: Buffer) -> None:
    """

    """


def glVertexArrayRangeAPPLE(length: int, pointer: Buffer) -> None:
    """

    """


def glFlushVertexArrayRangeAPPLE(length: int, pointer: Buffer) -> None:
    """

    """


def glVertexArrayParameteriAPPLE(pname: int, param: int) -> None:
    """

    """


def glEnableVertexAttribAPPLE(index: int, pname: int) -> None:
    """

    """


def glDisableVertexAttribAPPLE(index: int, pname: int) -> None:
    """

    """


def glIsVertexAttribEnabledAPPLE(index: int, pname: int) -> bool:
    """

    """


@overload
def glMapVertexAttrib1dAPPLE(index: int, size: int, u1: double, u2: double,
                             stride: int, order: int,
                             points: DoubleBuffer) -> None:
    """

    """


@overload
def glMapVertexAttrib1dAPPLE(index: int, size: int, u1: double, u2: double,
                             stride: int, order: int, points: Double1D,
                             points_offset: int) -> None:
    """

    """


@overload
def glMapVertexAttrib1fAPPLE(index: int, size: int, u1: float, u2: float,
                             stride: int, order: int,
                             points: FloatBuffer) -> None:
    """

    """


@overload
def glMapVertexAttrib1fAPPLE(index: int, size: int, u1: float, u2: float,
                             stride: int, order: int, points: Float1D,
                             points_offset: int) -> None:
    """

    """


@overload
def glMapVertexAttrib2dAPPLE(index: int, size: int, u1: double, u2: double,
                             ustride: int, uorder: int, v1: double, v2: double,
                             vstride: int, vorder: int,
                             points: DoubleBuffer) -> None:
    """

    """


@overload
def glMapVertexAttrib2dAPPLE(index: int, size: int, u1: double, u2: double,
                             ustride: int, uorder: int, v1: double, v2: double,
                             vstride: int, vorder: int, points: Double1D,
                             points_offset: int) -> None:
    """

    """


@overload
def glMapVertexAttrib2fAPPLE(index: int, size: int, u1: float, u2: float,
                             ustride: int, uorder: int, v1: float, v2: float,
                             vstride: int, vorder: int,
                             points: FloatBuffer) -> None:
    """

    """


@overload
def glMapVertexAttrib2fAPPLE(index: int, size: int, u1: float, u2: float,
                             ustride: int, uorder: int, v1: float, v2: float,
                             vstride: int, vorder: int, points: Float1D,
                             points_offset: int) -> None:
    """

    """


@overload
def glDrawBuffersATI(n: int, bufs: IntBuffer) -> None:
    """

    """


@overload
def glDrawBuffersATI(n: int, bufs: Int1D, bufs_offset: int) -> None:
    """

    """


def glPNTrianglesiATI(pname: int, param: int) -> None:
    """

    """


def glPNTrianglesfATI(pname: int, param: float) -> None:
    """

    """


def glUniformBufferEXT(program: int, location: int, buffer: int) -> None:
    """

    """


def glGetUniformBufferSizeEXT(program: int, location: int) -> int:
    """

    """


def glGetUniformOffsetEXT(program: int, location: int) -> long:
    """

    """


def glLockArraysEXT(first: int, count: int) -> None:
    """

    """


def glUnlockArraysEXT() -> None:
    """

    """


@overload
def glCullParameterdvEXT(pname: int, params: DoubleBuffer) -> None:
    """

    """


@overload
def glCullParameterdvEXT(pname: int, params: Double1D,
                         params_offset: int) -> None:
    """

    """


@overload
def glCullParameterfvEXT(pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glCullParameterfvEXT(pname: int, params: Float1D,
                         params_offset: int) -> None:
    """

    """


def glDepthBoundsEXT(zmin: double, zmax: double) -> None:
    """

    """


@overload
def glMatrixLoadfEXT(mode: int, m: FloatBuffer) -> None:
    """

    """


@overload
def glMatrixLoadfEXT(mode: int, m: Float1D, m_offset: int) -> None:
    """

    """


@overload
def glMatrixLoaddEXT(mode: int, m: DoubleBuffer) -> None:
    """

    """


@overload
def glMatrixLoaddEXT(mode: int, m: Double1D, m_offset: int) -> None:
    """

    """


@overload
def glMatrixMultfEXT(mode: int, m: FloatBuffer) -> None:
    """

    """


@overload
def glMatrixMultfEXT(mode: int, m: Float1D, m_offset: int) -> None:
    """

    """


@overload
def glMatrixMultdEXT(mode: int, m: DoubleBuffer) -> None:
    """

    """


@overload
def glMatrixMultdEXT(mode: int, m: Double1D, m_offset: int) -> None:
    """

    """


def glMatrixLoadIdentityEXT(mode: int) -> None:
    """

    """


def glMatrixRotatefEXT(mode: int, angle: float, x: float, y: float,
                       z: float) -> None:
    """

    """


def glMatrixRotatedEXT(mode: int, angle: double, x: double, y: double,
                       z: double) -> None:
    """

    """


def glMatrixScalefEXT(mode: int, x: float, y: float, z: float) -> None:
    """

    """


def glMatrixScaledEXT(mode: int, x: double, y: double, z: double) -> None:
    """

    """


def glMatrixTranslatefEXT(mode: int, x: float, y: float, z: float) -> None:
    """

    """


def glMatrixTranslatedEXT(mode: int, x: double, y: double, z: double) -> None:
    """

    """


def glMatrixFrustumEXT(mode: int, left: double, right: double, bottom: double,
                       top: double, zNear: double, zFar: double) -> None:
    """

    """


def glMatrixOrthoEXT(mode: int, left: double, right: double, bottom: double,
                     top: double, zNear: double, zFar: double) -> None:
    """

    """


def glMatrixPopEXT(mode: int) -> None:
    """

    """


def glMatrixPushEXT(mode: int) -> None:
    """

    """


def glClientAttribDefaultEXT(mask: int) -> None:
    """

    """


def glPushClientAttribDefaultEXT(mask: int) -> None:
    """

    """


def glTextureParameterfEXT(texture: int, target: int, pname: int,
                           param: float) -> None:
    """

    """


@overload
def glTextureParameterfvEXT(texture: int, target: int, pname: int,
                            params: FloatBuffer) -> None:
    """

    """


@overload
def glTextureParameterfvEXT(texture: int, target: int, pname: int,
                            params: Float1D, params_offset: int) -> None:
    """

    """


def glTextureParameteriEXT(texture: int, target: int, pname: int,
                           param: int) -> None:
    """

    """


@overload
def glTextureParameterivEXT(texture: int, target: int, pname: int,
                            params: IntBuffer) -> None:
    """

    """


@overload
def glTextureParameterivEXT(texture: int, target: int, pname: int,
                            params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glTextureImage1DEXT(texture: int, target: int, level: int,
                        internalformat: int, width: int, border: int,
                        format: int, type: int, pixels: Buffer) -> None:
    """

    """


@overload
def glTextureImage1DEXT(texture: int, target: int, level: int,
                        internalformat: int, width: int, border: int,
                        format: int, type: int,
                        pixels_buffer_offset: long) -> None:
    """

    """


@overload
def glTextureImage2DEXT(texture: int, target: int, level: int,
                        internalformat: int, width: int, height: int,
                        border: int, format: int, type: int,
                        pixels: Buffer) -> None:
    """

    """


@overload
def glTextureImage2DEXT(texture: int, target: int, level: int,
                        internalformat: int, width: int, height: int,
                        border: int, format: int, type: int,
                        pixels_buffer_offset: long) -> None:
    """

    """


@overload
def glTextureSubImage1DEXT(texture: int, target: int, level: int, xoffset: int,
                           width: int, format: int, type: int,
                           pixels: Buffer) -> None:
    """

    """


@overload
def glTextureSubImage1DEXT(texture: int, target: int, level: int, xoffset: int,
                           width: int, format: int, type: int,
                           pixels_buffer_offset: long) -> None:
    """

    """


@overload
def glTextureSubImage2DEXT(texture: int, target: int, level: int, xoffset: int,
                           yoffset: int, width: int, height: int, format: int,
                           type: int, pixels: Buffer) -> None:
    """

    """


@overload
def glTextureSubImage2DEXT(texture: int, target: int, level: int, xoffset: int,
                           yoffset: int, width: int, height: int, format: int,
                           type: int, pixels_buffer_offset: long) -> None:
    """

    """


def glCopyTextureImage1DEXT(texture: int, target: int, level: int,
                            internalformat: int, x: int, y: int, width: int,
                            border: int) -> None:
    """

    """


def glCopyTextureImage2DEXT(texture: int, target: int, level: int,
                            internalformat: int, x: int, y: int, width: int,
                            height: int, border: int) -> None:
    """

    """


def glCopyTextureSubImage1DEXT(texture: int, target: int, level: int,
                               xoffset: int, x: int, y: int,
                               width: int) -> None:
    """

    """


def glCopyTextureSubImage2DEXT(texture: int, target: int, level: int,
                               xoffset: int, yoffset: int, x: int, y: int,
                               width: int, height: int) -> None:
    """

    """


def glGetTextureImageEXT(texture: int, target: int, level: int, format: int,
                         type: int, pixels: Buffer) -> None:
    """

    """


@overload
def glGetTextureParameterfvEXT(texture: int, target: int, pname: int,
                               params: FloatBuffer) -> None:
    """

    """


@overload
def glGetTextureParameterfvEXT(texture: int, target: int, pname: int,
                               params: Float1D, params_offset: int) -> None:
    """

    """


@overload
def glGetTextureParameterivEXT(texture: int, target: int, pname: int,
                               params: IntBuffer) -> None:
    """

    """


@overload
def glGetTextureParameterivEXT(texture: int, target: int, pname: int,
                               params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetTextureLevelParameterfvEXT(texture: int, target: int, level: int,
                                    pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetTextureLevelParameterfvEXT(texture: int, target: int, level: int,
                                    pname: int, params: Float1D,
                                    params_offset: int) -> None:
    """

    """


@overload
def glGetTextureLevelParameterivEXT(texture: int, target: int, level: int,
                                    pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetTextureLevelParameterivEXT(texture: int, target: int, level: int,
                                    pname: int, params: Int1D,
                                    params_offset: int) -> None:
    """

    """


@overload
def glTextureImage3DEXT(texture: int, target: int, level: int,
                        internalformat: int, width: int, height: int,
                        depth: int, border: int, format: int, type: int,
                        pixels: Buffer) -> None:
    """

    """


@overload
def glTextureImage3DEXT(texture: int, target: int, level: int,
                        internalformat: int, width: int, height: int,
                        depth: int, border: int, format: int, type: int,
                        pixels_buffer_offset: long) -> None:
    """

    """


@overload
def glTextureSubImage3DEXT(texture: int, target: int, level: int, xoffset: int,
                           yoffset: int, zoffset: int, width: int, height: int,
                           depth: int, format: int, type: int,
                           pixels: Buffer) -> None:
    """

    """


@overload
def glTextureSubImage3DEXT(texture: int, target: int, level: int, xoffset: int,
                           yoffset: int, zoffset: int, width: int, height: int,
                           depth: int, format: int, type: int,
                           pixels_buffer_offset: long) -> None:
    """

    """


def glCopyTextureSubImage3DEXT(texture: int, target: int, level: int,
                               xoffset: int, yoffset: int, zoffset: int,
                               x: int, y: int, width: int,
                               height: int) -> None:
    """

    """


def glBindMultiTextureEXT(texunit: int, target: int, texture: int) -> None:
    """

    """


def glMultiTexCoordPointerEXT(texunit: int, size: int, type: int, stride: int,
                              pointer: Buffer) -> None:
    """

    """


def glMultiTexEnvfEXT(texunit: int, target: int, pname: int,
                      param: float) -> None:
    """

    """


@overload
def glMultiTexEnvfvEXT(texunit: int, target: int, pname: int,
                       params: FloatBuffer) -> None:
    """

    """


@overload
def glMultiTexEnvfvEXT(texunit: int, target: int, pname: int, params: Float1D,
                       params_offset: int) -> None:
    """

    """


def glMultiTexEnviEXT(texunit: int, target: int, pname: int,
                      param: int) -> None:
    """

    """


@overload
def glMultiTexEnvivEXT(texunit: int, target: int, pname: int,
                       params: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexEnvivEXT(texunit: int, target: int, pname: int, params: Int1D,
                       params_offset: int) -> None:
    """

    """


def glMultiTexGendEXT(texunit: int, coord: int, pname: int,
                      param: double) -> None:
    """

    """


@overload
def glMultiTexGendvEXT(texunit: int, coord: int, pname: int,
                       params: DoubleBuffer) -> None:
    """

    """


@overload
def glMultiTexGendvEXT(texunit: int, coord: int, pname: int, params: Double1D,
                       params_offset: int) -> None:
    """

    """


def glMultiTexGenfEXT(texunit: int, coord: int, pname: int,
                      param: float) -> None:
    """

    """


@overload
def glMultiTexGenfvEXT(texunit: int, coord: int, pname: int,
                       params: FloatBuffer) -> None:
    """

    """


@overload
def glMultiTexGenfvEXT(texunit: int, coord: int, pname: int, params: Float1D,
                       params_offset: int) -> None:
    """

    """


def glMultiTexGeniEXT(texunit: int, coord: int, pname: int,
                      param: int) -> None:
    """

    """


@overload
def glMultiTexGenivEXT(texunit: int, coord: int, pname: int,
                       params: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexGenivEXT(texunit: int, coord: int, pname: int, params: Int1D,
                       params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexEnvfvEXT(texunit: int, target: int, pname: int,
                          params: FloatBuffer) -> None:
    """

    """


@overload
def glGetMultiTexEnvfvEXT(texunit: int, target: int, pname: int,
                          params: Float1D, params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexEnvivEXT(texunit: int, target: int, pname: int,
                          params: IntBuffer) -> None:
    """

    """


@overload
def glGetMultiTexEnvivEXT(texunit: int, target: int, pname: int, params: Int1D,
                          params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexGendvEXT(texunit: int, coord: int, pname: int,
                          params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetMultiTexGendvEXT(texunit: int, coord: int, pname: int,
                          params: Double1D, params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexGenfvEXT(texunit: int, coord: int, pname: int,
                          params: FloatBuffer) -> None:
    """

    """


@overload
def glGetMultiTexGenfvEXT(texunit: int, coord: int, pname: int,
                          params: Float1D, params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexGenivEXT(texunit: int, coord: int, pname: int,
                          params: IntBuffer) -> None:
    """

    """


@overload
def glGetMultiTexGenivEXT(texunit: int, coord: int, pname: int, params: Int1D,
                          params_offset: int) -> None:
    """

    """


def glMultiTexParameteriEXT(texunit: int, target: int, pname: int,
                            param: int) -> None:
    """

    """


@overload
def glMultiTexParameterivEXT(texunit: int, target: int, pname: int,
                             params: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexParameterivEXT(texunit: int, target: int, pname: int,
                             params: Int1D, params_offset: int) -> None:
    """

    """


def glMultiTexParameterfEXT(texunit: int, target: int, pname: int,
                            param: float) -> None:
    """

    """


@overload
def glMultiTexParameterfvEXT(texunit: int, target: int, pname: int,
                             params: FloatBuffer) -> None:
    """

    """


@overload
def glMultiTexParameterfvEXT(texunit: int, target: int, pname: int,
                             params: Float1D, params_offset: int) -> None:
    """

    """


def glMultiTexImage1DEXT(texunit: int, target: int, level: int,
                         internalformat: int, width: int, border: int,
                         format: int, type: int, pixels: Buffer) -> None:
    """

    """


def glMultiTexImage2DEXT(texunit: int, target: int, level: int,
                         internalformat: int, width: int, height: int,
                         border: int, format: int, type: int,
                         pixels: Buffer) -> None:
    """

    """


def glMultiTexSubImage1DEXT(texunit: int, target: int, level: int,
                            xoffset: int, width: int, format: int, type: int,
                            pixels: Buffer) -> None:
    """

    """


def glMultiTexSubImage2DEXT(texunit: int, target: int, level: int,
                            xoffset: int, yoffset: int, width: int,
                            height: int, format: int, type: int,
                            pixels: Buffer) -> None:
    """

    """


def glCopyMultiTexImage1DEXT(texunit: int, target: int, level: int,
                             internalformat: int, x: int, y: int, width: int,
                             border: int) -> None:
    """

    """


def glCopyMultiTexImage2DEXT(texunit: int, target: int, level: int,
                             internalformat: int, x: int, y: int, width: int,
                             height: int, border: int) -> None:
    """

    """


def glCopyMultiTexSubImage1DEXT(texunit: int, target: int, level: int,
                                xoffset: int, x: int, y: int,
                                width: int) -> None:
    """

    """


def glCopyMultiTexSubImage2DEXT(texunit: int, target: int, level: int,
                                xoffset: int, yoffset: int, x: int, y: int,
                                width: int, height: int) -> None:
    """

    """


def glGetMultiTexImageEXT(texunit: int, target: int, level: int, format: int,
                          type: int, pixels: Buffer) -> None:
    """

    """


@overload
def glGetMultiTexParameterfvEXT(texunit: int, target: int, pname: int,
                                params: FloatBuffer) -> None:
    """

    """


@overload
def glGetMultiTexParameterfvEXT(texunit: int, target: int, pname: int,
                                params: Float1D, params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexParameterivEXT(texunit: int, target: int, pname: int,
                                params: IntBuffer) -> None:
    """

    """


@overload
def glGetMultiTexParameterivEXT(texunit: int, target: int, pname: int,
                                params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexLevelParameterfvEXT(texunit: int, target: int, level: int,
                                     pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetMultiTexLevelParameterfvEXT(texunit: int, target: int, level: int,
                                     pname: int, params: Float1D,
                                     params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexLevelParameterivEXT(texunit: int, target: int, level: int,
                                     pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetMultiTexLevelParameterivEXT(texunit: int, target: int, level: int,
                                     pname: int, params: Int1D,
                                     params_offset: int) -> None:
    """

    """


def glMultiTexImage3DEXT(texunit: int, target: int, level: int,
                         internalformat: int, width: int, height: int,
                         depth: int, border: int, format: int, type: int,
                         pixels: Buffer) -> None:
    """

    """


def glMultiTexSubImage3DEXT(texunit: int, target: int, level: int,
                            xoffset: int, yoffset: int, zoffset: int,
                            width: int, height: int, depth: int, format: int,
                            type: int, pixels: Buffer) -> None:
    """

    """


def glCopyMultiTexSubImage3DEXT(texunit: int, target: int, level: int,
                                xoffset: int, yoffset: int, zoffset: int,
                                x: int, y: int, width: int,
                                height: int) -> None:
    """

    """


def glEnableClientStateIndexedEXT(array: int, index: int) -> None:
    """

    """


def glDisableClientStateIndexedEXT(array: int, index: int) -> None:
    """

    """


@overload
def glGetFloatIndexedvEXT(target: int, index: int, data: FloatBuffer) -> None:
    """

    """


@overload
def glGetFloatIndexedvEXT(target: int, index: int, data: Float1D,
                          data_offset: int) -> None:
    """

    """


@overload
def glGetDoubleIndexedvEXT(target: int, index: int,
                           data: DoubleBuffer) -> None:
    """

    """


@overload
def glGetDoubleIndexedvEXT(target: int, index: int, data: Double1D,
                           data_offset: int) -> None:
    """

    """


def glEnableIndexed(target: int, index: int) -> None:
    """

    """


def glDisableIndexed(target: int, index: int) -> None:
    """

    """


def glIsEnabledIndexed(target: int, index: int) -> bool:
    """

    """


@overload
def glGetIntegerIndexedv(target: int, index: int, data: IntBuffer) -> None:
    """

    """


@overload
def glGetIntegerIndexedv(target: int, index: int, data: Int1D,
                         data_offset: int) -> None:
    """

    """


@overload
def glGetBooleanIndexedv(target: int, index: int, data: ByteBuffer) -> None:
    """

    """


@overload
def glGetBooleanIndexedv(target: int, index: int, data: Byte1D,
                         data_offset: int) -> None:
    """

    """


def glCompressedTextureImage3DEXT(texture: int, target: int, level: int,
                                  internalformat: int, width: int, height: int,
                                  depth: int, border: int, imageSize: int,
                                  bits: Buffer) -> None:
    """

    """


def glCompressedTextureImage2DEXT(texture: int, target: int, level: int,
                                  internalformat: int, width: int, height: int,
                                  border: int, imageSize: int,
                                  bits: Buffer) -> None:
    """

    """


def glCompressedTextureImage1DEXT(texture: int, target: int, level: int,
                                  internalformat: int, width: int, border: int,
                                  imageSize: int, bits: Buffer) -> None:
    """

    """


def glCompressedTextureSubImage3DEXT(texture: int, target: int, level: int,
                                     xoffset: int, yoffset: int, zoffset: int,
                                     width: int, height: int, depth: int,
                                     format: int, imageSize: int,
                                     bits: Buffer) -> None:
    """

    """


def glCompressedTextureSubImage2DEXT(texture: int, target: int, level: int,
                                     xoffset: int, yoffset: int, width: int,
                                     height: int, format: int, imageSize: int,
                                     bits: Buffer) -> None:
    """

    """


def glCompressedTextureSubImage1DEXT(texture: int, target: int, level: int,
                                     xoffset: int, width: int, format: int,
                                     imageSize: int, bits: Buffer) -> None:
    """

    """


def glGetCompressedTextureImageEXT(texture: int, target: int, lod: int,
                                   img: Buffer) -> None:
    """

    """


def glCompressedMultiTexImage3DEXT(texunit: int, target: int, level: int,
                                   internalformat: int, width: int,
                                   height: int, depth: int, border: int,
                                   imageSize: int, bits: Buffer) -> None:
    """

    """


def glCompressedMultiTexImage2DEXT(texunit: int, target: int, level: int,
                                   internalformat: int, width: int,
                                   height: int, border: int, imageSize: int,
                                   bits: Buffer) -> None:
    """

    """


def glCompressedMultiTexImage1DEXT(texunit: int, target: int, level: int,
                                   internalformat: int, width: int,
                                   border: int, imageSize: int,
                                   bits: Buffer) -> None:
    """

    """


def glCompressedMultiTexSubImage3DEXT(texunit: int, target: int, level: int,
                                      xoffset: int, yoffset: int, zoffset: int,
                                      width: int, height: int, depth: int,
                                      format: int, imageSize: int,
                                      bits: Buffer) -> None:
    """

    """


def glCompressedMultiTexSubImage2DEXT(texunit: int, target: int, level: int,
                                      xoffset: int, yoffset: int, width: int,
                                      height: int, format: int, imageSize: int,
                                      bits: Buffer) -> None:
    """

    """


def glCompressedMultiTexSubImage1DEXT(texunit: int, target: int, level: int,
                                      xoffset: int, width: int, format: int,
                                      imageSize: int, bits: Buffer) -> None:
    """

    """


def glGetCompressedMultiTexImageEXT(texunit: int, target: int, lod: int,
                                    img: Buffer) -> None:
    """

    """


@overload
def glMatrixLoadTransposefEXT(mode: int, m: FloatBuffer) -> None:
    """

    """


@overload
def glMatrixLoadTransposefEXT(mode: int, m: Float1D, m_offset: int) -> None:
    """

    """


@overload
def glMatrixLoadTransposedEXT(mode: int, m: DoubleBuffer) -> None:
    """

    """


@overload
def glMatrixLoadTransposedEXT(mode: int, m: Double1D, m_offset: int) -> None:
    """

    """


@overload
def glMatrixMultTransposefEXT(mode: int, m: FloatBuffer) -> None:
    """

    """


@overload
def glMatrixMultTransposefEXT(mode: int, m: Float1D, m_offset: int) -> None:
    """

    """


@overload
def glMatrixMultTransposedEXT(mode: int, m: DoubleBuffer) -> None:
    """

    """


@overload
def glMatrixMultTransposedEXT(mode: int, m: Double1D, m_offset: int) -> None:
    """

    """


def glNamedBufferDataEXT(buffer: int, size: long, data: Buffer,
                         usage: int) -> None:
    """

    """


def glNamedBufferSubDataEXT(buffer: int, offset: long, size: long,
                            data: Buffer) -> None:
    """

    """


def glMapNamedBufferEXT(buffer: int, access: int) -> ByteBuffer:
    """

    """


def glUnmapNamedBufferEXT(buffer: int) -> bool:
    """

    """


@overload
def glGetNamedBufferParameterivEXT(buffer: int, pname: int,
                                   params: IntBuffer) -> None:
    """

    """


@overload
def glGetNamedBufferParameterivEXT(buffer: int, pname: int, params: Int1D,
                                   params_offset: int) -> None:
    """

    """


def glGetNamedBufferSubDataEXT(buffer: int, offset: long, size: long,
                               data: Buffer) -> None:
    """

    """


def glTextureBufferEXT(texture: int, target: int, internalformat: int,
                       buffer: int) -> None:
    """

    """


def glMultiTexBufferEXT(texunit: int, target: int, internalformat: int,
                        buffer: int) -> None:
    """

    """


@overload
def glTextureParameterIivEXT(texture: int, target: int, pname: int,
                             params: IntBuffer) -> None:
    """

    """


@overload
def glTextureParameterIivEXT(texture: int, target: int, pname: int,
                             params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glTextureParameterIuivEXT(texture: int, target: int, pname: int,
                              params: IntBuffer) -> None:
    """

    """


@overload
def glTextureParameterIuivEXT(texture: int, target: int, pname: int,
                              params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetTextureParameterIivEXT(texture: int, target: int, pname: int,
                                params: IntBuffer) -> None:
    """

    """


@overload
def glGetTextureParameterIivEXT(texture: int, target: int, pname: int,
                                params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetTextureParameterIuivEXT(texture: int, target: int, pname: int,
                                 params: IntBuffer) -> None:
    """

    """


@overload
def glGetTextureParameterIuivEXT(texture: int, target: int, pname: int,
                                 params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glMultiTexParameterIivEXT(texunit: int, target: int, pname: int,
                              params: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexParameterIivEXT(texunit: int, target: int, pname: int,
                              params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glMultiTexParameterIuivEXT(texunit: int, target: int, pname: int,
                               params: IntBuffer) -> None:
    """

    """


@overload
def glMultiTexParameterIuivEXT(texunit: int, target: int, pname: int,
                               params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexParameterIivEXT(texunit: int, target: int, pname: int,
                                 params: IntBuffer) -> None:
    """

    """


@overload
def glGetMultiTexParameterIivEXT(texunit: int, target: int, pname: int,
                                 params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetMultiTexParameterIuivEXT(texunit: int, target: int, pname: int,
                                  params: IntBuffer) -> None:
    """

    """


@overload
def glGetMultiTexParameterIuivEXT(texunit: int, target: int, pname: int,
                                  params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glNamedProgramLocalParameters4fvEXT(program: int, target: int, index: int,
                                        count: int,
                                        params: FloatBuffer) -> None:
    """

    """


@overload
def glNamedProgramLocalParameters4fvEXT(program: int, target: int, index: int,
                                        count: int, params: Float1D,
                                        params_offset: int) -> None:
    """

    """


def glNamedProgramLocalParameterI4iEXT(program: int, target: int, index: int,
                                       x: int, y: int, z: int, w: int) -> None:
    """

    """


@overload
def glNamedProgramLocalParameterI4ivEXT(program: int, target: int, index: int,
                                        params: IntBuffer) -> None:
    """

    """


@overload
def glNamedProgramLocalParameterI4ivEXT(program: int, target: int, index: int,
                                        params: Int1D,
                                        params_offset: int) -> None:
    """

    """


@overload
def glNamedProgramLocalParametersI4ivEXT(program: int, target: int, index: int,
                                         count: int,
                                         params: IntBuffer) -> None:
    """

    """


@overload
def glNamedProgramLocalParametersI4ivEXT(program: int, target: int, index: int,
                                         count: int, params: Int1D,
                                         params_offset: int) -> None:
    """

    """


def glNamedProgramLocalParameterI4uiEXT(program: int, target: int, index: int,
                                        x: int, y: int, z: int,
                                        w: int) -> None:
    """

    """


@overload
def glNamedProgramLocalParameterI4uivEXT(program: int, target: int, index: int,
                                         params: IntBuffer) -> None:
    """

    """


@overload
def glNamedProgramLocalParameterI4uivEXT(program: int, target: int, index: int,
                                         params: Int1D,
                                         params_offset: int) -> None:
    """

    """


@overload
def glNamedProgramLocalParametersI4uivEXT(program: int, target: int,
                                          index: int, count: int,
                                          params: IntBuffer) -> None:
    """

    """


@overload
def glNamedProgramLocalParametersI4uivEXT(program: int, target: int,
                                          index: int, count: int,
                                          params: Int1D,
                                          params_offset: int) -> None:
    """

    """


@overload
def glGetNamedProgramLocalParameterIivEXT(program: int, target: int,
                                          index: int,
                                          params: IntBuffer) -> None:
    """

    """


@overload
def glGetNamedProgramLocalParameterIivEXT(program: int, target: int,
                                          index: int, params: Int1D,
                                          params_offset: int) -> None:
    """

    """


@overload
def glGetNamedProgramLocalParameterIuivEXT(program: int, target: int,
                                           index: int,
                                           params: IntBuffer) -> None:
    """

    """


@overload
def glGetNamedProgramLocalParameterIuivEXT(program: int, target: int,
                                           index: int, params: Int1D,
                                           params_offset: int) -> None:
    """

    """


def glEnableClientStateiEXT(array: int, index: int) -> None:
    """

    """


def glDisableClientStateiEXT(array: int, index: int) -> None:
    """

    """


@overload
def glGetFloati_vEXT(pname: int, index: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetFloati_vEXT(pname: int, index: int, params: Float1D,
                     params_offset: int) -> None:
    """

    """


@overload
def glGetDoublei_vEXT(pname: int, index: int, params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetDoublei_vEXT(pname: int, index: int, params: Double1D,
                      params_offset: int) -> None:
    """

    """


def glGetPointeri_vEXT(pname: int, index: int, params: PointerBuffer) -> None:
    """

    """


def glNamedProgramStringEXT(program: int, target: int, format: int, len: int,
                            string: Buffer) -> None:
    """

    """


def glNamedProgramLocalParameter4dEXT(program: int, target: int, index: int,
                                      x: double, y: double, z: double,
                                      w: double) -> None:
    """

    """


@overload
def glNamedProgramLocalParameter4dvEXT(program: int, target: int, index: int,
                                       params: DoubleBuffer) -> None:
    """

    """


@overload
def glNamedProgramLocalParameter4dvEXT(program: int, target: int, index: int,
                                       params: Double1D,
                                       params_offset: int) -> None:
    """

    """


def glNamedProgramLocalParameter4fEXT(program: int, target: int, index: int,
                                      x: float, y: float, z: float,
                                      w: float) -> None:
    """

    """


@overload
def glNamedProgramLocalParameter4fvEXT(program: int, target: int, index: int,
                                       params: FloatBuffer) -> None:
    """

    """


@overload
def glNamedProgramLocalParameter4fvEXT(program: int, target: int, index: int,
                                       params: Float1D,
                                       params_offset: int) -> None:
    """

    """


@overload
def glGetNamedProgramLocalParameterdvEXT(program: int, target: int, index: int,
                                         params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetNamedProgramLocalParameterdvEXT(program: int, target: int, index: int,
                                         params: Double1D,
                                         params_offset: int) -> None:
    """

    """


@overload
def glGetNamedProgramLocalParameterfvEXT(program: int, target: int, index: int,
                                         params: FloatBuffer) -> None:
    """

    """


@overload
def glGetNamedProgramLocalParameterfvEXT(program: int, target: int, index: int,
                                         params: Float1D,
                                         params_offset: int) -> None:
    """

    """


@overload
def glGetNamedProgramivEXT(program: int, target: int, pname: int,
                           params: IntBuffer) -> None:
    """

    """


@overload
def glGetNamedProgramivEXT(program: int, target: int, pname: int,
                           params: Int1D, params_offset: int) -> None:
    """

    """


def glGetNamedProgramStringEXT(program: int, target: int, pname: int,
                               string: Buffer) -> None:
    """

    """


def glNamedRenderbufferStorageEXT(renderbuffer: int, internalformat: int,
                                  width: int, height: int) -> None:
    """

    """


@overload
def glGetNamedRenderbufferParameterivEXT(renderbuffer: int, pname: int,
                                         params: IntBuffer) -> None:
    """

    """


@overload
def glGetNamedRenderbufferParameterivEXT(renderbuffer: int, pname: int,
                                         params: Int1D,
                                         params_offset: int) -> None:
    """

    """


def glNamedRenderbufferStorageMultisampleEXT(renderbuffer: int, samples: int,
                                             internalformat: int, width: int,
                                             height: int) -> None:
    """

    """


def glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: int,
                                                     coverageSamples: int,
                                                     colorSamples: int,
                                                     internalformat: int,
                                                     width: int,
                                                     height: int) -> None:
    """

    """


def glCheckNamedFramebufferStatusEXT(framebuffer: int, target: int) -> int:
    """

    """


def glNamedFramebufferTexture1DEXT(framebuffer: int, attachment: int,
                                   textarget: int, texture: int,
                                   level: int) -> None:
    """

    """


def glNamedFramebufferTexture2DEXT(framebuffer: int, attachment: int,
                                   textarget: int, texture: int,
                                   level: int) -> None:
    """

    """


def glNamedFramebufferTexture3DEXT(framebuffer: int, attachment: int,
                                   textarget: int, texture: int, level: int,
                                   zoffset: int) -> None:
    """

    """


def glNamedFramebufferRenderbufferEXT(framebuffer: int, attachment: int,
                                      renderbuffertarget: int,
                                      renderbuffer: int) -> None:
    """

    """


@overload
def glGetNamedFramebufferAttachmentParameterivEXT(framebuffer: int,
                                                  attachment: int, pname: int,
                                                  params: IntBuffer) -> None:
    """

    """


@overload
def glGetNamedFramebufferAttachmentParameterivEXT(framebuffer: int,
                                                  attachment: int, pname: int,
                                                  params: Int1D,
                                                  params_offset: int) -> None:
    """

    """


def glGenerateTextureMipmapEXT(texture: int, target: int) -> None:
    """

    """


def glGenerateMultiTexMipmapEXT(texunit: int, target: int) -> None:
    """

    """


def glFramebufferDrawBufferEXT(framebuffer: int, mode: int) -> None:
    """

    """


@overload
def glFramebufferDrawBuffersEXT(framebuffer: int, n: int,
                                bufs: IntBuffer) -> None:
    """

    """


@overload
def glFramebufferDrawBuffersEXT(framebuffer: int, n: int, bufs: Int1D,
                                bufs_offset: int) -> None:
    """

    """


def glFramebufferReadBufferEXT(framebuffer: int, mode: int) -> None:
    """

    """


@overload
def glGetFramebufferParameterivEXT(framebuffer: int, pname: int,
                                   params: IntBuffer) -> None:
    """

    """


@overload
def glGetFramebufferParameterivEXT(framebuffer: int, pname: int, params: Int1D,
                                   params_offset: int) -> None:
    """

    """


def glNamedCopyBufferSubDataEXT(readBuffer: int, writeBuffer: int,
                                readOffset: long, writeOffset: long,
                                size: long) -> None:
    """

    """


def glNamedFramebufferTextureEXT(framebuffer: int, attachment: int,
                                 texture: int, level: int) -> None:
    """

    """


def glNamedFramebufferTextureLayerEXT(framebuffer: int, attachment: int,
                                      texture: int, level: int,
                                      layer: int) -> None:
    """

    """


def glNamedFramebufferTextureFaceEXT(framebuffer: int, attachment: int,
                                     texture: int, level: int,
                                     face: int) -> None:
    """

    """


def glTextureRenderbufferEXT(texture: int, target: int,
                             renderbuffer: int) -> None:
    """

    """


def glMultiTexRenderbufferEXT(texunit: int, target: int,
                              renderbuffer: int) -> None:
    """

    """


def glVertexArrayVertexOffsetEXT(vaobj: int, buffer: int, size: int, type: int,
                                 stride: int, offset: long) -> None:
    """

    """


def glVertexArrayColorOffsetEXT(vaobj: int, buffer: int, size: int, type: int,
                                stride: int, offset: long) -> None:
    """

    """


def glVertexArrayEdgeFlagOffsetEXT(vaobj: int, buffer: int, stride: int,
                                   offset: long) -> None:
    """

    """


def glVertexArrayIndexOffsetEXT(vaobj: int, buffer: int, type: int,
                                stride: int, offset: long) -> None:
    """

    """


def glVertexArrayNormalOffsetEXT(vaobj: int, buffer: int, type: int,
                                 stride: int, offset: long) -> None:
    """

    """


def glVertexArrayTexCoordOffsetEXT(vaobj: int, buffer: int, size: int,
                                   type: int, stride: int,
                                   offset: long) -> None:
    """

    """


def glVertexArrayMultiTexCoordOffsetEXT(vaobj: int, buffer: int, texunit: int,
                                        size: int, type: int, stride: int,
                                        offset: long) -> None:
    """

    """


def glVertexArrayFogCoordOffsetEXT(vaobj: int, buffer: int, type: int,
                                   stride: int, offset: long) -> None:
    """

    """


def glVertexArraySecondaryColorOffsetEXT(vaobj: int, buffer: int, size: int,
                                         type: int, stride: int,
                                         offset: long) -> None:
    """

    """


def glVertexArrayVertexAttribOffsetEXT(vaobj: int, buffer: int, index: int,
                                       size: int, type: int, normalized: bool,
                                       stride: int, offset: long) -> None:
    """

    """


def glVertexArrayVertexAttribIOffsetEXT(vaobj: int, buffer: int, index: int,
                                        size: int, type: int, stride: int,
                                        offset: long) -> None:
    """

    """


def glEnableVertexArrayEXT(vaobj: int, array: int) -> None:
    """

    """


def glDisableVertexArrayEXT(vaobj: int, array: int) -> None:
    """

    """


def glEnableVertexArrayAttribEXT(vaobj: int, index: int) -> None:
    """

    """


def glDisableVertexArrayAttribEXT(vaobj: int, index: int) -> None:
    """

    """


@overload
def glGetVertexArrayIntegervEXT(vaobj: int, pname: int,
                                param: IntBuffer) -> None:
    """

    """


@overload
def glGetVertexArrayIntegervEXT(vaobj: int, pname: int, param: Int1D,
                                param_offset: int) -> None:
    """

    """


def glGetVertexArrayPointervEXT(vaobj: int, pname: int,
                                param: PointerBuffer) -> None:
    """

    """


@overload
def glGetVertexArrayIntegeri_vEXT(vaobj: int, index: int, pname: int,
                                  param: IntBuffer) -> None:
    """

    """


@overload
def glGetVertexArrayIntegeri_vEXT(vaobj: int, index: int, pname: int,
                                  param: Int1D, param_offset: int) -> None:
    """

    """


def glGetVertexArrayPointeri_vEXT(vaobj: int, index: int, pname: int,
                                  param: PointerBuffer) -> None:
    """

    """


def glMapNamedBufferRangeEXT(buffer: int, offset: long, length: long,
                             access: int) -> ByteBuffer:
    """

    """


def glFlushMappedNamedBufferRangeEXT(buffer: int, offset: long,
                                     length: long) -> None:
    """

    """


def glNamedBufferStorageEXT(buffer: int, size: long, data: Buffer,
                            flags: int) -> None:
    """

    """


def glProgramUniform1dEXT(program: int, location: int, x: double) -> None:
    """

    """


def glProgramUniform2dEXT(program: int, location: int, x: double,
                          y: double) -> None:
    """

    """


def glProgramUniform3dEXT(program: int, location: int, x: double, y: double,
                          z: double) -> None:
    """

    """


def glProgramUniform4dEXT(program: int, location: int, x: double, y: double,
                          z: double, w: double) -> None:
    """

    """


@overload
def glProgramUniform1dvEXT(program: int, location: int, count: int,
                           value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniform1dvEXT(program: int, location: int, count: int,
                           value: Double1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform2dvEXT(program: int, location: int, count: int,
                           value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniform2dvEXT(program: int, location: int, count: int,
                           value: Double1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform3dvEXT(program: int, location: int, count: int,
                           value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniform3dvEXT(program: int, location: int, count: int,
                           value: Double1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform4dvEXT(program: int, location: int, count: int,
                           value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniform4dvEXT(program: int, location: int, count: int,
                           value: Double1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2dvEXT(program: int, location: int, count: int,
                                 transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2dvEXT(program: int, location: int, count: int,
                                 transpose: bool, value: Double1D,
                                 value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3dvEXT(program: int, location: int, count: int,
                                 transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3dvEXT(program: int, location: int, count: int,
                                 transpose: bool, value: Double1D,
                                 value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4dvEXT(program: int, location: int, count: int,
                                 transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4dvEXT(program: int, location: int, count: int,
                                 transpose: bool, value: Double1D,
                                 value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x3dvEXT(program: int, location: int, count: int,
                                   transpose: bool,
                                   value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x3dvEXT(program: int, location: int, count: int,
                                   transpose: bool, value: Double1D,
                                   value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x4dvEXT(program: int, location: int, count: int,
                                   transpose: bool,
                                   value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x4dvEXT(program: int, location: int, count: int,
                                   transpose: bool, value: Double1D,
                                   value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x2dvEXT(program: int, location: int, count: int,
                                   transpose: bool,
                                   value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x2dvEXT(program: int, location: int, count: int,
                                   transpose: bool, value: Double1D,
                                   value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x4dvEXT(program: int, location: int, count: int,
                                   transpose: bool,
                                   value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x4dvEXT(program: int, location: int, count: int,
                                   transpose: bool, value: Double1D,
                                   value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x2dvEXT(program: int, location: int, count: int,
                                   transpose: bool,
                                   value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x2dvEXT(program: int, location: int, count: int,
                                   transpose: bool, value: Double1D,
                                   value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x3dvEXT(program: int, location: int, count: int,
                                   transpose: bool,
                                   value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x3dvEXT(program: int, location: int, count: int,
                                   transpose: bool, value: Double1D,
                                   value_offset: int) -> None:
    """

    """


def glTextureBufferRangeEXT(texture: int, target: int, internalformat: int,
                            buffer: int, offset: long, size: long) -> None:
    """

    """


def glTextureStorage2DMultisampleEXT(texture: int, target: int, samples: int,
                                     internalformat: int, width: int,
                                     height: int,
                                     fixedsamplelocations: bool) -> None:
    """

    """


def glTextureStorage3DMultisampleEXT(texture: int, target: int, samples: int,
                                     internalformat: int, width: int,
                                     height: int, depth: int,
                                     fixedsamplelocations: bool) -> None:
    """

    """


def glVertexArrayBindVertexBufferEXT(vaobj: int, bindingindex: int,
                                     buffer: int, offset: long,
                                     stride: int) -> None:
    """

    """


def glVertexArrayVertexAttribFormatEXT(vaobj: int, attribindex: int, size: int,
                                       type: int, normalized: bool,
                                       relativeoffset: int) -> None:
    """

    """


def glVertexArrayVertexAttribIFormatEXT(vaobj: int, attribindex: int,
                                        size: int, type: int,
                                        relativeoffset: int) -> None:
    """

    """


def glVertexArrayVertexAttribLFormatEXT(vaobj: int, attribindex: int,
                                        size: int, type: int,
                                        relativeoffset: int) -> None:
    """

    """


def glVertexArrayVertexAttribBindingEXT(vaobj: int, attribindex: int,
                                        bindingindex: int) -> None:
    """

    """


def glVertexArrayVertexBindingDivisorEXT(vaobj: int, bindingindex: int,
                                         divisor: int) -> None:
    """

    """


def glVertexArrayVertexAttribLOffsetEXT(vaobj: int, buffer: int, index: int,
                                        size: int, type: int, stride: int,
                                        offset: long) -> None:
    """

    """


def glTexturePageCommitmentEXT(texture: int, level: int, xoffset: int,
                               yoffset: int, zoffset: int, width: int,
                               height: int, depth: int, commit: bool) -> None:
    """

    """


def glVertexArrayVertexAttribDivisorEXT(vaobj: int, index: int,
                                        divisor: int) -> None:
    """

    """


def glColorMaskIndexed(index: int, r: bool, g: bool, b: bool, a: bool) -> None:
    """

    """


@overload
def glProgramEnvParameters4fvEXT(target: int, index: int, count: int,
                                 params: FloatBuffer) -> None:
    """

    """


@overload
def glProgramEnvParameters4fvEXT(target: int, index: int, count: int,
                                 params: Float1D, params_offset: int) -> None:
    """

    """


@overload
def glProgramLocalParameters4fvEXT(target: int, index: int, count: int,
                                   params: FloatBuffer) -> None:
    """

    """


@overload
def glProgramLocalParameters4fvEXT(target: int, index: int, count: int,
                                   params: Float1D,
                                   params_offset: int) -> None:
    """

    """


def glIndexFuncEXT(func: int, ref: float) -> None:
    """

    """


def glIndexMaterialEXT(face: int, mode: int) -> None:
    """

    """


def glApplyTextureEXT(mode: int) -> None:
    """

    """


def glTextureLightEXT(pname: int) -> None:
    """

    """


def glTextureMaterialEXT(face: int, mode: int) -> None:
    """

    """


def glPixelTransformParameteriEXT(target: int, pname: int, param: int) -> None:
    """

    """


def glPixelTransformParameterfEXT(target: int, pname: int,
                                  param: float) -> None:
    """

    """


@overload
def glPixelTransformParameterivEXT(target: int, pname: int,
                                   params: IntBuffer) -> None:
    """

    """


@overload
def glPixelTransformParameterivEXT(target: int, pname: int, params: Int1D,
                                   params_offset: int) -> None:
    """

    """


@overload
def glPixelTransformParameterfvEXT(target: int, pname: int,
                                   params: FloatBuffer) -> None:
    """

    """


@overload
def glPixelTransformParameterfvEXT(target: int, pname: int, params: Float1D,
                                   params_offset: int) -> None:
    """

    """


@overload
def glGetPixelTransformParameterivEXT(target: int, pname: int,
                                      params: IntBuffer) -> None:
    """

    """


@overload
def glGetPixelTransformParameterivEXT(target: int, pname: int, params: Int1D,
                                      params_offset: int) -> None:
    """

    """


@overload
def glGetPixelTransformParameterfvEXT(target: int, pname: int,
                                      params: FloatBuffer) -> None:
    """

    """


@overload
def glGetPixelTransformParameterfvEXT(target: int, pname: int, params: Float1D,
                                      params_offset: int) -> None:
    """

    """


def glPolygonOffsetClampEXT(factor: float, units: float, clamp: float) -> None:
    """

    """


def glProvokingVertexEXT(mode: int) -> None:
    """

    """


def glRasterSamplesEXT(samples: int, fixedsamplelocations: bool) -> None:
    """

    """


def glStencilClearTagEXT(stencilTagBits: int, stencilClearTag: int) -> None:
    """

    """


def glActiveStencilFaceEXT(face: int) -> None:
    """

    """


def glClearColorIi(red: int, green: int, blue: int, alpha: int) -> None:
    """

    """


def glClearColorIui(red: int, green: int, blue: int, alpha: int) -> None:
    """

    """


def glTextureNormalEXT(mode: int) -> None:
    """

    """


@overload
def glGetQueryObjecti64vEXT(id: int, pname: int, params: LongBuffer) -> None:
    """

    """


@overload
def glGetQueryObjecti64vEXT(id: int, pname: int, params: Long1D,
                            params_offset: int) -> None:
    """

    """


@overload
def glGetQueryObjectui64vEXT(id: int, pname: int, params: LongBuffer) -> None:
    """

    """


@overload
def glGetQueryObjectui64vEXT(id: int, pname: int, params: Long1D,
                             params_offset: int) -> None:
    """

    """


def glBeginVertexShaderEXT() -> None:
    """

    """


def glEndVertexShaderEXT() -> None:
    """

    """


def glBindVertexShaderEXT(id: int) -> None:
    """

    """


def glGenVertexShadersEXT(range: int) -> int:
    """

    """


def glDeleteVertexShaderEXT(id: int) -> None:
    """

    """


def glShaderOp1EXT(op: int, res: int, arg1: int) -> None:
    """

    """


def glShaderOp2EXT(op: int, res: int, arg1: int, arg2: int) -> None:
    """

    """


def glShaderOp3EXT(op: int, res: int, arg1: int, arg2: int, arg3: int) -> None:
    """

    """


def glSwizzleEXT(res: int, ins: int, outX: int, outY: int, outZ: int,
                 outW: int) -> None:
    """

    """


def glWriteMaskEXT(res: int, ins: int, outX: int, outY: int, outZ: int,
                   outW: int) -> None:
    """

    """


def glInsertComponentEXT(res: int, src: int, num: int) -> None:
    """

    """


def glExtractComponentEXT(res: int, src: int, num: int) -> None:
    """

    """


def glGenSymbolsEXT(datatype: int, storagetype: int, range: int,
                    components: int) -> int:
    """

    """


def glSetInvariantEXT(id: int, type: int, addr: Buffer) -> None:
    """

    """


def glSetLocalConstantEXT(id: int, type: int, addr: Buffer) -> None:
    """

    """


@overload
def glVariantbvEXT(id: int, addr: ByteBuffer) -> None:
    """

    """


@overload
def glVariantbvEXT(id: int, addr: Byte1D, addr_offset: int) -> None:
    """

    """


@overload
def glVariantsvEXT(id: int, addr: ShortBuffer) -> None:
    """

    """


@overload
def glVariantsvEXT(id: int, addr: Short1D, addr_offset: int) -> None:
    """

    """


@overload
def glVariantivEXT(id: int, addr: IntBuffer) -> None:
    """

    """


@overload
def glVariantivEXT(id: int, addr: Int1D, addr_offset: int) -> None:
    """

    """


@overload
def glVariantfvEXT(id: int, addr: FloatBuffer) -> None:
    """

    """


@overload
def glVariantfvEXT(id: int, addr: Float1D, addr_offset: int) -> None:
    """

    """


@overload
def glVariantdvEXT(id: int, addr: DoubleBuffer) -> None:
    """

    """


@overload
def glVariantdvEXT(id: int, addr: Double1D, addr_offset: int) -> None:
    """

    """


@overload
def glVariantubvEXT(id: int, addr: ByteBuffer) -> None:
    """

    """


@overload
def glVariantubvEXT(id: int, addr: Byte1D, addr_offset: int) -> None:
    """

    """


@overload
def glVariantusvEXT(id: int, addr: ShortBuffer) -> None:
    """

    """


@overload
def glVariantusvEXT(id: int, addr: Short1D, addr_offset: int) -> None:
    """

    """


@overload
def glVariantuivEXT(id: int, addr: IntBuffer) -> None:
    """

    """


@overload
def glVariantuivEXT(id: int, addr: Int1D, addr_offset: int) -> None:
    """

    """


@overload
def glVariantPointerEXT(id: int, type: int, stride: int, addr: Buffer) -> None:
    """

    """


@overload
def glVariantPointerEXT(id: int, type: int, stride: int,
                        addr_buffer_offset: long) -> None:
    """

    """


def glEnableVariantClientStateEXT(id: int) -> None:
    """

    """


def glDisableVariantClientStateEXT(id: int) -> None:
    """

    """


def glBindLightParameterEXT(light: int, value: int) -> int:
    """

    """


def glBindMaterialParameterEXT(face: int, value: int) -> int:
    """

    """


def glBindTexGenParameterEXT(unit: int, coord: int, value: int) -> int:
    """

    """


def glBindTextureUnitParameterEXT(unit: int, value: int) -> int:
    """

    """


def glBindParameterEXT(value: int) -> int:
    """

    """


def glIsVariantEnabledEXT(id: int, cap: int) -> bool:
    """

    """


@overload
def glGetVariantBooleanvEXT(id: int, value: int, data: ByteBuffer) -> None:
    """

    """


@overload
def glGetVariantBooleanvEXT(id: int, value: int, data: Byte1D,
                            data_offset: int) -> None:
    """

    """


@overload
def glGetVariantIntegervEXT(id: int, value: int, data: IntBuffer) -> None:
    """

    """


@overload
def glGetVariantIntegervEXT(id: int, value: int, data: Int1D,
                            data_offset: int) -> None:
    """

    """


@overload
def glGetVariantFloatvEXT(id: int, value: int, data: FloatBuffer) -> None:
    """

    """


@overload
def glGetVariantFloatvEXT(id: int, value: int, data: Float1D,
                          data_offset: int) -> None:
    """

    """


@overload
def glGetInvariantBooleanvEXT(id: int, value: int, data: ByteBuffer) -> None:
    """

    """


@overload
def glGetInvariantBooleanvEXT(id: int, value: int, data: Byte1D,
                              data_offset: int) -> None:
    """

    """


@overload
def glGetInvariantIntegervEXT(id: int, value: int, data: IntBuffer) -> None:
    """

    """


@overload
def glGetInvariantIntegervEXT(id: int, value: int, data: Int1D,
                              data_offset: int) -> None:
    """

    """


@overload
def glGetInvariantFloatvEXT(id: int, value: int, data: FloatBuffer) -> None:
    """

    """


@overload
def glGetInvariantFloatvEXT(id: int, value: int, data: Float1D,
                            data_offset: int) -> None:
    """

    """


@overload
def glGetLocalConstantBooleanvEXT(id: int, value: int,
                                  data: ByteBuffer) -> None:
    """

    """


@overload
def glGetLocalConstantBooleanvEXT(id: int, value: int, data: Byte1D,
                                  data_offset: int) -> None:
    """

    """


@overload
def glGetLocalConstantIntegervEXT(id: int, value: int,
                                  data: IntBuffer) -> None:
    """

    """


@overload
def glGetLocalConstantIntegervEXT(id: int, value: int, data: Int1D,
                                  data_offset: int) -> None:
    """

    """


@overload
def glGetLocalConstantFloatvEXT(id: int, value: int,
                                data: FloatBuffer) -> None:
    """

    """


@overload
def glGetLocalConstantFloatvEXT(id: int, value: int, data: Float1D,
                                data_offset: int) -> None:
    """

    """


def glVertexWeightfEXT(weight: float) -> None:
    """

    """


@overload
def glVertexWeightfvEXT(weight: FloatBuffer) -> None:
    """

    """


@overload
def glVertexWeightfvEXT(weight: Float1D, weight_offset: int) -> None:
    """

    """


@overload
def glVertexWeightPointerEXT(size: int, type: int, stride: int,
                             pointer: Buffer) -> None:
    """

    """


@overload
def glVertexWeightPointerEXT(size: int, type: int, stride: int,
                             pointer_buffer_offset: long) -> None:
    """

    """


def glFrameTerminatorGREMEDY() -> None:
    """

    """


def glStringMarkerGREMEDY(len: int, string: Buffer) -> None:
    """

    """


def glBlendFuncSeparateINGR(sfactorRGB: int, dfactorRGB: int,
                            sfactorAlpha: int, dfactorAlpha: int) -> None:
    """

    """


def glSyncTextureINTEL(texture: int) -> None:
    """

    """


def glUnmapTexture2DINTEL(texture: int, level: int) -> None:
    """

    """


@overload
def glMapTexture2DINTEL(texture: int, level: int, access: int,
                        stride: IntBuffer, layout: IntBuffer) -> ByteBuffer:
    """

    """


@overload
def glMapTexture2DINTEL(texture: int, level: int, access: int, stride: Int1D,
                        stride_offset: int, layout: Int1D,
                        layout_offset: int) -> ByteBuffer:
    """

    """


def glBeginPerfQueryINTEL(queryHandle: int) -> None:
    """

    """


@overload
def glCreatePerfQueryINTEL(queryId: int, queryHandle: IntBuffer) -> None:
    """

    """


@overload
def glCreatePerfQueryINTEL(queryId: int, queryHandle: Int1D,
                           queryHandle_offset: int) -> None:
    """

    """


def glDeletePerfQueryINTEL(queryHandle: int) -> None:
    """

    """


def glEndPerfQueryINTEL(queryHandle: int) -> None:
    """

    """


@overload
def glGetFirstPerfQueryIdINTEL(queryId: IntBuffer) -> None:
    """

    """


@overload
def glGetFirstPerfQueryIdINTEL(queryId: Int1D, queryId_offset: int) -> None:
    """

    """


@overload
def glGetNextPerfQueryIdINTEL(queryId: int, nextQueryId: IntBuffer) -> None:
    """

    """


@overload
def glGetNextPerfQueryIdINTEL(queryId: int, nextQueryId: Int1D,
                              nextQueryId_offset: int) -> None:
    """

    """


@overload
def glGetPerfCounterInfoINTEL(queryId: int, counterId: int,
                              counterNameLength: int, counterName: ByteBuffer,
                              counterDescLength: int, counterDesc: ByteBuffer,
                              counterOffset: IntBuffer,
                              counterDataSize: IntBuffer,
                              counterTypeEnum: IntBuffer,
                              counterDataTypeEnum: IntBuffer,
                              rawCounterMaxValue: LongBuffer) -> None:
    """

    """


@overload
def glGetPerfCounterInfoINTEL(queryId: int, counterId: int,
                              counterNameLength: int, counterName: Byte1D,
                              counterName_offset: int, counterDescLength: int,
                              counterDesc: Byte1D, counterDesc_offset: int,
                              counterOffset: Int1D, counterOffset_offset: int,
                              counterDataSize: Int1D,
                              counterDataSize_offset: int,
                              counterTypeEnum: Int1D,
                              counterTypeEnum_offset: int,
                              counterDataTypeEnum: Int1D,
                              counterDataTypeEnum_offset: int,
                              rawCounterMaxValue: Long1D,
                              rawCounterMaxValue_offset: int) -> None:
    """

    """


@overload
def glGetPerfQueryDataINTEL(queryHandle: int, flags: int, dataSize: int,
                            data: Buffer, bytesWritten: IntBuffer) -> None:
    """

    """


@overload
def glGetPerfQueryDataINTEL(queryHandle: int, flags: int, dataSize: int,
                            data: Buffer, bytesWritten: Int1D,
                            bytesWritten_offset: int) -> None:
    """

    """


@overload
def glGetPerfQueryIdByNameINTEL(queryName: ByteBuffer,
                                queryId: IntBuffer) -> None:
    """

    """


@overload
def glGetPerfQueryIdByNameINTEL(queryName: Byte1D, queryName_offset: int,
                                queryId: Int1D, queryId_offset: int) -> None:
    """

    """


@overload
def glGetPerfQueryInfoINTEL(queryId: int, queryNameLength: int,
                            queryName: ByteBuffer, dataSize: IntBuffer,
                            noCounters: IntBuffer, noInstances: IntBuffer,
                            capsMask: IntBuffer) -> None:
    """

    """


@overload
def glGetPerfQueryInfoINTEL(queryId: int, queryNameLength: int,
                            queryName: Byte1D, queryName_offset: int,
                            dataSize: Int1D, dataSize_offset: int,
                            noCounters: Int1D, noCounters_offset: int,
                            noInstances: Int1D, noInstances_offset: int,
                            capsMask: Int1D, capsMask_offset: int) -> None:
    """

    """


def glBeginConditionalRenderNVX(id: int) -> None:
    """

    """


def glEndConditionalRenderNVX() -> None:
    """

    """


def glMultiDrawArraysIndirectBindlessNV(mode: int, indirect: Buffer,
                                        drawCount: int, stride: int,
                                        vertexBufferCount: int) -> None:
    """

    """


def glMultiDrawElementsIndirectBindlessNV(mode: int, type: int,
                                          indirect: Buffer, drawCount: int,
                                          stride: int,
                                          vertexBufferCount: int) -> None:
    """

    """


def glMultiDrawArraysIndirectBindlessCountNV(mode: int, indirect: Buffer,
                                             drawCount: int, maxDrawCount: int,
                                             stride: int,
                                             vertexBufferCount: int) -> None:
    """

    """


def glMultiDrawElementsIndirectBindlessCountNV(mode: int, type: int,
                                               indirect: Buffer,
                                               drawCount: int,
                                               maxDrawCount: int, stride: int,
                                               vertexBufferCount: int) -> None:
    """

    """


@overload
def glCreateStatesNV(n: int, states: IntBuffer) -> None:
    """

    """


@overload
def glCreateStatesNV(n: int, states: Int1D, states_offset: int) -> None:
    """

    """


@overload
def glDeleteStatesNV(n: int, states: IntBuffer) -> None:
    """

    """


@overload
def glDeleteStatesNV(n: int, states: Int1D, states_offset: int) -> None:
    """

    """


def glIsStateNV(state: int) -> bool:
    """

    """


def glStateCaptureNV(state: int, mode: int) -> None:
    """

    """


def glGetCommandHeaderNV(tokenID: int, size: int) -> int:
    """

    """


def glGetStageIndexNV(shadertype: int) -> short:
    """

    """


@overload
def glDrawCommandsNV(primitiveMode: int, buffer: int, indirects: PointerBuffer,
                     sizes: IntBuffer, count: int) -> None:
    """

    """


@overload
def glDrawCommandsNV(primitiveMode: int, buffer: int, indirects: PointerBuffer,
                     sizes: Int1D, sizes_offset: int, count: int) -> None:
    """

    """


@overload
def glDrawCommandsAddressNV(primitiveMode: int, indirects: LongBuffer,
                            sizes: IntBuffer, count: int) -> None:
    """

    """


@overload
def glDrawCommandsAddressNV(primitiveMode: int, indirects: Long1D,
                            indirects_offset: int, sizes: Int1D,
                            sizes_offset: int, count: int) -> None:
    """

    """


@overload
def glDrawCommandsStatesNV(buffer: int, indirects: PointerBuffer,
                           sizes: IntBuffer, states: IntBuffer,
                           fbos: IntBuffer, count: int) -> None:
    """

    """


@overload
def glDrawCommandsStatesNV(buffer: int, indirects: PointerBuffer, sizes: Int1D,
                           sizes_offset: int, states: Int1D,
                           states_offset: int, fbos: Int1D, fbos_offset: int,
                           count: int) -> None:
    """

    """


@overload
def glDrawCommandsStatesAddressNV(indirects: LongBuffer, sizes: IntBuffer,
                                  states: IntBuffer, fbos: IntBuffer,
                                  count: int) -> None:
    """

    """


@overload
def glDrawCommandsStatesAddressNV(indirects: Long1D, indirects_offset: int,
                                  sizes: Int1D, sizes_offset: int,
                                  states: Int1D, states_offset: int,
                                  fbos: Int1D, fbos_offset: int,
                                  count: int) -> None:
    """

    """


@overload
def glCreateCommandListsNV(n: int, lists: IntBuffer) -> None:
    """

    """


@overload
def glCreateCommandListsNV(n: int, lists: Int1D, lists_offset: int) -> None:
    """

    """


@overload
def glDeleteCommandListsNV(n: int, lists: IntBuffer) -> None:
    """

    """


@overload
def glDeleteCommandListsNV(n: int, lists: Int1D, lists_offset: int) -> None:
    """

    """


def glIsCommandListNV(list: int) -> bool:
    """

    """


@overload
def glListDrawCommandsStatesClientNV(list: int, segment: int,
                                     indirects: PointerBuffer,
                                     sizes: IntBuffer, states: IntBuffer,
                                     fbos: IntBuffer, count: int) -> None:
    """

    """


@overload
def glListDrawCommandsStatesClientNV(list: int, segment: int,
                                     indirects: PointerBuffer, sizes: Int1D,
                                     sizes_offset: int, states: Int1D,
                                     states_offset: int, fbos: Int1D,
                                     fbos_offset: int, count: int) -> None:
    """

    """


def glCommandListSegmentsNV(list: int, segments: int) -> None:
    """

    """


def glCompileCommandListNV(list: int) -> None:
    """

    """


def glCallCommandListNV(list: int) -> None:
    """

    """


def glSubpixelPrecisionBiasNV(xbits: int, ybits: int) -> None:
    """

    """


def glConservativeRasterParameterfNV(pname: int, value: float) -> None:
    """

    """


def glCopyImageSubDataNV(srcName: int, srcTarget: int, srcLevel: int,
                         srcX: int, srcY: int, srcZ: int, dstName: int,
                         dstTarget: int, dstLevel: int, dstX: int, dstY: int,
                         dstZ: int, width: int, height: int,
                         depth: int) -> None:
    """

    """


def glDrawTextureNV(texture: int, sampler: int, x0: float, y0: float,
                    x1: float, y1: float, z: float, s0: float, t0: float,
                    s1: float, t1: float) -> None:
    """

    """


def glMapControlPointsNV(target: int, index: int, type: int, ustride: int,
                         vstride: int, uorder: int, vorder: int, packed: bool,
                         points: Buffer) -> None:
    """

    """


@overload
def glMapParameterivNV(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glMapParameterivNV(target: int, pname: int, params: Int1D,
                       params_offset: int) -> None:
    """

    """


@overload
def glMapParameterfvNV(target: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glMapParameterfvNV(target: int, pname: int, params: Float1D,
                       params_offset: int) -> None:
    """

    """


def glGetMapControlPointsNV(target: int, index: int, type: int, ustride: int,
                            vstride: int, packed: bool,
                            points: Buffer) -> None:
    """

    """


@overload
def glGetMapParameterivNV(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetMapParameterivNV(target: int, pname: int, params: Int1D,
                          params_offset: int) -> None:
    """

    """


@overload
def glGetMapParameterfvNV(target: int, pname: int,
                          params: FloatBuffer) -> None:
    """

    """


@overload
def glGetMapParameterfvNV(target: int, pname: int, params: Float1D,
                          params_offset: int) -> None:
    """

    """


@overload
def glGetMapAttribParameterivNV(target: int, index: int, pname: int,
                                params: IntBuffer) -> None:
    """

    """


@overload
def glGetMapAttribParameterivNV(target: int, index: int, pname: int,
                                params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetMapAttribParameterfvNV(target: int, index: int, pname: int,
                                params: FloatBuffer) -> None:
    """

    """


@overload
def glGetMapAttribParameterfvNV(target: int, index: int, pname: int,
                                params: Float1D, params_offset: int) -> None:
    """

    """


def glEvalMapsNV(target: int, mode: int) -> None:
    """

    """


@overload
def glGetMultisamplefvNV(pname: int, index: int, val: FloatBuffer) -> None:
    """

    """


@overload
def glGetMultisamplefvNV(pname: int, index: int, val: Float1D,
                         val_offset: int) -> None:
    """

    """


def glSampleMaskIndexedNV(index: int, mask: int) -> None:
    """

    """


def glTexRenderbufferNV(target: int, renderbuffer: int) -> None:
    """

    """


def glFragmentCoverageColorNV(color: int) -> None:
    """

    """


@overload
def glCoverageModulationTableNV(n: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glCoverageModulationTableNV(n: int, v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glGetCoverageModulationTableNV(bufsize: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glGetCoverageModulationTableNV(bufsize: int, v: Float1D,
                                   v_offset: int) -> None:
    """

    """


def glCoverageModulationNV(components: int) -> None:
    """

    """


def glRenderbufferStorageMultisampleCoverageNV(target: int,
                                               coverageSamples: int,
                                               colorSamples: int,
                                               internalformat: int, width: int,
                                               height: int) -> None:
    """

    """


def glProgramVertexLimitNV(target: int, limit: int) -> None:
    """

    """


def glFramebufferTextureFaceEXT(target: int, attachment: int, texture: int,
                                level: int, face: int) -> None:
    """

    """


def glProgramLocalParameterI4iNV(target: int, index: int, x: int, y: int,
                                 z: int, w: int) -> None:
    """

    """


@overload
def glProgramLocalParameterI4ivNV(target: int, index: int,
                                  params: IntBuffer) -> None:
    """

    """


@overload
def glProgramLocalParameterI4ivNV(target: int, index: int, params: Int1D,
                                  params_offset: int) -> None:
    """

    """


@overload
def glProgramLocalParametersI4ivNV(target: int, index: int, count: int,
                                   params: IntBuffer) -> None:
    """

    """


@overload
def glProgramLocalParametersI4ivNV(target: int, index: int, count: int,
                                   params: Int1D, params_offset: int) -> None:
    """

    """


def glProgramLocalParameterI4uiNV(target: int, index: int, x: int, y: int,
                                  z: int, w: int) -> None:
    """

    """


@overload
def glProgramLocalParameterI4uivNV(target: int, index: int,
                                   params: IntBuffer) -> None:
    """

    """


@overload
def glProgramLocalParameterI4uivNV(target: int, index: int, params: Int1D,
                                   params_offset: int) -> None:
    """

    """


@overload
def glProgramLocalParametersI4uivNV(target: int, index: int, count: int,
                                    params: IntBuffer) -> None:
    """

    """


@overload
def glProgramLocalParametersI4uivNV(target: int, index: int, count: int,
                                    params: Int1D, params_offset: int) -> None:
    """

    """


def glProgramEnvParameterI4iNV(target: int, index: int, x: int, y: int, z: int,
                               w: int) -> None:
    """

    """


@overload
def glProgramEnvParameterI4ivNV(target: int, index: int,
                                params: IntBuffer) -> None:
    """

    """


@overload
def glProgramEnvParameterI4ivNV(target: int, index: int, params: Int1D,
                                params_offset: int) -> None:
    """

    """


@overload
def glProgramEnvParametersI4ivNV(target: int, index: int, count: int,
                                 params: IntBuffer) -> None:
    """

    """


@overload
def glProgramEnvParametersI4ivNV(target: int, index: int, count: int,
                                 params: Int1D, params_offset: int) -> None:
    """

    """


def glProgramEnvParameterI4uiNV(target: int, index: int, x: int, y: int,
                                z: int, w: int) -> None:
    """

    """


@overload
def glProgramEnvParameterI4uivNV(target: int, index: int,
                                 params: IntBuffer) -> None:
    """

    """


@overload
def glProgramEnvParameterI4uivNV(target: int, index: int, params: Int1D,
                                 params_offset: int) -> None:
    """

    """


@overload
def glProgramEnvParametersI4uivNV(target: int, index: int, count: int,
                                  params: IntBuffer) -> None:
    """

    """


@overload
def glProgramEnvParametersI4uivNV(target: int, index: int, count: int,
                                  params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetProgramLocalParameterIivNV(target: int, index: int,
                                    params: IntBuffer) -> None:
    """

    """


@overload
def glGetProgramLocalParameterIivNV(target: int, index: int, params: Int1D,
                                    params_offset: int) -> None:
    """

    """


@overload
def glGetProgramLocalParameterIuivNV(target: int, index: int,
                                     params: IntBuffer) -> None:
    """

    """


@overload
def glGetProgramLocalParameterIuivNV(target: int, index: int, params: Int1D,
                                     params_offset: int) -> None:
    """

    """


@overload
def glGetProgramEnvParameterIivNV(target: int, index: int,
                                  params: IntBuffer) -> None:
    """

    """


@overload
def glGetProgramEnvParameterIivNV(target: int, index: int, params: Int1D,
                                  params_offset: int) -> None:
    """

    """


@overload
def glGetProgramEnvParameterIuivNV(target: int, index: int,
                                   params: IntBuffer) -> None:
    """

    """


@overload
def glGetProgramEnvParameterIuivNV(target: int, index: int, params: Int1D,
                                   params_offset: int) -> None:
    """

    """


@overload
def glProgramSubroutineParametersuivNV(target: int, count: int,
                                       params: IntBuffer) -> None:
    """

    """


@overload
def glProgramSubroutineParametersuivNV(target: int, count: int, params: Int1D,
                                       params_offset: int) -> None:
    """

    """


@overload
def glGetProgramSubroutineParameteruivNV(target: int, index: int,
                                         param: IntBuffer) -> None:
    """

    """


@overload
def glGetProgramSubroutineParameteruivNV(target: int, index: int, param: Int1D,
                                         param_offset: int) -> None:
    """

    """


def glVertex2h(x: short, y: short) -> None:
    """

    """


@overload
def glVertex2hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glVertex2hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glVertex3h(x: short, y: short, z: short) -> None:
    """

    """


@overload
def glVertex3hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glVertex3hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glVertex4h(x: short, y: short, z: short, w: short) -> None:
    """

    """


@overload
def glVertex4hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glVertex4hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glNormal3h(nx: short, ny: short, nz: short) -> None:
    """

    """


@overload
def glNormal3hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glNormal3hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glColor3h(red: short, green: short, blue: short) -> None:
    """

    """


@overload
def glColor3hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glColor3hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glColor4h(red: short, green: short, blue: short, alpha: short) -> None:
    """

    """


@overload
def glColor4hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glColor4hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glTexCoord1h(s: short) -> None:
    """

    """


@overload
def glTexCoord1hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glTexCoord1hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glTexCoord2h(s: short, t: short) -> None:
    """

    """


@overload
def glTexCoord2hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glTexCoord2hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glTexCoord3h(s: short, t: short, r: short) -> None:
    """

    """


@overload
def glTexCoord3hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glTexCoord3hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glTexCoord4h(s: short, t: short, r: short, q: short) -> None:
    """

    """


@overload
def glTexCoord4hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glTexCoord4hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord1h(target: int, s: short) -> None:
    """

    """


@overload
def glMultiTexCoord1hv(target: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord1hv(target: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord2h(target: int, s: short, t: short) -> None:
    """

    """


@overload
def glMultiTexCoord2hv(target: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord2hv(target: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord3h(target: int, s: short, t: short, r: short) -> None:
    """

    """


@overload
def glMultiTexCoord3hv(target: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord3hv(target: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glMultiTexCoord4h(target: int, s: short, t: short, r: short,
                      q: short) -> None:
    """

    """


@overload
def glMultiTexCoord4hv(target: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glMultiTexCoord4hv(target: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glFogCoordh(fog: short) -> None:
    """

    """


@overload
def glFogCoordhv(fog: ShortBuffer) -> None:
    """

    """


@overload
def glFogCoordhv(fog: Short1D, fog_offset: int) -> None:
    """

    """


def glSecondaryColor3h(red: short, green: short, blue: short) -> None:
    """

    """


@overload
def glSecondaryColor3hv(v: ShortBuffer) -> None:
    """

    """


@overload
def glSecondaryColor3hv(v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexWeighth(weight: short) -> None:
    """

    """


@overload
def glVertexWeighthv(weight: ShortBuffer) -> None:
    """

    """


@overload
def glVertexWeighthv(weight: Short1D, weight_offset: int) -> None:
    """

    """


def glVertexAttrib1h(index: int, x: short) -> None:
    """

    """


@overload
def glVertexAttrib1hv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib1hv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib2h(index: int, x: short, y: short) -> None:
    """

    """


@overload
def glVertexAttrib2hv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib2hv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib3h(index: int, x: short, y: short, z: short) -> None:
    """

    """


@overload
def glVertexAttrib3hv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib3hv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4h(index: int, x: short, y: short, z: short,
                     w: short) -> None:
    """

    """


@overload
def glVertexAttrib4hv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4hv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribs1hv(index: int, n: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttribs1hv(index: int, n: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribs2hv(index: int, n: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttribs2hv(index: int, n: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribs3hv(index: int, n: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttribs3hv(index: int, n: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribs4hv(index: int, n: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttribs4hv(index: int, n: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glGenOcclusionQueriesNV(n: int, ids: IntBuffer) -> None:
    """

    """


@overload
def glGenOcclusionQueriesNV(n: int, ids: Int1D, ids_offset: int) -> None:
    """

    """


@overload
def glDeleteOcclusionQueriesNV(n: int, ids: IntBuffer) -> None:
    """

    """


@overload
def glDeleteOcclusionQueriesNV(n: int, ids: Int1D, ids_offset: int) -> None:
    """

    """


def glIsOcclusionQueryNV(id: int) -> bool:
    """

    """


def glBeginOcclusionQueryNV(id: int) -> None:
    """

    """


def glEndOcclusionQueryNV() -> None:
    """

    """


@overload
def glGetOcclusionQueryivNV(id: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetOcclusionQueryivNV(id: int, pname: int, params: Int1D,
                            params_offset: int) -> None:
    """

    """


@overload
def glGetOcclusionQueryuivNV(id: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetOcclusionQueryuivNV(id: int, pname: int, params: Int1D,
                             params_offset: int) -> None:
    """

    """


@overload
def glProgramBufferParametersfvNV(target: int, bindingIndex: int,
                                  wordIndex: int, count: int,
                                  params: FloatBuffer) -> None:
    """

    """


@overload
def glProgramBufferParametersfvNV(target: int, bindingIndex: int,
                                  wordIndex: int, count: int, params: Float1D,
                                  params_offset: int) -> None:
    """

    """


@overload
def glProgramBufferParametersIivNV(target: int, bindingIndex: int,
                                   wordIndex: int, count: int,
                                   params: IntBuffer) -> None:
    """

    """


@overload
def glProgramBufferParametersIivNV(target: int, bindingIndex: int,
                                   wordIndex: int, count: int, params: Int1D,
                                   params_offset: int) -> None:
    """

    """


@overload
def glProgramBufferParametersIuivNV(target: int, bindingIndex: int,
                                    wordIndex: int, count: int,
                                    params: IntBuffer) -> None:
    """

    """


@overload
def glProgramBufferParametersIuivNV(target: int, bindingIndex: int,
                                    wordIndex: int, count: int, params: Int1D,
                                    params_offset: int) -> None:
    """

    """


def glPixelDataRangeNV(target: int, length: int, pointer: Buffer) -> None:
    """

    """


def glFlushPixelDataRangeNV(target: int) -> None:
    """

    """


def glPrimitiveRestartNV() -> None:
    """

    """


def glPrimitiveRestartIndexNV(index: int) -> None:
    """

    """


@overload
def glFramebufferSampleLocationsfvNV(target: int, start: int, count: int,
                                     v: FloatBuffer) -> None:
    """

    """


@overload
def glFramebufferSampleLocationsfvNV(target: int, start: int, count: int,
                                     v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glNamedFramebufferSampleLocationsfvNV(framebuffer: int, start: int,
                                          count: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glNamedFramebufferSampleLocationsfvNV(framebuffer: int, start: int,
                                          count: int, v: Float1D,
                                          v_offset: int) -> None:
    """

    """


def glResolveDepthValuesNV() -> None:
    """

    """


def glTextureBarrierNV() -> None:
    """

    """


def glBindTransformFeedbackNV(target: int, id: int) -> None:
    """

    """


@overload
def glDeleteTransformFeedbacksNV(n: int, ids: IntBuffer) -> None:
    """

    """


@overload
def glDeleteTransformFeedbacksNV(n: int, ids: Int1D, ids_offset: int) -> None:
    """

    """


@overload
def glGenTransformFeedbacksNV(n: int, ids: IntBuffer) -> None:
    """

    """


@overload
def glGenTransformFeedbacksNV(n: int, ids: Int1D, ids_offset: int) -> None:
    """

    """


def glIsTransformFeedbackNV(id: int) -> bool:
    """

    """


def glPauseTransformFeedbackNV() -> None:
    """

    """


def glResumeTransformFeedbackNV() -> None:
    """

    """


def glDrawTransformFeedbackNV(mode: int, id: int) -> None:
    """

    """


def glVDPAUInitNV(vdpDevice: Buffer, getProcAddress: Buffer) -> None:
    """

    """


def glVDPAUFiniNV() -> None:
    """

    """


@overload
def glVDPAURegisterVideoSurfaceNV(vdpSurface: Buffer, target: int,
                                  numTextureNames: int,
                                  textureNames: IntBuffer) -> long:
    """

    """


@overload
def glVDPAURegisterVideoSurfaceNV(vdpSurface: Buffer, target: int,
                                  numTextureNames: int, textureNames: Int1D,
                                  textureNames_offset: int) -> long:
    """

    """


@overload
def glVDPAURegisterOutputSurfaceNV(vdpSurface: Buffer, target: int,
                                   numTextureNames: int,
                                   textureNames: IntBuffer) -> long:
    """

    """


@overload
def glVDPAURegisterOutputSurfaceNV(vdpSurface: Buffer, target: int,
                                   numTextureNames: int, textureNames: Int1D,
                                   textureNames_offset: int) -> long:
    """

    """


def glVDPAUIsSurfaceNV(surface: long) -> bool:
    """

    """


def glVDPAUUnregisterSurfaceNV(surface: long) -> None:
    """

    """


@overload
def glVDPAUGetSurfaceivNV(surface: long, pname: int, bufSize: int,
                          length: IntBuffer, values: IntBuffer) -> None:
    """

    """


@overload
def glVDPAUGetSurfaceivNV(surface: long, pname: int, bufSize: int,
                          length: Int1D, length_offset: int, values: Int1D,
                          values_offset: int) -> None:
    """

    """


def glVDPAUSurfaceAccessNV(surface: long, access: int) -> None:
    """

    """


def glVDPAUMapSurfacesNV(numSurfaces: int, surfaces: PointerBuffer) -> None:
    """

    """


def glVDPAUUnmapSurfacesNV(numSurface: int, surfaces: PointerBuffer) -> None:
    """

    """


def glVertexAttribL1i64NV(index: int, x: long) -> None:
    """

    """


def glVertexAttribL2i64NV(index: int, x: long, y: long) -> None:
    """

    """


def glVertexAttribL3i64NV(index: int, x: long, y: long, z: long) -> None:
    """

    """


def glVertexAttribL4i64NV(index: int, x: long, y: long, z: long,
                          w: long) -> None:
    """

    """


@overload
def glVertexAttribL1i64vNV(index: int, v: LongBuffer) -> None:
    """

    """


@overload
def glVertexAttribL1i64vNV(index: int, v: Long1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL2i64vNV(index: int, v: LongBuffer) -> None:
    """

    """


@overload
def glVertexAttribL2i64vNV(index: int, v: Long1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL3i64vNV(index: int, v: LongBuffer) -> None:
    """

    """


@overload
def glVertexAttribL3i64vNV(index: int, v: Long1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL4i64vNV(index: int, v: LongBuffer) -> None:
    """

    """


@overload
def glVertexAttribL4i64vNV(index: int, v: Long1D, v_offset: int) -> None:
    """

    """


def glVertexAttribL1ui64NV(index: int, x: long) -> None:
    """

    """


def glVertexAttribL2ui64NV(index: int, x: long, y: long) -> None:
    """

    """


def glVertexAttribL3ui64NV(index: int, x: long, y: long, z: long) -> None:
    """

    """


def glVertexAttribL4ui64NV(index: int, x: long, y: long, z: long,
                           w: long) -> None:
    """

    """


@overload
def glVertexAttribL1ui64vNV(index: int, v: LongBuffer) -> None:
    """

    """


@overload
def glVertexAttribL1ui64vNV(index: int, v: Long1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL2ui64vNV(index: int, v: LongBuffer) -> None:
    """

    """


@overload
def glVertexAttribL2ui64vNV(index: int, v: Long1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL3ui64vNV(index: int, v: LongBuffer) -> None:
    """

    """


@overload
def glVertexAttribL3ui64vNV(index: int, v: Long1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL4ui64vNV(index: int, v: LongBuffer) -> None:
    """

    """


@overload
def glVertexAttribL4ui64vNV(index: int, v: Long1D, v_offset: int) -> None:
    """

    """


@overload
def glGetVertexAttribLi64vNV(index: int, pname: int,
                             params: LongBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribLi64vNV(index: int, pname: int, params: Long1D,
                             params_offset: int) -> None:
    """

    """


@overload
def glGetVertexAttribLui64vNV(index: int, pname: int,
                              params: LongBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribLui64vNV(index: int, pname: int, params: Long1D,
                              params_offset: int) -> None:
    """

    """


def glVertexAttribLFormatNV(index: int, size: int, type: int,
                            stride: int) -> None:
    """

    """


def glVertexAttribI1iEXT(index: int, x: int) -> None:
    """

    """


def glVertexAttribI2iEXT(index: int, x: int, y: int) -> None:
    """

    """


def glVertexAttribI3iEXT(index: int, x: int, y: int, z: int) -> None:
    """

    """


def glVertexAttribI4iEXT(index: int, x: int, y: int, z: int, w: int) -> None:
    """

    """


def glVertexAttribI1uiEXT(index: int, x: int) -> None:
    """

    """


def glVertexAttribI2uiEXT(index: int, x: int, y: int) -> None:
    """

    """


def glVertexAttribI3uiEXT(index: int, x: int, y: int, z: int) -> None:
    """

    """


def glVertexAttribI4uiEXT(index: int, x: int, y: int, z: int, w: int) -> None:
    """

    """


@overload
def glVertexAttribI1ivEXT(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI1ivEXT(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI2ivEXT(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI2ivEXT(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI3ivEXT(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI3ivEXT(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4ivEXT(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4ivEXT(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI1uivEXT(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI1uivEXT(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI2uivEXT(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI2uivEXT(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI3uivEXT(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI3uivEXT(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4uivEXT(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4uivEXT(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4bvEXT(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4bvEXT(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4svEXT(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4svEXT(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4ubvEXT(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4ubvEXT(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4usvEXT(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4usvEXT(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttribIPointerEXT(index: int, size: int, type: int, stride: int,
                              pointer: Buffer) -> None:
    """

    """


@overload
def glGetVertexAttribIivEXT(index: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribIivEXT(index: int, pname: int, params: Int1D,
                            params_offset: int) -> None:
    """

    """


@overload
def glGetVertexAttribIuivEXT(index: int, pname: int,
                             params: IntBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribIuivEXT(index: int, pname: int, params: Int1D,
                             params_offset: int) -> None:
    """

    """


def glBeginVideoCaptureNV(video_capture_slot: int) -> None:
    """

    """


def glBindVideoCaptureStreamBufferNV(video_capture_slot: int, stream: int,
                                     frame_region: int, offset: long) -> None:
    """

    """


def glBindVideoCaptureStreamTextureNV(video_capture_slot: int, stream: int,
                                      frame_region: int, target: int,
                                      texture: int) -> None:
    """

    """


def glEndVideoCaptureNV(video_capture_slot: int) -> None:
    """

    """


@overload
def glGetVideoCaptureivNV(video_capture_slot: int, pname: int,
                          params: IntBuffer) -> None:
    """

    """


@overload
def glGetVideoCaptureivNV(video_capture_slot: int, pname: int, params: Int1D,
                          params_offset: int) -> None:
    """

    """


@overload
def glGetVideoCaptureStreamivNV(video_capture_slot: int, stream: int,
                                pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetVideoCaptureStreamivNV(video_capture_slot: int, stream: int,
                                pname: int, params: Int1D,
                                params_offset: int) -> None:
    """

    """


@overload
def glGetVideoCaptureStreamfvNV(video_capture_slot: int, stream: int,
                                pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetVideoCaptureStreamfvNV(video_capture_slot: int, stream: int,
                                pname: int, params: Float1D,
                                params_offset: int) -> None:
    """

    """


@overload
def glGetVideoCaptureStreamdvNV(video_capture_slot: int, stream: int,
                                pname: int, params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetVideoCaptureStreamdvNV(video_capture_slot: int, stream: int,
                                pname: int, params: Double1D,
                                params_offset: int) -> None:
    """

    """


@overload
def glVideoCaptureNV(video_capture_slot: int, sequence_num: IntBuffer,
                     capture_time: LongBuffer) -> int:
    """

    """


@overload
def glVideoCaptureNV(video_capture_slot: int, sequence_num: Int1D,
                     sequence_num_offset: int, capture_time: Long1D,
                     capture_time_offset: int) -> int:
    """

    """


@overload
def glVideoCaptureStreamParameterivNV(video_capture_slot: int, stream: int,
                                      pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glVideoCaptureStreamParameterivNV(video_capture_slot: int, stream: int,
                                      pname: int, params: Int1D,
                                      params_offset: int) -> None:
    """

    """


@overload
def glVideoCaptureStreamParameterfvNV(video_capture_slot: int, stream: int,
                                      pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glVideoCaptureStreamParameterfvNV(video_capture_slot: int, stream: int,
                                      pname: int, params: Float1D,
                                      params_offset: int) -> None:
    """

    """


@overload
def glVideoCaptureStreamParameterdvNV(video_capture_slot: int, stream: int,
                                      pname: int,
                                      params: DoubleBuffer) -> None:
    """

    """


@overload
def glVideoCaptureStreamParameterdvNV(video_capture_slot: int, stream: int,
                                      pname: int, params: Double1D,
                                      params_offset: int) -> None:
    """

    """


def glFramebufferTextureMultiviewOVR(target: int, attachment: int,
                                     texture: int, level: int,
                                     baseViewIndex: int,
                                     numViews: int) -> None:
    """

    """


def glHintPGI(target: int, mode: int) -> None:
    """

    """


def glFinishTextureSUNX() -> None:
    """

    """


@overload
def glVertexAttribPointer(indx: int, size: int, type: int, normalized: bool,
                          stride: int, ptr: Buffer) -> None:
    """

    """


@overload
def glDrawElementsInstanced(mode: int, count: int, type: int, indices: Buffer,
                            instancecount: int) -> None:
    """

    """


@overload
def glDrawRangeElements(mode: int, start: int, end: int, count: int, type: int,
                        indices: Buffer) -> None:
    """

    """


@overload
def glVertexAttribIPointer(index: int, size: int, type: int, stride: int,
                           pointer: Buffer) -> None:
    """

    """


def glAlphaFunc(func: int, ref: float) -> None:
    """

    """


def glFogf(pname: int, param: float) -> None:
    """

    """


@overload
def glFogfv(pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glFogfv(pname: int, params: Float1D, params_offset: int) -> None:
    """

    """


@overload
def glGetLightfv(light: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetLightfv(light: int, pname: int, params: Float1D,
                 params_offset: int) -> None:
    """

    """


@overload
def glGetMaterialfv(face: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetMaterialfv(face: int, pname: int, params: Float1D,
                    params_offset: int) -> None:
    """

    """


@overload
def glGetTexEnvfv(tenv: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetTexEnvfv(tenv: int, pname: int, params: Float1D,
                  params_offset: int) -> None:
    """

    """


def glLightModelf(pname: int, param: float) -> None:
    """

    """


@overload
def glLightModelfv(pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glLightModelfv(pname: int, params: Float1D, params_offset: int) -> None:
    """

    """


def glLightf(light: int, pname: int, param: float) -> None:
    """

    """


def glMultiTexCoord4f(target: int, s: float, t: float, r: float,
                      q: float) -> None:
    """

    """


def glNormal3f(nx: float, ny: float, nz: float) -> None:
    """

    """


def glPointParameterf(pname: int, param: float) -> None:
    """

    """


@overload
def glPointParameterfv(pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glPointParameterfv(pname: int, params: Float1D,
                       params_offset: int) -> None:
    """

    """


def glPointSize(size: float) -> None:
    """

    """


def glTexEnvf(target: int, pname: int, param: float) -> None:
    """

    """


@overload
def glTexEnvfv(target: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glTexEnvfv(target: int, pname: int, params: Float1D,
               params_offset: int) -> None:
    """

    """


def glClientActiveTexture(texture: int) -> None:
    """

    """


def glColor4ub(red: byte, green: byte, blue: byte, alpha: byte) -> None:
    """

    """


@overload
def glGetTexEnviv(tenv: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetTexEnviv(tenv: int, pname: int, params: Int1D,
                  params_offset: int) -> None:
    """

    """


def glLogicOp(opcode: int) -> None:
    """

    """


def glTexEnvi(target: int, pname: int, param: int) -> None:
    """

    """


@overload
def glTexEnviv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glTexEnviv(target: int, pname: int, params: Int1D,
               params_offset: int) -> None:
    """

    """


def glOrtho(left: double, right: double, bottom: double, top: double,
            near_val: double, far_val: double) -> None:
    """

    """


def glFrustum(left: double, right: double, bottom: double, top: double,
              zNear: double, zFar: double) -> None:
    """

    """


@overload
def glDrawElements(mode: int, count: int, type: int, indices: Buffer) -> None:
    """

    """


def glAttachShader(program: int, shader: int) -> None:
    """

    """


def glBindAttribLocation(program: int, index: int, name: String) -> None:
    """

    """


def glBlendColor(red: float, green: float, blue: float, alpha: float) -> None:
    """

    """


def glCompileShader(shader: int) -> None:
    """

    """


def glCreateProgram() -> int:
    """

    """


def glCreateShader(type: int) -> int:
    """

    """


def glDeleteProgram(program: int) -> None:
    """

    """


def glDeleteShader(shader: int) -> None:
    """

    """


def glDetachShader(program: int, shader: int) -> None:
    """

    """


def glDisableVertexAttribArray(index: int) -> None:
    """

    """


def glEnableVertexAttribArray(index: int) -> None:
    """

    """


@overload
def glGetActiveAttrib(program: int, index: int, bufSize: int,
                      length: IntBuffer, size: IntBuffer, type: IntBuffer,
                      name: ByteBuffer) -> None:
    """

    """


@overload
def glGetActiveAttrib(program: int, index: int, bufSize: int, length: Int1D,
                      length_offset: int, size: Int1D, size_offset: int,
                      type: Int1D, type_offset: int, name: Byte1D,
                      name_offset: int) -> None:
    """

    """


@overload
def glGetActiveUniform(program: int, index: int, bufSize: int,
                       length: IntBuffer, size: IntBuffer, type: IntBuffer,
                       name: ByteBuffer) -> None:
    """

    """


@overload
def glGetActiveUniform(program: int, index: int, bufSize: int, length: Int1D,
                       length_offset: int, size: Int1D, size_offset: int,
                       type: Int1D, type_offset: int, name: Byte1D,
                       name_offset: int) -> None:
    """

    """


@overload
def glGetAttachedShaders(program: int, maxCount: int, count: IntBuffer,
                         shaders: IntBuffer) -> None:
    """

    """


@overload
def glGetAttachedShaders(program: int, maxCount: int, count: Int1D,
                         count_offset: int, shaders: Int1D,
                         shaders_offset: int) -> None:
    """

    """


def glGetAttribLocation(program: int, name: String) -> int:
    """

    """


@overload
def glGetProgramiv(program: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetProgramiv(program: int, pname: int, params: Int1D,
                   params_offset: int) -> None:
    """

    """


@overload
def glGetProgramInfoLog(program: int, bufSize: int, length: IntBuffer,
                        infoLog: ByteBuffer) -> None:
    """

    """


@overload
def glGetProgramInfoLog(program: int, bufSize: int, length: Int1D,
                        length_offset: int, infoLog: Byte1D,
                        infoLog_offset: int) -> None:
    """

    """


@overload
def glGetShaderiv(shader: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetShaderiv(shader: int, pname: int, params: Int1D,
                  params_offset: int) -> None:
    """

    """


@overload
def glGetShaderInfoLog(shader: int, bufSize: int, length: IntBuffer,
                       infoLog: ByteBuffer) -> None:
    """

    """


@overload
def glGetShaderInfoLog(shader: int, bufSize: int, length: Int1D,
                       length_offset: int, infoLog: Byte1D,
                       infoLog_offset: int) -> None:
    """

    """


@overload
def glGetShaderSource(shader: int, bufSize: int, length: IntBuffer,
                      source: ByteBuffer) -> None:
    """

    """


@overload
def glGetShaderSource(shader: int, bufSize: int, length: Int1D,
                      length_offset: int, source: Byte1D,
                      source_offset: int) -> None:
    """

    """


@overload
def glGetUniformfv(program: int, location: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetUniformfv(program: int, location: int, params: Float1D,
                   params_offset: int) -> None:
    """

    """


@overload
def glGetUniformiv(program: int, location: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetUniformiv(program: int, location: int, params: Int1D,
                   params_offset: int) -> None:
    """

    """


def glGetUniformLocation(program: int, name: String) -> int:
    """

    """


@overload
def glGetVertexAttribfv(index: int, pname: int, params: FloatBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribfv(index: int, pname: int, params: Float1D,
                        params_offset: int) -> None:
    """

    """


@overload
def glGetVertexAttribiv(index: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribiv(index: int, pname: int, params: Int1D,
                        params_offset: int) -> None:
    """

    """


def glIsProgram(program: int) -> bool:
    """

    """


def glIsShader(shader: int) -> bool:
    """

    """


def glLinkProgram(program: int) -> None:
    """

    """


@overload
def glShaderSource(shader: int, count: int, string: String1D,
                   length: IntBuffer) -> None:
    """

    """


@overload
def glShaderSource(shader: int, count: int, string: String1D, length: Int1D,
                   length_offset: int) -> None:
    """

    """


def glStencilFuncSeparate(face: int, func: int, ref: int, mask: int) -> None:
    """

    """


def glStencilMaskSeparate(face: int, mask: int) -> None:
    """

    """


def glStencilOpSeparate(face: int, sfail: int, dpfail: int,
                        dppass: int) -> None:
    """

    """


def glUniform1f(location: int, v0: float) -> None:
    """

    """


@overload
def glUniform1fv(location: int, count: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glUniform1fv(location: int, count: int, value: Float1D,
                 value_offset: int) -> None:
    """

    """


def glUniform1i(location: int, v0: int) -> None:
    """

    """


@overload
def glUniform1iv(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform1iv(location: int, count: int, value: Int1D,
                 value_offset: int) -> None:
    """

    """


def glUniform2f(location: int, v0: float, v1: float) -> None:
    """

    """


@overload
def glUniform2fv(location: int, count: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glUniform2fv(location: int, count: int, value: Float1D,
                 value_offset: int) -> None:
    """

    """


def glUniform2i(location: int, v0: int, v1: int) -> None:
    """

    """


@overload
def glUniform2iv(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform2iv(location: int, count: int, value: Int1D,
                 value_offset: int) -> None:
    """

    """


def glUniform3f(location: int, v0: float, v1: float, v2: float) -> None:
    """

    """


@overload
def glUniform3fv(location: int, count: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glUniform3fv(location: int, count: int, value: Float1D,
                 value_offset: int) -> None:
    """

    """


def glUniform3i(location: int, v0: int, v1: int, v2: int) -> None:
    """

    """


@overload
def glUniform3iv(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform3iv(location: int, count: int, value: Int1D,
                 value_offset: int) -> None:
    """

    """


def glUniform4f(location: int, v0: float, v1: float, v2: float,
                v3: float) -> None:
    """

    """


@overload
def glUniform4fv(location: int, count: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glUniform4fv(location: int, count: int, value: Float1D,
                 value_offset: int) -> None:
    """

    """


def glUniform4i(location: int, v0: int, v1: int, v2: int, v3: int) -> None:
    """

    """


@overload
def glUniform4iv(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform4iv(location: int, count: int, value: Int1D,
                 value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix2fv(location: int, count: int, transpose: bool,
                       value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix2fv(location: int, count: int, transpose: bool,
                       value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix3fv(location: int, count: int, transpose: bool,
                       value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix3fv(location: int, count: int, transpose: bool,
                       value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix4fv(location: int, count: int, transpose: bool,
                       value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix4fv(location: int, count: int, transpose: bool,
                       value: Float1D, value_offset: int) -> None:
    """

    """


def glUseProgram(program: int) -> None:
    """

    """


def glValidateProgram(program: int) -> None:
    """

    """


def glVertexAttrib1f(index: int, x: float) -> None:
    """

    """


@overload
def glVertexAttrib1fv(index: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glVertexAttrib1fv(index: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib2f(index: int, x: float, y: float) -> None:
    """

    """


@overload
def glVertexAttrib2fv(index: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glVertexAttrib2fv(index: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib3f(index: int, x: float, y: float, z: float) -> None:
    """

    """


@overload
def glVertexAttrib3fv(index: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glVertexAttrib3fv(index: int, v: Float1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4f(index: int, x: float, y: float, z: float,
                     w: float) -> None:
    """

    """


@overload
def glVertexAttrib4fv(index: int, v: FloatBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4fv(index: int, v: Float1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribPointer(index: int, size: int, type: int, normalized: bool,
                          stride: int, pointer_buffer_offset: long) -> None:
    """

    """


def glTexImage2DMultisample(target: int, samples: int, internalformat: int,
                            width: int, height: int,
                            fixedsamplelocations: bool) -> None:
    """

    """


def glTexImage3DMultisample(target: int, samples: int, internalformat: int,
                            width: int, height: int, depth: int,
                            fixedsamplelocations: bool) -> None:
    """

    """


@overload
def glGetMultisamplefv(pname: int, index: int, val: FloatBuffer) -> None:
    """

    """


@overload
def glGetMultisamplefv(pname: int, index: int, val: Float1D,
                       val_offset: int) -> None:
    """

    """


def glSampleMaski(index: int, mask: int) -> None:
    """

    """


@overload
def glDebugMessageControl(source: int, type: int, severity: int, count: int,
                          ids: IntBuffer, enabled: bool) -> None:
    """

    """


@overload
def glDebugMessageControl(source: int, type: int, severity: int, count: int,
                          ids: Int1D, ids_offset: int, enabled: bool) -> None:
    """

    """


def glDebugMessageInsert(source: int, type: int, id: int, severity: int,
                         length: int, buf: String) -> None:
    """

    """


@overload
def glGetDebugMessageLog(count: int, bufSize: int, sources: IntBuffer,
                         types: IntBuffer, ids: IntBuffer,
                         severities: IntBuffer, lengths: IntBuffer,
                         messageLog: ByteBuffer) -> int:
    """

    """


@overload
def glGetDebugMessageLog(count: int, bufSize: int, sources: Int1D,
                         sources_offset: int, types: Int1D, types_offset: int,
                         ids: Int1D, ids_offset: int, severities: Int1D,
                         severities_offset: int, lengths: Int1D,
                         lengths_offset: int, messageLog: Byte1D,
                         messageLog_offset: int) -> int:
    """

    """


@overload
def glPushDebugGroup(source: int, id: int, length: int,
                     message: ByteBuffer) -> None:
    """

    """


@overload
def glPushDebugGroup(source: int, id: int, length: int, message: Byte1D,
                     message_offset: int) -> None:
    """

    """


def glPopDebugGroup() -> None:
    """

    """


@overload
def glObjectLabel(identifier: int, name: int, length: int,
                  label: ByteBuffer) -> None:
    """

    """


@overload
def glObjectLabel(identifier: int, name: int, length: int, label: Byte1D,
                  label_offset: int) -> None:
    """

    """


@overload
def glGetObjectLabel(identifier: int, name: int, bufSize: int,
                     length: IntBuffer, label: ByteBuffer) -> None:
    """

    """


@overload
def glGetObjectLabel(identifier: int, name: int, bufSize: int, length: Int1D,
                     length_offset: int, label: Byte1D,
                     label_offset: int) -> None:
    """

    """


@overload
def glObjectPtrLabel(ptr: Buffer, length: int, label: ByteBuffer) -> None:
    """

    """


@overload
def glObjectPtrLabel(ptr: Buffer, length: int, label: Byte1D,
                     label_offset: int) -> None:
    """

    """


@overload
def glGetObjectPtrLabel(ptr: Buffer, bufSize: int, length: IntBuffer,
                        label: ByteBuffer) -> None:
    """

    """


@overload
def glGetObjectPtrLabel(ptr: Buffer, bufSize: int, length: Int1D,
                        length_offset: int, label: Byte1D,
                        label_offset: int) -> None:
    """

    """


def glCopyImageSubData(srcName: int, srcTarget: int, srcLevel: int, srcX: int,
                       srcY: int, srcZ: int, dstName: int, dstTarget: int,
                       dstLevel: int, dstX: int, dstY: int, dstZ: int,
                       srcWidth: int, srcHeight: int, srcDepth: int) -> None:
    """

    """


@overload
def glGetProgramBinary(program: int, bufSize: int, length: IntBuffer,
                       binaryFormat: IntBuffer, binary: Buffer) -> None:
    """

    """


@overload
def glGetProgramBinary(program: int, bufSize: int, length: Int1D,
                       length_offset: int, binaryFormat: Int1D,
                       binaryFormat_offset: int, binary: Buffer) -> None:
    """

    """


def glProgramBinary(program: int, binaryFormat: int, binary: Buffer,
                    length: int) -> None:
    """

    """


@overload
def glTexImage3D(target: int, level: int, internalformat: int, width: int,
                 height: int, depth: int, border: int, format: int, type: int,
                 pixels: Buffer) -> None:
    """

    """


@overload
def glTexImage3D(target: int, level: int, internalformat: int, width: int,
                 height: int, depth: int, border: int, format: int, type: int,
                 pixels_buffer_offset: long) -> None:
    """

    """


@overload
def glTexSubImage3D(target: int, level: int, xoffset: int, yoffset: int,
                    zoffset: int, width: int, height: int, depth: int,
                    format: int, type: int, pixels: Buffer) -> None:
    """

    """


@overload
def glTexSubImage3D(target: int, level: int, xoffset: int, yoffset: int,
                    zoffset: int, width: int, height: int, depth: int,
                    format: int, type: int,
                    pixels_buffer_offset: long) -> None:
    """

    """


def glCopyTexSubImage3D(target: int, level: int, xoffset: int, yoffset: int,
                        zoffset: int, x: int, y: int, width: int,
                        height: int) -> None:
    """

    """


@overload
def glCompressedTexImage3D(target: int, level: int, internalformat: int,
                           width: int, height: int, depth: int, border: int,
                           imageSize: int, data: Buffer) -> None:
    """

    """


@overload
def glCompressedTexImage3D(target: int, level: int, internalformat: int,
                           width: int, height: int, depth: int, border: int,
                           imageSize: int, data_buffer_offset: long) -> None:
    """

    """


@overload
def glCompressedTexSubImage3D(target: int, level: int, xoffset: int,
                              yoffset: int, zoffset: int, width: int,
                              height: int, depth: int, format: int,
                              imageSize: int, data: Buffer) -> None:
    """

    """


@overload
def glCompressedTexSubImage3D(target: int, level: int, xoffset: int,
                              yoffset: int, zoffset: int, width: int,
                              height: int, depth: int, format: int,
                              imageSize: int,
                              data_buffer_offset: long) -> None:
    """

    """


def glFramebufferTexture3D(target: int, attachment: int, textarget: int,
                           texture: int, level: int, zoffset: int) -> None:
    """

    """


@overload
def glTexParameterIiv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glTexParameterIiv(target: int, pname: int, params: Int1D,
                      params_offset: int) -> None:
    """

    """


@overload
def glTexParameterIuiv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glTexParameterIuiv(target: int, pname: int, params: Int1D,
                       params_offset: int) -> None:
    """

    """


@overload
def glGetTexParameterIiv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetTexParameterIiv(target: int, pname: int, params: Int1D,
                         params_offset: int) -> None:
    """

    """


@overload
def glGetTexParameterIuiv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetTexParameterIuiv(target: int, pname: int, params: Int1D,
                          params_offset: int) -> None:
    """

    """


@overload
def glSamplerParameterIiv(sampler: int, pname: int, param: IntBuffer) -> None:
    """

    """


@overload
def glSamplerParameterIiv(sampler: int, pname: int, param: Int1D,
                          param_offset: int) -> None:
    """

    """


@overload
def glSamplerParameterIuiv(sampler: int, pname: int, param: IntBuffer) -> None:
    """

    """


@overload
def glSamplerParameterIuiv(sampler: int, pname: int, param: Int1D,
                           param_offset: int) -> None:
    """

    """


@overload
def glGetSamplerParameterIiv(sampler: int, pname: int,
                             params: IntBuffer) -> None:
    """

    """


@overload
def glGetSamplerParameterIiv(sampler: int, pname: int, params: Int1D,
                             params_offset: int) -> None:
    """

    """


@overload
def glGetSamplerParameterIuiv(sampler: int, pname: int,
                              params: IntBuffer) -> None:
    """

    """


@overload
def glGetSamplerParameterIuiv(sampler: int, pname: int, params: Int1D,
                              params_offset: int) -> None:
    """

    """


def glDrawArraysInstancedBaseInstance(mode: int, first: int, count: int,
                                      instancecount: int,
                                      baseinstance: int) -> None:
    """

    """


def glDrawElementsInstancedBaseInstance(mode: int, count: int, type: int,
                                        indices_buffer_offset: long,
                                        instancecount: int,
                                        baseinstance: int) -> None:
    """

    """


def glDrawElementsInstancedBaseVertexBaseInstance(mode: int, count: int,
                                                  type: int,
                                                  indices_buffer_offset: long,
                                                  instancecount: int,
                                                  basevertex: int,
                                                  baseinstance: int) -> None:
    """

    """


@overload
def glGenQueries(n: int, ids: IntBuffer) -> None:
    """

    """


@overload
def glGenQueries(n: int, ids: Int1D, ids_offset: int) -> None:
    """

    """


@overload
def glDeleteQueries(n: int, ids: IntBuffer) -> None:
    """

    """


@overload
def glDeleteQueries(n: int, ids: Int1D, ids_offset: int) -> None:
    """

    """


def glIsQuery(id: int) -> bool:
    """

    """


def glBeginQuery(target: int, id: int) -> None:
    """

    """


def glEndQuery(target: int) -> None:
    """

    """


def glQueryCounter(id: int, target: int) -> None:
    """

    """


@overload
def glGetQueryiv(target: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetQueryiv(target: int, pname: int, params: Int1D,
                 params_offset: int) -> None:
    """

    """


@overload
def glGetQueryObjectiv(id: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetQueryObjectiv(id: int, pname: int, params: Int1D,
                       params_offset: int) -> None:
    """

    """


@overload
def glGetQueryObjectuiv(id: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetQueryObjectuiv(id: int, pname: int, params: Int1D,
                        params_offset: int) -> None:
    """

    """


@overload
def glGetQueryObjecti64v(id: int, pname: int, params: LongBuffer) -> None:
    """

    """


@overload
def glGetQueryObjecti64v(id: int, pname: int, params: Long1D,
                         params_offset: int) -> None:
    """

    """


@overload
def glGetQueryObjectui64v(id: int, pname: int, params: LongBuffer) -> None:
    """

    """


@overload
def glGetQueryObjectui64v(id: int, pname: int, params: Long1D,
                          params_offset: int) -> None:
    """

    """


def glActiveShaderProgram(pipeline: int, program: int) -> None:
    """

    """


def glBindProgramPipeline(pipeline: int) -> None:
    """

    """


def glCreateShaderProgramv(type: int, count: int, strings: String1D) -> int:
    """

    """


@overload
def glDeleteProgramPipelines(n: int, pipelines: IntBuffer) -> None:
    """

    """


@overload
def glDeleteProgramPipelines(n: int, pipelines: Int1D,
                             pipelines_offset: int) -> None:
    """

    """


@overload
def glGenProgramPipelines(n: int, pipelines: IntBuffer) -> None:
    """

    """


@overload
def glGenProgramPipelines(n: int, pipelines: Int1D,
                          pipelines_offset: int) -> None:
    """

    """


@overload
def glGetProgramPipelineInfoLog(pipeline: int, bufSize: int, length: IntBuffer,
                                infoLog: ByteBuffer) -> None:
    """

    """


@overload
def glGetProgramPipelineInfoLog(pipeline: int, bufSize: int, length: Int1D,
                                length_offset: int, infoLog: Byte1D,
                                infoLog_offset: int) -> None:
    """

    """


@overload
def glGetProgramPipelineiv(pipeline: int, pname: int,
                           params: IntBuffer) -> None:
    """

    """


@overload
def glGetProgramPipelineiv(pipeline: int, pname: int, params: Int1D,
                           params_offset: int) -> None:
    """

    """


def glIsProgramPipeline(pipeline: int) -> bool:
    """

    """


def glProgramParameteri(program: int, pname: int, value: int) -> None:
    """

    """


def glProgramUniform1f(program: int, location: int, v0: float) -> None:
    """

    """


@overload
def glProgramUniform1fv(program: int, location: int, count: int,
                        value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniform1fv(program: int, location: int, count: int,
                        value: Float1D, value_offset: int) -> None:
    """

    """


def glProgramUniform1i(program: int, location: int, v0: int) -> None:
    """

    """


@overload
def glProgramUniform1iv(program: int, location: int, count: int,
                        value: IntBuffer) -> None:
    """

    """


@overload
def glProgramUniform1iv(program: int, location: int, count: int, value: Int1D,
                        value_offset: int) -> None:
    """

    """


def glProgramUniform2f(program: int, location: int, v0: float,
                       v1: float) -> None:
    """

    """


@overload
def glProgramUniform2fv(program: int, location: int, count: int,
                        value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniform2fv(program: int, location: int, count: int,
                        value: Float1D, value_offset: int) -> None:
    """

    """


def glProgramUniform2i(program: int, location: int, v0: int, v1: int) -> None:
    """

    """


@overload
def glProgramUniform2iv(program: int, location: int, count: int,
                        value: IntBuffer) -> None:
    """

    """


@overload
def glProgramUniform2iv(program: int, location: int, count: int, value: Int1D,
                        value_offset: int) -> None:
    """

    """


def glProgramUniform3f(program: int, location: int, v0: float, v1: float,
                       v2: float) -> None:
    """

    """


@overload
def glProgramUniform3fv(program: int, location: int, count: int,
                        value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniform3fv(program: int, location: int, count: int,
                        value: Float1D, value_offset: int) -> None:
    """

    """


def glProgramUniform3i(program: int, location: int, v0: int, v1: int,
                       v2: int) -> None:
    """

    """


@overload
def glProgramUniform3iv(program: int, location: int, count: int,
                        value: IntBuffer) -> None:
    """

    """


@overload
def glProgramUniform3iv(program: int, location: int, count: int, value: Int1D,
                        value_offset: int) -> None:
    """

    """


def glProgramUniform4f(program: int, location: int, v0: float, v1: float,
                       v2: float, v3: float) -> None:
    """

    """


@overload
def glProgramUniform4fv(program: int, location: int, count: int,
                        value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniform4fv(program: int, location: int, count: int,
                        value: Float1D, value_offset: int) -> None:
    """

    """


def glProgramUniform4i(program: int, location: int, v0: int, v1: int, v2: int,
                       v3: int) -> None:
    """

    """


@overload
def glProgramUniform4iv(program: int, location: int, count: int,
                        value: IntBuffer) -> None:
    """

    """


@overload
def glProgramUniform4iv(program: int, location: int, count: int, value: Int1D,
                        value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2fv(program: int, location: int, count: int,
                              transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2fv(program: int, location: int, count: int,
                              transpose: bool, value: Float1D,
                              value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3fv(program: int, location: int, count: int,
                              transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3fv(program: int, location: int, count: int,
                              transpose: bool, value: Float1D,
                              value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4fv(program: int, location: int, count: int,
                              transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4fv(program: int, location: int, count: int,
                              transpose: bool, value: Float1D,
                              value_offset: int) -> None:
    """

    """


def glUseProgramStages(pipeline: int, stages: int, program: int) -> None:
    """

    """


def glValidateProgramPipeline(pipeline: int) -> None:
    """

    """


def glProgramUniform1ui(program: int, location: int, v0: int) -> None:
    """

    """


def glProgramUniform2ui(program: int, location: int, v0: int, v1: int) -> None:
    """

    """


def glProgramUniform3ui(program: int, location: int, v0: int, v1: int,
                        v2: int) -> None:
    """

    """


def glProgramUniform4ui(program: int, location: int, v0: int, v1: int, v2: int,
                        v3: int) -> None:
    """

    """


@overload
def glProgramUniform1uiv(program: int, location: int, count: int,
                         value: IntBuffer) -> None:
    """

    """


@overload
def glProgramUniform1uiv(program: int, location: int, count: int, value: Int1D,
                         value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform2uiv(program: int, location: int, count: int,
                         value: IntBuffer) -> None:
    """

    """


@overload
def glProgramUniform2uiv(program: int, location: int, count: int, value: Int1D,
                         value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform3uiv(program: int, location: int, count: int,
                         value: IntBuffer) -> None:
    """

    """


@overload
def glProgramUniform3uiv(program: int, location: int, count: int, value: Int1D,
                         value_offset: int) -> None:
    """

    """


@overload
def glProgramUniform4uiv(program: int, location: int, count: int,
                         value: IntBuffer) -> None:
    """

    """


@overload
def glProgramUniform4uiv(program: int, location: int, count: int, value: Int1D,
                         value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x3fv(program: int, location: int, count: int,
                                transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x3fv(program: int, location: int, count: int,
                                transpose: bool, value: Float1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x2fv(program: int, location: int, count: int,
                                transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x2fv(program: int, location: int, count: int,
                                transpose: bool, value: Float1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x4fv(program: int, location: int, count: int,
                                transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x4fv(program: int, location: int, count: int,
                                transpose: bool, value: Float1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x2fv(program: int, location: int, count: int,
                                transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x2fv(program: int, location: int, count: int,
                                transpose: bool, value: Float1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x4fv(program: int, location: int, count: int,
                                transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x4fv(program: int, location: int, count: int,
                                transpose: bool, value: Float1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x3fv(program: int, location: int, count: int,
                                transpose: bool, value: FloatBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x3fv(program: int, location: int, count: int,
                                transpose: bool, value: Float1D,
                                value_offset: int) -> None:
    """

    """


def glApplyFramebufferAttachmentCMAAINTEL() -> None:
    """

    """


@overload
def glDrawBuffers(n: int, bufs: IntBuffer) -> None:
    """

    """


@overload
def glDrawBuffers(n: int, bufs: Int1D, bufs_offset: int) -> None:
    """

    """


def glReleaseShaderCompiler() -> None:
    """

    """


@overload
def glShaderBinary(n: int, shaders: IntBuffer, binaryformat: int,
                   binary: Buffer, length: int) -> None:
    """

    """


@overload
def glShaderBinary(n: int, shaders: Int1D, shaders_offset: int,
                   binaryformat: int, binary: Buffer, length: int) -> None:
    """

    """


@overload
def glGetShaderPrecisionFormat(shadertype: int, precisiontype: int,
                               range: IntBuffer, precision: IntBuffer) -> None:
    """

    """


@overload
def glGetShaderPrecisionFormat(shadertype: int, precisiontype: int,
                               range: Int1D, range_offset: int,
                               precision: Int1D,
                               precision_offset: int) -> None:
    """

    """


@overload
def glVertexAttribPointer(array: GLArrayData) -> None:
    """

    """


def glUniform(data: GLUniformData) -> None:
    """

    """


def glReadBuffer(mode: int) -> None:
    """

    """


@overload
def glGetTexLevelParameterfv(target: int, level: int, pname: int,
                             params: FloatBuffer) -> None:
    """

    """


@overload
def glGetTexLevelParameterfv(target: int, level: int, pname: int,
                             params: Float1D, params_offset: int) -> None:
    """

    """


@overload
def glGetTexLevelParameteriv(target: int, level: int, pname: int,
                             params: IntBuffer) -> None:
    """

    """


@overload
def glGetTexLevelParameteriv(target: int, level: int, pname: int,
                             params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glDrawRangeElements(mode: int, start: int, end: int, count: int, type: int,
                        indices_buffer_offset: long) -> None:
    """

    """


@overload
def glUniformMatrix2x3fv(location: int, count: int, transpose: bool,
                         value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix2x3fv(location: int, count: int, transpose: bool,
                         value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix3x2fv(location: int, count: int, transpose: bool,
                         value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix3x2fv(location: int, count: int, transpose: bool,
                         value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix2x4fv(location: int, count: int, transpose: bool,
                         value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix2x4fv(location: int, count: int, transpose: bool,
                         value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix4x2fv(location: int, count: int, transpose: bool,
                         value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix4x2fv(location: int, count: int, transpose: bool,
                         value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix3x4fv(location: int, count: int, transpose: bool,
                         value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix3x4fv(location: int, count: int, transpose: bool,
                         value: Float1D, value_offset: int) -> None:
    """

    """


@overload
def glUniformMatrix4x3fv(location: int, count: int, transpose: bool,
                         value: FloatBuffer) -> None:
    """

    """


@overload
def glUniformMatrix4x3fv(location: int, count: int, transpose: bool,
                         value: Float1D, value_offset: int) -> None:
    """

    """


def glColorMaski(index: int, r: bool, g: bool, b: bool, a: bool) -> None:
    """

    """


@overload
def glGetBooleani_v(target: int, index: int, data: ByteBuffer) -> None:
    """

    """


@overload
def glGetBooleani_v(target: int, index: int, data: Byte1D,
                    data_offset: int) -> None:
    """

    """


@overload
def glGetIntegeri_v(target: int, index: int, data: IntBuffer) -> None:
    """

    """


@overload
def glGetIntegeri_v(target: int, index: int, data: Int1D,
                    data_offset: int) -> None:
    """

    """


def glEnablei(target: int, index: int) -> None:
    """

    """


def glDisablei(target: int, index: int) -> None:
    """

    """


def glIsEnabledi(target: int, index: int) -> bool:
    """

    """


def glBeginTransformFeedback(primitiveMode: int) -> None:
    """

    """


def glEndTransformFeedback() -> None:
    """

    """


def glBindBufferRange(target: int, index: int, buffer: int, offset: long,
                      size: long) -> None:
    """

    """


def glBindBufferBase(target: int, index: int, buffer: int) -> None:
    """

    """


def glTransformFeedbackVaryings(program: int, count: int, varyings: String1D,
                                bufferMode: int) -> None:
    """

    """


@overload
def glGetTransformFeedbackVarying(program: int, index: int, bufSize: int,
                                  length: IntBuffer, size: IntBuffer,
                                  type: IntBuffer, name: ByteBuffer) -> None:
    """

    """


@overload
def glGetTransformFeedbackVarying(program: int, index: int, bufSize: int,
                                  length: Int1D, length_offset: int,
                                  size: Int1D, size_offset: int, type: Int1D,
                                  type_offset: int, name: Byte1D,
                                  name_offset: int) -> None:
    """

    """


def glBeginConditionalRender(id: int, mode: int) -> None:
    """

    """


def glEndConditionalRender() -> None:
    """

    """


@overload
def glVertexAttribIPointer(index: int, size: int, type: int, stride: int,
                           pointer_buffer_offset: long) -> None:
    """

    """


@overload
def glGetVertexAttribIiv(index: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribIiv(index: int, pname: int, params: Int1D,
                         params_offset: int) -> None:
    """

    """


@overload
def glGetVertexAttribIuiv(index: int, pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribIuiv(index: int, pname: int, params: Int1D,
                          params_offset: int) -> None:
    """

    """


def glVertexAttribI4i(index: int, x: int, y: int, z: int, w: int) -> None:
    """

    """


def glVertexAttribI4ui(index: int, x: int, y: int, z: int, w: int) -> None:
    """

    """


@overload
def glVertexAttribI4iv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4iv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4uiv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4uiv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glGetUniformuiv(program: int, location: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetUniformuiv(program: int, location: int, params: Int1D,
                    params_offset: int) -> None:
    """

    """


def glGetFragDataLocation(program: int, name: String) -> int:
    """

    """


def glUniform1ui(location: int, v0: int) -> None:
    """

    """


def glUniform2ui(location: int, v0: int, v1: int) -> None:
    """

    """


def glUniform3ui(location: int, v0: int, v1: int, v2: int) -> None:
    """

    """


def glUniform4ui(location: int, v0: int, v1: int, v2: int, v3: int) -> None:
    """

    """


@overload
def glUniform1uiv(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform1uiv(location: int, count: int, value: Int1D,
                  value_offset: int) -> None:
    """

    """


@overload
def glUniform2uiv(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform2uiv(location: int, count: int, value: Int1D,
                  value_offset: int) -> None:
    """

    """


@overload
def glUniform3uiv(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform3uiv(location: int, count: int, value: Int1D,
                  value_offset: int) -> None:
    """

    """


@overload
def glUniform4uiv(location: int, count: int, value: IntBuffer) -> None:
    """

    """


@overload
def glUniform4uiv(location: int, count: int, value: Int1D,
                  value_offset: int) -> None:
    """

    """


@overload
def glClearBufferiv(buffer: int, drawbuffer: int, value: IntBuffer) -> None:
    """

    """


@overload
def glClearBufferiv(buffer: int, drawbuffer: int, value: Int1D,
                    value_offset: int) -> None:
    """

    """


@overload
def glClearBufferuiv(buffer: int, drawbuffer: int, value: IntBuffer) -> None:
    """

    """


@overload
def glClearBufferuiv(buffer: int, drawbuffer: int, value: Int1D,
                     value_offset: int) -> None:
    """

    """


@overload
def glClearBufferfv(buffer: int, drawbuffer: int, value: FloatBuffer) -> None:
    """

    """


@overload
def glClearBufferfv(buffer: int, drawbuffer: int, value: Float1D,
                    value_offset: int) -> None:
    """

    """


def glClearBufferfi(buffer: int, drawbuffer: int, depth: float,
                    stencil: int) -> None:
    """

    """


def glGetStringi(name: int, index: int) -> String:
    """

    """


def glBlitFramebuffer(srcX0: int, srcY0: int, srcX1: int, srcY1: int,
                      dstX0: int, dstY0: int, dstX1: int, dstY1: int,
                      mask: int, filter: int) -> None:
    """

    """


def glFramebufferTextureLayer(target: int, attachment: int, texture: int,
                              level: int, layer: int) -> None:
    """

    """


def glBindVertexArray(array: int) -> None:
    """

    """


@overload
def glDeleteVertexArrays(n: int, arrays: IntBuffer) -> None:
    """

    """


@overload
def glDeleteVertexArrays(n: int, arrays: Int1D, arrays_offset: int) -> None:
    """

    """


@overload
def glGenVertexArrays(n: int, arrays: IntBuffer) -> None:
    """

    """


@overload
def glGenVertexArrays(n: int, arrays: Int1D, arrays_offset: int) -> None:
    """

    """


def glIsVertexArray(array: int) -> bool:
    """

    """


def glDrawArraysInstanced(mode: int, first: int, count: int,
                          instancecount: int) -> None:
    """

    """


@overload
def glDrawElementsInstanced(mode: int, count: int, type: int,
                            indices_buffer_offset: long,
                            instancecount: int) -> None:
    """

    """


def glTexBuffer(target: int, internalformat: int, buffer: int) -> None:
    """

    """


def glCopyBufferSubData(readTarget: int, writeTarget: int, readOffset: long,
                        writeOffset: long, size: long) -> None:
    """

    """


@overload
def glGetUniformIndices(program: int, uniformCount: int,
                        uniformNames: String1D,
                        uniformIndices: IntBuffer) -> None:
    """

    """


@overload
def glGetUniformIndices(program: int, uniformCount: int,
                        uniformNames: String1D, uniformIndices: Int1D,
                        uniformIndices_offset: int) -> None:
    """

    """


@overload
def glGetActiveUniformsiv(program: int, uniformCount: int,
                          uniformIndices: IntBuffer, pname: int,
                          params: IntBuffer) -> None:
    """

    """


@overload
def glGetActiveUniformsiv(program: int, uniformCount: int,
                          uniformIndices: Int1D, uniformIndices_offset: int,
                          pname: int, params: Int1D,
                          params_offset: int) -> None:
    """

    """


def glGetUniformBlockIndex(program: int, uniformBlockName: String) -> int:
    """

    """


@overload
def glGetActiveUniformBlockiv(program: int, uniformBlockIndex: int, pname: int,
                              params: IntBuffer) -> None:
    """

    """


@overload
def glGetActiveUniformBlockiv(program: int, uniformBlockIndex: int, pname: int,
                              params: Int1D, params_offset: int) -> None:
    """

    """


@overload
def glGetActiveUniformBlockName(program: int, uniformBlockIndex: int,
                                bufSize: int, length: IntBuffer,
                                uniformBlockName: ByteBuffer) -> None:
    """

    """


@overload
def glGetActiveUniformBlockName(program: int, uniformBlockIndex: int,
                                bufSize: int, length: Int1D,
                                length_offset: int, uniformBlockName: Byte1D,
                                uniformBlockName_offset: int) -> None:
    """

    """


def glUniformBlockBinding(program: int, uniformBlockIndex: int,
                          uniformBlockBinding: int) -> None:
    """

    """


def glVertexAttribDivisor(index: int, divisor: int) -> None:
    """

    """


def glMinSampleShading(value: float) -> None:
    """

    """


def glBlendEquationi(buf: int, mode: int) -> None:
    """

    """


def glBlendEquationSeparatei(buf: int, modeRGB: int, modeAlpha: int) -> None:
    """

    """


def glBlendFunci(buf: int, src: int, dst: int) -> None:
    """

    """


def glBlendFuncSeparatei(buf: int, srcRGB: int, dstRGB: int, srcAlpha: int,
                         dstAlpha: int) -> None:
    """

    """


def glBindTransformFeedback(target: int, id: int) -> None:
    """

    """


@overload
def glDeleteTransformFeedbacks(n: int, ids: IntBuffer) -> None:
    """

    """


@overload
def glDeleteTransformFeedbacks(n: int, ids: Int1D, ids_offset: int) -> None:
    """

    """


@overload
def glGenTransformFeedbacks(n: int, ids: IntBuffer) -> None:
    """

    """


@overload
def glGenTransformFeedbacks(n: int, ids: Int1D, ids_offset: int) -> None:
    """

    """


def glIsTransformFeedback(id: int) -> bool:
    """

    """


def glPauseTransformFeedback() -> None:
    """

    """


def glResumeTransformFeedback() -> None:
    """

    """


@overload
def glGetInternalformativ(target: int, internalformat: int, pname: int,
                          bufSize: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetInternalformativ(target: int, internalformat: int, pname: int,
                          bufSize: int, params: Int1D,
                          params_offset: int) -> None:
    """

    """


def glBindImageTexture(unit: int, texture: int, level: int, layered: bool,
                       layer: int, access: int, format: int) -> None:
    """

    """


def glMemoryBarrier(barriers: int) -> None:
    """

    """


def glFramebufferParameteri(target: int, pname: int, param: int) -> None:
    """

    """


@overload
def glGetFramebufferParameteriv(target: int, pname: int,
                                params: IntBuffer) -> None:
    """

    """


@overload
def glGetFramebufferParameteriv(target: int, pname: int, params: Int1D,
                                params_offset: int) -> None:
    """

    """


@overload
def glInvalidateFramebuffer(target: int, numAttachments: int,
                            attachments: IntBuffer) -> None:
    """

    """


@overload
def glInvalidateFramebuffer(target: int, numAttachments: int,
                            attachments: Int1D,
                            attachments_offset: int) -> None:
    """

    """


@overload
def glInvalidateSubFramebuffer(target: int, numAttachments: int,
                               attachments: IntBuffer, x: int, y: int,
                               width: int, height: int) -> None:
    """

    """


@overload
def glInvalidateSubFramebuffer(target: int, numAttachments: int,
                               attachments: Int1D, attachments_offset: int,
                               x: int, y: int, width: int,
                               height: int) -> None:
    """

    """


def glTexStorage2DMultisample(target: int, samples: int, internalformat: int,
                              width: int, height: int,
                              fixedsamplelocations: bool) -> None:
    """

    """


def glTexStorage3DMultisample(target: int, samples: int, internalformat: int,
                              width: int, height: int, depth: int,
                              fixedsamplelocations: bool) -> None:
    """

    """


@overload
def glGetnUniformuiv(program: int, location: int, bufSize: int,
                     params: IntBuffer) -> None:
    """

    """


@overload
def glGetnUniformuiv(program: int, location: int, bufSize: int, params: Int1D,
                     params_offset: int) -> None:
    """

    """


def glPrimitiveBoundingBox(minX: float, minY: float, minZ: float, minW: float,
                           maxX: float, maxY: float, maxZ: float,
                           maxW: float) -> None:
    """

    """


def glFramebufferTextureEXT(target: int, attachment: int, texture: int,
                            level: int) -> None:
    """

    """


def isPBOPackBound() -> bool:
    """

    """


def isPBOUnpackBound() -> bool:
    """

    """


def glPolygonMode(face: int, mode: int) -> None:
    """

    """


def glDrawBuffer(mode: int) -> None:
    """

    """


@overload
def glGetDoublev(pname: int, params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetDoublev(pname: int, params: Double1D, params_offset: int) -> None:
    """

    """


def glPixelStoref(pname: int, param: float) -> None:
    """

    """


@overload
def glTexImage1D(target: int, level: int, internalFormat: int, width: int,
                 border: int, format: int, type: int, pixels: Buffer) -> None:
    """

    """


@overload
def glTexImage1D(target: int, level: int, internalFormat: int, width: int,
                 border: int, format: int, type: int,
                 pixels_buffer_offset: long) -> None:
    """

    """


@overload
def glGetTexImage(target: int, level: int, format: int, type: int,
                  pixels: Buffer) -> None:
    """

    """


@overload
def glGetTexImage(target: int, level: int, format: int, type: int,
                  pixels_buffer_offset: long) -> None:
    """

    """


@overload
def glTexSubImage1D(target: int, level: int, xoffset: int, width: int,
                    format: int, type: int, pixels: Buffer) -> None:
    """

    """


@overload
def glTexSubImage1D(target: int, level: int, xoffset: int, width: int,
                    format: int, type: int,
                    pixels_buffer_offset: long) -> None:
    """

    """


def glCopyTexImage1D(target: int, level: int, internalformat: int, x: int,
                     y: int, width: int, border: int) -> None:
    """

    """


def glCopyTexSubImage1D(target: int, level: int, xoffset: int, x: int, y: int,
                        width: int) -> None:
    """

    """


@overload
def glCompressedTexImage1D(target: int, level: int, internalformat: int,
                           width: int, border: int, imageSize: int,
                           data: Buffer) -> None:
    """

    """


@overload
def glCompressedTexImage1D(target: int, level: int, internalformat: int,
                           width: int, border: int, imageSize: int,
                           data_buffer_offset: long) -> None:
    """

    """


@overload
def glCompressedTexSubImage1D(target: int, level: int, xoffset: int,
                              width: int, format: int, imageSize: int,
                              data: Buffer) -> None:
    """

    """


@overload
def glCompressedTexSubImage1D(target: int, level: int, xoffset: int,
                              width: int, format: int, imageSize: int,
                              data_buffer_offset: long) -> None:
    """

    """


@overload
def glGetCompressedTexImage(target: int, level: int, img: Buffer) -> None:
    """

    """


@overload
def glGetCompressedTexImage(target: int, level: int,
                            img_buffer_offset: long) -> None:
    """

    """


@overload
def glMultiDrawArrays(mode: int, first: IntBuffer, count: IntBuffer,
                      drawcount: int) -> None:
    """

    """


@overload
def glMultiDrawArrays(mode: int, first: Int1D, first_offset: int, count: Int1D,
                      count_offset: int, drawcount: int) -> None:
    """

    """


def glMultiDrawElements(mode: int, count: IntBuffer, type: int,
                        indices: PointerBuffer, drawcount: int) -> None:
    """

    """


def glPointParameteri(pname: int, param: int) -> None:
    """

    """


@overload
def glPointParameteriv(pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glPointParameteriv(pname: int, params: Int1D, params_offset: int) -> None:
    """

    """


def glGetBufferSubData(target: int, offset: long, size: long,
                       data: Buffer) -> None:
    """

    """


@overload
def glGetVertexAttribdv(index: int, pname: int, params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribdv(index: int, pname: int, params: Double1D,
                        params_offset: int) -> None:
    """

    """


def glVertexAttrib1d(index: int, x: double) -> None:
    """

    """


@overload
def glVertexAttrib1dv(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttrib1dv(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib1s(index: int, x: short) -> None:
    """

    """


@overload
def glVertexAttrib1sv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib1sv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib2d(index: int, x: double, y: double) -> None:
    """

    """


@overload
def glVertexAttrib2dv(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttrib2dv(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib2s(index: int, x: short, y: short) -> None:
    """

    """


@overload
def glVertexAttrib2sv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib2sv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib3d(index: int, x: double, y: double, z: double) -> None:
    """

    """


@overload
def glVertexAttrib3dv(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttrib3dv(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib3s(index: int, x: short, y: short, z: short) -> None:
    """

    """


@overload
def glVertexAttrib3sv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib3sv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4Nbv(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4Nbv(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4Niv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4Niv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4Nsv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4Nsv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4Nub(index: int, x: byte, y: byte, z: byte, w: byte) -> None:
    """

    """


@overload
def glVertexAttrib4Nubv(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4Nubv(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4Nuiv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4Nuiv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4Nusv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4Nusv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4bv(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4bv(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4d(index: int, x: double, y: double, z: double,
                     w: double) -> None:
    """

    """


@overload
def glVertexAttrib4dv(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4dv(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4iv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4iv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


def glVertexAttrib4s(index: int, x: short, y: short, z: short,
                     w: short) -> None:
    """

    """


@overload
def glVertexAttrib4sv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4sv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4ubv(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4ubv(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4uiv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4uiv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttrib4usv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttrib4usv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glClampColor(target: int, clamp: int) -> None:
    """

    """


def glVertexAttribI1i(index: int, x: int) -> None:
    """

    """


def glVertexAttribI2i(index: int, x: int, y: int) -> None:
    """

    """


def glVertexAttribI3i(index: int, x: int, y: int, z: int) -> None:
    """

    """


def glVertexAttribI1ui(index: int, x: int) -> None:
    """

    """


def glVertexAttribI2ui(index: int, x: int, y: int) -> None:
    """

    """


def glVertexAttribI3ui(index: int, x: int, y: int, z: int) -> None:
    """

    """


@overload
def glVertexAttribI1iv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI1iv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI2iv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI2iv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI3iv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI3iv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI1uiv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI1uiv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI2uiv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI2uiv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI3uiv(index: int, v: IntBuffer) -> None:
    """

    """


@overload
def glVertexAttribI3uiv(index: int, v: Int1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4bv(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4bv(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4sv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4sv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4ubv(index: int, v: ByteBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4ubv(index: int, v: Byte1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribI4usv(index: int, v: ShortBuffer) -> None:
    """

    """


@overload
def glVertexAttribI4usv(index: int, v: Short1D, v_offset: int) -> None:
    """

    """


def glBindFragDataLocation(program: int, color: int, name: String) -> None:
    """

    """


def glFramebufferTexture1D(target: int, attachment: int, textarget: int,
                           texture: int, level: int) -> None:
    """

    """


def glPrimitiveRestartIndex(index: int) -> None:
    """

    """


@overload
def glGetActiveUniformName(program: int, uniformIndex: int, bufSize: int,
                           length: IntBuffer, uniformName: ByteBuffer) -> None:
    """

    """


@overload
def glGetActiveUniformName(program: int, uniformIndex: int, bufSize: int,
                           length: Int1D, length_offset: int,
                           uniformName: Byte1D,
                           uniformName_offset: int) -> None:
    """

    """


def glProvokingVertex(mode: int) -> None:
    """

    """


def glDrawTransformFeedback(mode: int, id: int) -> None:
    """

    """


def glDrawTransformFeedbackStream(mode: int, id: int, stream: int) -> None:
    """

    """


def glBeginQueryIndexed(target: int, index: int, id: int) -> None:
    """

    """


def glEndQueryIndexed(target: int, index: int) -> None:
    """

    """


@overload
def glGetQueryIndexediv(target: int, index: int, pname: int,
                        params: IntBuffer) -> None:
    """

    """


@overload
def glGetQueryIndexediv(target: int, index: int, pname: int, params: Int1D,
                        params_offset: int) -> None:
    """

    """


def glProgramUniform1d(program: int, location: int, v0: double) -> None:
    """

    """


@overload
def glProgramUniform1dv(program: int, location: int, count: int,
                        value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniform1dv(program: int, location: int, count: int,
                        value: Double1D, value_offset: int) -> None:
    """

    """


def glProgramUniform2d(program: int, location: int, v0: double,
                       v1: double) -> None:
    """

    """


@overload
def glProgramUniform2dv(program: int, location: int, count: int,
                        value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniform2dv(program: int, location: int, count: int,
                        value: Double1D, value_offset: int) -> None:
    """

    """


def glProgramUniform3d(program: int, location: int, v0: double, v1: double,
                       v2: double) -> None:
    """

    """


@overload
def glProgramUniform3dv(program: int, location: int, count: int,
                        value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniform3dv(program: int, location: int, count: int,
                        value: Double1D, value_offset: int) -> None:
    """

    """


def glProgramUniform4d(program: int, location: int, v0: double, v1: double,
                       v2: double, v3: double) -> None:
    """

    """


@overload
def glProgramUniform4dv(program: int, location: int, count: int,
                        value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniform4dv(program: int, location: int, count: int,
                        value: Double1D, value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2dv(program: int, location: int, count: int,
                              transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2dv(program: int, location: int, count: int,
                              transpose: bool, value: Double1D,
                              value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3dv(program: int, location: int, count: int,
                              transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3dv(program: int, location: int, count: int,
                              transpose: bool, value: Double1D,
                              value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4dv(program: int, location: int, count: int,
                              transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4dv(program: int, location: int, count: int,
                              transpose: bool, value: Double1D,
                              value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x3dv(program: int, location: int, count: int,
                                transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x3dv(program: int, location: int, count: int,
                                transpose: bool, value: Double1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x2dv(program: int, location: int, count: int,
                                transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x2dv(program: int, location: int, count: int,
                                transpose: bool, value: Double1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x4dv(program: int, location: int, count: int,
                                transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix2x4dv(program: int, location: int, count: int,
                                transpose: bool, value: Double1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x2dv(program: int, location: int, count: int,
                                transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x2dv(program: int, location: int, count: int,
                                transpose: bool, value: Double1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x4dv(program: int, location: int, count: int,
                                transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix3x4dv(program: int, location: int, count: int,
                                transpose: bool, value: Double1D,
                                value_offset: int) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x3dv(program: int, location: int, count: int,
                                transpose: bool, value: DoubleBuffer) -> None:
    """

    """


@overload
def glProgramUniformMatrix4x3dv(program: int, location: int, count: int,
                                transpose: bool, value: Double1D,
                                value_offset: int) -> None:
    """

    """


def glVertexAttribL1d(index: int, x: double) -> None:
    """

    """


def glVertexAttribL2d(index: int, x: double, y: double) -> None:
    """

    """


def glVertexAttribL3d(index: int, x: double, y: double, z: double) -> None:
    """

    """


def glVertexAttribL4d(index: int, x: double, y: double, z: double,
                      w: double) -> None:
    """

    """


@overload
def glVertexAttribL1dv(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttribL1dv(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL2dv(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttribL2dv(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL3dv(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttribL3dv(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


@overload
def glVertexAttribL4dv(index: int, v: DoubleBuffer) -> None:
    """

    """


@overload
def glVertexAttribL4dv(index: int, v: Double1D, v_offset: int) -> None:
    """

    """


def glVertexAttribLPointer(index: int, size: int, type: int, stride: int,
                           pointer_buffer_offset: long) -> None:
    """

    """


@overload
def glGetVertexAttribLdv(index: int, pname: int, params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetVertexAttribLdv(index: int, pname: int, params: Double1D,
                         params_offset: int) -> None:
    """

    """


@overload
def glGetActiveAtomicCounterBufferiv(program: int, bufferIndex: int,
                                     pname: int, params: IntBuffer) -> None:
    """

    """


@overload
def glGetActiveAtomicCounterBufferiv(program: int, bufferIndex: int,
                                     pname: int, params: Int1D,
                                     params_offset: int) -> None:
    """

    """


def glClearBufferData(target: int, internalformat: int, format: int, type: int,
                      data: Buffer) -> None:
    """

    """


def glClearBufferSubData(target: int, internalformat: int, offset: long,
                         size: long, format: int, type: int,
                         data: Buffer) -> None:
    """

    """


@overload
def glGetInternalformati64v(target: int, internalformat: int, pname: int,
                            bufSize: int, params: LongBuffer) -> None:
    """

    """


@overload
def glGetInternalformati64v(target: int, internalformat: int, pname: int,
                            bufSize: int, params: Long1D,
                            params_offset: int) -> None:
    """

    """


def glInvalidateTexSubImage(texture: int, level: int, xoffset: int,
                            yoffset: int, zoffset: int, width: int,
                            height: int, depth: int) -> None:
    """

    """


def glInvalidateTexImage(texture: int, level: int) -> None:
    """

    """


def glInvalidateBufferSubData(buffer: int, offset: long, length: long) -> None:
    """

    """


def glInvalidateBufferData(buffer: int) -> None:
    """

    """


def glGetnCompressedTexImage(target: int, lod: int, bufSize: int,
                             pixels: Buffer) -> None:
    """

    """


def glGetnTexImage(target: int, level: int, format: int, type: int,
                   bufSize: int, pixels: Buffer) -> None:
    """

    """


@overload
def glGetnUniformdv(program: int, location: int, bufSize: int,
                    params: DoubleBuffer) -> None:
    """

    """


@overload
def glGetnUniformdv(program: int, location: int, bufSize: int,
                    params: Double1D, params_offset: int) -> None:
    """

    """


def glBufferPageCommitmentARB(target: int, offset: long, size: long,
                              commit: bool) -> None:
    """

    """


def glNamedBufferPageCommitmentEXT(buffer: int, offset: long, size: long,
                                   commit: bool) -> None:
    """

    """


def glNamedBufferPageCommitmentARB(buffer: int, offset: long, size: long,
                                   commit: bool) -> None:
    """

    """


def glTexPageCommitmentARB(target: int, level: int, xoffset: int, yoffset: int,
                           zoffset: int, width: int, height: int, depth: int,
                           commit: bool) -> None:
    """

    """


@overload
def glDebugMessageEnableAMD(category: int, severity: int, count: int,
                            ids: IntBuffer, enabled: bool) -> None:
    """

    """


@overload
def glDebugMessageEnableAMD(category: int, severity: int, count: int,
                            ids: Int1D, ids_offset: int,
                            enabled: bool) -> None:
    """

    """


def glDebugMessageInsertAMD(category: int, severity: int, id: int, length: int,
                            buf: String) -> None:
    """

    """


@overload
def glGetDebugMessageLogAMD(count: int, bufsize: int, categories: IntBuffer,
                            severities: IntBuffer, ids: IntBuffer,
                            lengths: IntBuffer, message: ByteBuffer) -> int:
    """

    """


@overload
def glGetDebugMessageLogAMD(count: int, bufsize: int, categories: Int1D,
                            categories_offset: int, severities: Int1D,
                            severities_offset: int, ids: Int1D,
                            ids_offset: int, lengths: Int1D,
                            lengths_offset: int, message: Byte1D,
                            message_offset: int) -> int:
    """

    """


@overload
def glGetUniformui64vNV(program: int, location: int,
                        params: LongBuffer) -> None:
    """

    """


@overload
def glGetUniformui64vNV(program: int, location: int, params: Long1D,
                        params_offset: int) -> None:
    """

    """


def glMultiDrawArraysIndirectAMD(mode: int, indirect: Buffer, primcount: int,
                                 stride: int) -> None:
    """

    """


def glMultiDrawElementsIndirectAMD(mode: int, type: int, indirect: Buffer,
                                   primcount: int, stride: int) -> None:
    """

    """


@overload
def glSetMultisamplefvAMD(pname: int, index: int, val: FloatBuffer) -> None:
    """

    """


@overload
def glSetMultisamplefvAMD(pname: int, index: int, val: Float1D,
                          val_offset: int) -> None:
    """

    """


def glStencilOpValueAMD(face: int, value: int) -> None:
    """

    """


def glTessellationFactorAMD(factor: float) -> None:
    """

    """


def glTessellationModeAMD(mode: int) -> None:
    """

    """


def glImportSyncEXT(external_sync_type: int, external_sync: long,
                    flags: int) -> long:
    """

    """


def glMakeBufferResidentNV(target: int, access: int) -> None:
    """

    """


def glMakeBufferNonResidentNV(target: int) -> None:
    """

    """


def glIsBufferResidentNV(target: int) -> bool:
    """

    """


def glMakeNamedBufferResidentNV(buffer: int, access: int) -> None:
    """

    """


def glMakeNamedBufferNonResidentNV(buffer: int) -> None:
    """

    """


def glIsNamedBufferResidentNV(buffer: int) -> bool:
    """

    """


@overload
def glGetBufferParameterui64vNV(target: int, pname: int,
                                params: LongBuffer) -> None:
    """

    """


@overload
def glGetBufferParameterui64vNV(target: int, pname: int, params: Long1D,
                                params_offset: int) -> None:
    """

    """


@overload
def glGetNamedBufferParameterui64vNV(buffer: int, pname: int,
                                     params: LongBuffer) -> None:
    """

    """


@overload
def glGetNamedBufferParameterui64vNV(buffer: int, pname: int, params: Long1D,
                                     params_offset: int) -> None:
    """

    """


@overload
def glGetIntegerui64vNV(value: int, result: LongBuffer) -> None:
    """

    """


@overload
def glGetIntegerui64vNV(value: int, result: Long1D,
                        result_offset: int) -> None:
    """

    """


def glUniformui64NV(location: int, value: long) -> None:
    """

    """


@overload
def glUniformui64vNV(location: int, count: int, value: LongBuffer) -> None:
    """

    """


@overload
def glUniformui64vNV(location: int, count: int, value: Long1D,
                     value_offset: int) -> None:
    """

    """


def glProgramUniformui64NV(program: int, location: int, value: long) -> None:
    """

    """


@overload
def glProgramUniformui64vNV(program: int, location: int, count: int,
                            value: LongBuffer) -> None:
    """

    """


@overload
def glProgramUniformui64vNV(program: int, location: int, count: int,
                            value: Long1D, value_offset: int) -> None:
    """

    """


def glTexImage2DMultisampleCoverageNV(target: int, coverageSamples: int,
                                      colorSamples: int, internalFormat: int,
                                      width: int, height: int,
                                      fixedSampleLocations: bool) -> None:
    """

    """


def glTexImage3DMultisampleCoverageNV(target: int, coverageSamples: int,
                                      colorSamples: int, internalFormat: int,
                                      width: int, height: int, depth: int,
                                      fixedSampleLocations: bool) -> None:
    """

    """


def glTextureImage2DMultisampleNV(texture: int, target: int, samples: int,
                                  internalFormat: int, width: int, height: int,
                                  fixedSampleLocations: bool) -> None:
    """

    """


def glTextureImage3DMultisampleNV(texture: int, target: int, samples: int,
                                  internalFormat: int, width: int, height: int,
                                  depth: int,
                                  fixedSampleLocations: bool) -> None:
    """

    """


def glTextureImage2DMultisampleCoverageNV(texture: int, target: int,
                                          coverageSamples: int,
                                          colorSamples: int,
                                          internalFormat: int, width: int,
                                          height: int,
                                          fixedSampleLocations: bool) -> None:
    """

    """


def glTextureImage3DMultisampleCoverageNV(texture: int, target: int,
                                          coverageSamples: int,
                                          colorSamples: int,
                                          internalFormat: int, width: int,
                                          height: int, depth: int,
                                          fixedSampleLocations: bool) -> None:
    """

    """


def glBufferAddressRangeNV(pname: int, index: int, address: long,
                           length: long) -> None:
    """

    """


def glVertexFormatNV(size: int, type: int, stride: int) -> None:
    """

    """


def glNormalFormatNV(type: int, stride: int) -> None:
    """

    """


def glColorFormatNV(size: int, type: int, stride: int) -> None:
    """

    """


def glIndexFormatNV(type: int, stride: int) -> None:
    """

    """


def glTexCoordFormatNV(size: int, type: int, stride: int) -> None:
    """

    """


def glEdgeFlagFormatNV(stride: int) -> None:
    """

    """


def glSecondaryColorFormatNV(size: int, type: int, stride: int) -> None:
    """

    """


def glFogCoordFormatNV(type: int, stride: int) -> None:
    """

    """


def glVertexAttribFormatNV(index: int, size: int, type: int, normalized: bool,
                           stride: int) -> None:
    """

    """


def glVertexAttribIFormatNV(index: int, size: int, type: int,
                            stride: int) -> None:
    """

    """


@overload
def glGetIntegerui64i_vNV(value: int, index: int, result: LongBuffer) -> None:
    """

    """


@overload
def glGetIntegerui64i_vNV(value: int, index: int, result: Long1D,
                          result_offset: int) -> None:
    """

    """


def setSwapInterval(interval: int) -> None:
    """

    """
